<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anna&#39;s Blog</title>
  
  <subtitle>My heart is in the work...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://annashuo.github.io/"/>
  <updated>2020-02-08T02:19:49.806Z</updated>
  <id>https://annashuo.github.io/</id>
  
  <author>
    <name>Anna</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Distributed System - Network Communication</title>
    <link href="https://annashuo.github.io/2020/02/04/distributed-system-3-network/"/>
    <id>https://annashuo.github.io/2020/02/04/distributed-system-3-network/</id>
    <published>2020-02-04T03:57:57.000Z</published>
    <updated>2020-02-08T02:19:49.806Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="TCP-IP-Network-Model"><a href="#TCP-IP-Network-Model" class="headerlink" title="TCP / IP Network Model"></a>TCP / IP Network Model</h3><p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/4_network_layer.png" alt></p><h4 id="Layer-1-Data-Link"><a href="#Layer-1-Data-Link" class="headerlink" title="Layer 1 Data Link"></a>Layer 1 Data Link</h4><ul><li>Physical delivery of data over a single link</li><li>In charge of <ul><li>Encapsulation of the data</li><li>Flow control</li><li>Error detection</li><li>Error correction</li><li>etc…</li></ul></li><li>Ethernet Protocol - wraps data packets into frames and uses the devices’ MAC addresses to deliver those packets from one device to another device</li><li>Data link is like the post office</li></ul><h4 id="Layer-2-Internet"><a href="#Layer-2-Internet" class="headerlink" title="Layer 2 Internet"></a>Layer 2 Internet</h4><ul><li>In charge of delivery across multiple networks and rout the packets from the source computer to the destination computer.</li><li>Internet Protocol(IP) - each device in the network is a sign, an IP address, and this address allows the packets to travel across the networks from the source host to the destination host</li><li>It doesn’t know which application process the packet is intended to nor does it know which process sent it and where the response should go to.</li><li>IP address is like the building address</li></ul><h4 id="Layer-3-Transport"><a href="#Layer-3-Transport" class="headerlink" title="Layer 3 Transport"></a>Layer 3 Transport</h4><ul><li>Take care of delivering the messages end to end from the process on one machine to another process on the other machine.</li><li>The listening port is chosen ahead of time by the destination application but the source port is generated on the fly by the sender.</li><li>Using the port, the operating system knows which process the packet belongs to</li><li>The port is like the appartment address</li></ul><h5 id="User-Datagram-Protocol-UDP"><a href="#User-Datagram-Protocol-UDP" class="headerlink" title="User Datagram Protocol (UDP)"></a>User Datagram Protocol (UDP)</h5><ul><li>Connectionless</li><li>Best effort - Unreliable</li><li>Allow Broadcasting - decoupling between the sender and receivers</li><li>Messages can be <ul><li>Lost</li><li>Duplicated </li><li>Reordered</li></ul></li><li>Based on a unit called <em>Datagram</em> which is limited in size</li><li>Is preferred when the speed and simplicity is more important than reliability</li><li>Example 1 - sending debug information</li><li>Example 2 - Real time data stream service such as video or audio</li><li>Example 3 - Online Gaming</li></ul><h5 id="Transmission-Control-Protocol-TCP"><a href="#Transmission-Control-Protocol-TCP" class="headerlink" title="Transmission Control Protocol (TCP)"></a>Transmission Control Protocol (TCP)</h5><ul><li>Reliable - Guarantees data delivery as sent, without any losses</li><li>Connection between 2 points<ul><li>Needs to be created before data is sent</li><li>Shut down in the end</li></ul></li><li>Works as a streaming interface</li><li>Each TCP connection is uniquely identified by the four tupo of source IP, port and destination IP and port.</li></ul><h4 id="Layer-4-Application"><a href="#Layer-4-Application" class="headerlink" title="Layer 4 - Application"></a>Layer 4 - Application</h4><table><thead><tr><th style="text-align:center"><strong>Protocol</strong></th><th style="text-align:center"><strong>Purpose</strong></th></tr></thead><tbody><tr><td style="text-align:center">FTP(File Transfer Protocol)</td><td style="text-align:center">Transfering files through the web</td></tr><tr><td style="text-align:center">SMTP(Simple Mail Transfer Protocal)</td><td style="text-align:center">Sending and receiving emails</td></tr><tr><td style="text-align:center">DNS(Domain Name System)</td><td style="text-align:center">Translating host names into IP address</td></tr><tr><td style="text-align:center">HTTP(Hypertext Transfer Protocol)</td><td style="text-align:center">Transmitting Hypermedia documents, video, sound, images</td></tr></tbody></table><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h4 id="Request-Structure"><a href="#Request-Structure" class="headerlink" title="Request Structure"></a>Request Structure</h4><p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/HTTP_Request.png" alt></p><h5 id="Method-Get-Head-Post-Put-Delete-Trace-Connect-Options…"><a href="#Method-Get-Head-Post-Put-Delete-Trace-Connect-Options…" class="headerlink" title="Method - Get, Head, Post, Put, Delete, Trace, Connect, Options…"></a>Method - Get, Head, Post, Put, Delete, Trace, Connect, Options…</h5><ul><li><p>Get</p><ul><li>Safe - Only retrieval action with no side effect</li><li>Idempotent - Performing N times is equivalent to performing once</li><li><strong>Does not contain a message body</strong></li></ul></li><li><p>Post</p><ul><li>Contains a message body</li><li>The operation may heve side effect and we expect the server to perform a complex operation and give us a result</li></ul></li></ul><h5 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://IP:port/path?query_string</span><br><span class="line">http://123.85.46.96:8080/users?userid=123&amp;month=03</span><br></pre></td></tr></table></figure><h5 id="Protocol-Version"><a href="#Protocol-Version" class="headerlink" title="Protocol Version"></a>Protocol Version</h5><ul><li>HTTP/1.1<ul><li>create a new connection for every request</li><li>The number of outgoing connections a client can maintain is limited by number of ports and the operating system</li><li>If one connection breaks, the other stay unaffected</li></ul></li><li>HTTP/2<ul><li>Interleave multiple requests and responses on the same connection. This interleaving is completely transparent to us and is done by logically breaking the connection into multiple internal streams.</li></ul></li></ul><h5 id="HTTP-Headers-key-value-pairs-of-strings"><a href="#HTTP-Headers-key-value-pairs-of-strings" class="headerlink" title="HTTP Headers - key/value pairs of strings"></a>HTTP Headers - key/value pairs of strings</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Header-Name:Value1;Value2;Value3</span><br><span class="line">For example, </span><br><span class="line">Content-Length:33</span><br><span class="line">Content-Type:xxx</span><br><span class="line">Content-Encoding:xxx</span><br></pre></td></tr></table></figure><ul><li>In HTTP/1.1 - plain text key value pair that can be easily inspected by tools like <em>Wireshark</em></li><li>In HTTP/2 - the headers are compressed, save on payload size and harder to inspect or debug</li></ul><h5 id="Message-Body"><a href="#Message-Body" class="headerlink" title="Message Body"></a>Message Body</h5><ul><li>Contain anything</li><li>The server and client have to agree on how to parse the data</li></ul><h4 id="Response-Structure"><a href="#Response-Structure" class="headerlink" title="Response Structure"></a>Response Structure</h4><p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/HTTP_Response.png" alt></p><h5 id="HTTP-Status-Codes"><a href="#HTTP-Status-Codes" class="headerlink" title="HTTP Status Codes"></a>HTTP Status Codes</h5><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Status Code</th><th>Group</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">1xx</td><td>Informational Response</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">2xx</td><td>Success</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">3xx</td><td>Redirection</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">4xx</td><td>Client Errors</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">5xx</td><td>Server Errors</td><td></td></tr></tbody></table><h3 id="Curl-Command-line-Http-Client"><a href="#Curl-Command-line-Http-Client" class="headerlink" title="Curl - Command line Http Client"></a>Curl - Command line Http Client</h3><ul><li>–request HTTP_METHOD</li><li>–header HEADER_LINE</li><li>–verbose(-v)</li><li>–data SOME_DATA</li><li>HTTP server address</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl --request GET -v localhost:8081/status</span><br><span class="line">curl --request POST -v --data &apos;80,100&apos; localhost:8081/task</span><br><span class="line">curl --request POST -v --header &quot;X-Test: true&quot; --data &apos;80,100&apos; localhost:8081/task</span><br><span class="line">curl --request POST -v --header &quot;X-Debug: true&quot; --data &apos;80,100&apos; localhost:8081/task</span><br></pre></td></tr></table></figure><h3 id="Message-Delivery-Semantics-in-Distributed-System"><a href="#Message-Delivery-Semantics-in-Distributed-System" class="headerlink" title="Message Delivery Semantics in Distributed System"></a>Message Delivery Semantics in Distributed System</h3><h4 id="At-Most-Once-Semantics"><a href="#At-Most-Once-Semantics" class="headerlink" title="At Most Once Semantics"></a>At Most Once Semantics</h4><ul><li>The client send a request to the server only once</li><li>If the server never receives a response or the server crashes right before it sends back the response, the client will never redeliver the request to the server</li></ul><h5 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h5><ul><li>Messages to Logging or Monitoring service</li><li>Sending promotional emails/notifications to users</li></ul><h4 id="At-least-Once-Semantics"><a href="#At-least-Once-Semantics" class="headerlink" title="At least Once Semantics"></a>At least Once Semantics</h4><ul><li>If the client does not receive a reponse, it will resend the request</li><li>If the server did perform the request action, but failed to respond, the operation will be executed multiple times</li><li>The delivery semactics works only for <u><strong>idempotent operations</strong></u></li></ul><h5 id="Idempotent-operation"><a href="#Idempotent-operation" class="headerlink" title="Idempotent operation"></a>Idempotent operation</h5><p>An operation that can be performed multiple times, and will have the same result/effect as if it was performed only once.</p><h3 id="Serialization-amp-Deserialization"><a href="#Serialization-amp-Deserialization" class="headerlink" title="Serialization &amp; Deserialization"></a>Serialization &amp; Deserialization</h3><ul><li><strong>Serialization</strong> - Translation of a data structure or object into a format that can be sent(or stored somewhere) and reconstructed later</li><li><strong>Deserialization</strong> - Reconstruction of the data back to a data structure or an object</li></ul><h4 id="Serialization-Format"><a href="#Serialization-Format" class="headerlink" title="Serialization Format"></a>Serialization Format</h4><h5 id="Json-JavaScript-Object-Notation"><a href="#Json-JavaScript-Object-Notation" class="headerlink" title="Json - JavaScript Object Notation"></a>Json - JavaScript Object Notation</h5><ul><li>Advantages<ul><li>Simple and hyman readable</li><li>Programming language independent</li><li>Easy integration with JavaScript/Front-End</li></ul></li><li>Disadvantages<ul><li>Java does not know how to map a Java class to/from Json object, requires explicit serializtion and deserialization using external libraries. Those libraries need explicit configurations andn annotation to tell them how to serialize and name the fields.</li><li>Json does not have a schema(source of truth)</li><li>Plain text parsing and transmission is suboptimal</li></ul></li></ul><h5 id="Java-Object-Serialization"><a href="#Java-Object-Serialization" class="headerlink" title="Java Object Serialization"></a>Java Object Serialization</h5><ul><li>Advantages<ul><li>Guarantees about corrent state reconstruction without any type ambiguity</li><li>Very clear source of truth(schema) for the object</li><li>Native support in all the JVM languages<ul><li>No need for external libraies</li><li>Simple development process</li></ul></li></ul></li><li>Disadvantages<ul><li>Not human readable, harder to test</li><li>Tight coupling to JVM languages</li></ul></li></ul><h6 id="The-Serializable-Interface"><a href="#The-Serializable-Interface" class="headerlink" title="The Serializable Interface"></a>The Serializable Interface</h6><ul><li><em>Serializable</em> Interface is an empty “marking” interface</li><li>Objects of classes implementing <em>Serializable</em>, can be serialized into a byte stream and recontructed into original object’s state</li><li>All the members of the class are going to be automatically serialized except for <ul><li>Static members</li><li>Transient members</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Data implements Serializable &#123;</span><br><span class="line">// non serializable</span><br><span class="line">static String var1;</span><br><span class="line">transient int var2;</span><br><span class="line"></span><br><span class="line">// serializable</span><br><span class="line">String city;</span><br><span class="line">List&lt;Date&gt; dateRange;// Date Object must be serializable, or throw InvalidClassException</span><br><span class="line">Set&lt;String&gt; categories;</span><br><span class="line">int[] ageRange;</span><br><span class="line">boolean debug;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Java-Object-Serialization-1"><a href="#Java-Object-Serialization-1" class="headerlink" title="Java Object Serialization"></a>Java Object Serialization</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public byte[] serialize(Data data) &#123;</span><br><span class="line">ByteArrayOutputStream byteStream = new ByteArrayOutputStream();</span><br><span class="line">ObjectOutput objectOutput = new ObjectOutputStream(byteStream);</span><br><span class="line">objectOutput.writeObject(data);</span><br><span class="line">objectOutput.flush();</span><br><span class="line">return byteStream.toByteArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Java-Object-Deserialization"><a href="#Java-Object-Deserialization" class="headerlink" title="Java Object Deserialization"></a>Java Object Deserialization</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public Data deserialize(byte[] data) &#123;</span><br><span class="line">ByteArrayInputStream byteStream = new ByteArrayInputStream(data);</span><br><span class="line">ObjectInput objectOutput = new ObjectInputStream(byteStream);</span><br><span class="line">return (Data)byteStream.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Google’s-Protocol-Buffers"><a href="#Google’s-Protocol-Buffers" class="headerlink" title="Google’s Protocol Buffers"></a>Google’s Protocol Buffers</h5><ul><li>Advantages<ul><li>No type ambiguity</li><li>Clear and well defined schema</li><li>Language independent thanks to the 2 step process<ul><li>Proto file definition</li><li>Language specific stub generation using proto compiler</li></ul></li><li>Efficient serialization &amp; deserialization</li><li>Security</li></ul></li><li>Disadvantages<ul><li>Not human readable</li><li>Hard to debug</li><li>More complex development process</li></ul></li></ul><h5 id="Key-Considerations"><a href="#Key-Considerations" class="headerlink" title="Key Considerations"></a>Key Considerations</h5><ul><li><u>human readable</u>, <u>language independent</u> with <u>native support in the browser</u> - <font color="red">JSON</font></li><li><u>simple</u>, <u>fast to develop</u> with <u>native JVM support</u> - <font color="red">Standard Java Object Serialization</font></li><li><u>performance</u>, <u>bandwidth</u> and <u>security</u> are more important - <font color="red">Protocol Buffers</font></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;TCP-IP-Network-Model&quot;&gt;&lt;a href=&quot;#TCP-IP-Network-Model&quot; class=&quot;headerlink&quot; title=&quot;TCP / IP Network Model&quot;&gt;&lt;/a&gt;TCP / 
      
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="distributed system" scheme="https://annashuo.github.io/tags/distributed-system/"/>
    
  </entry>
  
  <entry>
    <title>Distributed System - Introduction</title>
    <link href="https://annashuo.github.io/2020/02/01/distributed-system-1-introduction/"/>
    <id>https://annashuo.github.io/2020/02/01/distributed-system-1-introduction/</id>
    <published>2020-02-01T04:00:15.000Z</published>
    <updated>2020-02-01T05:53:51.137Z</updated>
    
    <content type="html"><![CDATA[<p>Introduction to Distributed System</p><p>A Distributed System is a system of several <u> processes </u>, running on <u>different computers</u>, communicating with each other through the <u>network</u>, and are sharing a <u>state</u> or are working together to achieve a <u>common goal</u>.</p><a id="more"></a><h3 id="Problems-of-Centralized-System"><a href="#Problems-of-Centralized-System" class="headerlink" title="Problems of Centralized System"></a>Problems of Centralized System</h3><ul><li>Performance and Storage - limited vertical scalability</li><li>Single Point of failure - loss of money and trust</li><li>High latency - poor user experience</li><li>Security and privacy</li></ul><h3 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h3><ul><li><strong>node</strong>: a process running on a dedicated machine</li><li><strong>cluster</strong>: collection of computers/nodes connected to each other; the nodes in a cluster are working on the same task and typically are running the same code.</li></ul><h3 id="Apache-Zookeeper"><a href="#Apache-Zookeeper" class="headerlink" title="Apache Zookeeper"></a>Apache Zookeeper</h3><p>High Performance Distributed System Coordination Service.</p><ul><li>Is a distributed system itself that provides us high availability and reliability</li><li>Typically runs in a cluster of an odd numver of nodes, higher than 3</li><li>Uses redundancy to allow failures and stay functional</li></ul><h3 id="Znodes’-Properties"><a href="#Znodes’-Properties" class="headerlink" title="Znodes’ Properties"></a>Znodes’ Properties</h3><p>Zookeeper provides us with a very familiar and easy software abstraction and data model that looks a lot like a <u>tree</u> and is very similar to a <u>file system</u>. Each element in that tree or virtual file system is called a <font color="red">Znode</font>.</p><p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/znode.png" alt></p><h4 id="Znode-Hybrid-between-a-file-and-a-directory"><a href="#Znode-Hybrid-between-a-file-and-a-directory" class="headerlink" title="Znode - Hybrid between a file and a directory"></a>Znode - Hybrid between a <u>file</u> and a <u>directory</u></h4><ul><li>Znodes can store any data inside (like a file)</li><li>Anodes can have children znodes (like a directory)</li></ul><h4 id="Znode-Types"><a href="#Znode-Types" class="headerlink" title="Znode Types"></a>Znode Types</h4><ul><li>Persistent - persists between sessions</li><li>Ephemeral - is deleted when the session ends</li></ul><h3 id="Simply-Use-Zookeeper"><a href="#Simply-Use-Zookeeper" class="headerlink" title="Simply Use Zookeeper"></a>Simply Use Zookeeper</h3><h4 id="Install-and-Configure"><a href="#Install-and-Configure" class="headerlink" title="Install and Configure"></a>Install and Configure</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">download from https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/</span><br><span class="line">tar -zxvf apache-zookeeper-3.5.6-bin.tar.gz</span><br><span class="line">cd apache-zookeeper-3.5.6-bin/</span><br><span class="line">scp conf/zoo_sample.cfg conf/zoo.cfg  # .cgf is configure file</span><br><span class="line">mkdir logs</span><br><span class="line">cd bin</span><br><span class="line">./zkServer.sh start# ./zkServer.sh finds more commands</span><br></pre></td></tr></table></figure><h4 id="Simply-Use"><a href="#Simply-Use" class="headerlink" title="Simply Use"></a>Simply Use</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">./zkCli.sh</span><br><span class="line">help# find more commands</span><br><span class="line">ls /</span><br><span class="line">create /parent &quot;some parent data&quot;</span><br><span class="line">ls /</span><br><span class="line">ls /parent</span><br><span class="line">create /parent/child &quot;some child data&quot;</span><br><span class="line">ls /</span><br><span class="line">get /parent</span><br><span class="line">get /parent/child</span><br><span class="line">stat /parent</span><br><span class="line">stat /parent/child</span><br><span class="line">deleteall /parent# delete parent and child</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Introduction to Distributed System&lt;/p&gt;
&lt;p&gt;A Distributed System is a system of several &lt;u&gt; processes &lt;/u&gt;, running on &lt;u&gt;different computers&lt;/u&gt;, communicating with each other through the &lt;u&gt;network&lt;/u&gt;, and are sharing a &lt;u&gt;state&lt;/u&gt; or are working together to achieve a &lt;u&gt;common goal&lt;/u&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="distributed system" scheme="https://annashuo.github.io/tags/distributed-system/"/>
    
  </entry>
  
  <entry>
    <title>Distributed System - Zookeeper</title>
    <link href="https://annashuo.github.io/2020/02/01/distributed-system-2-zookeeper/"/>
    <id>https://annashuo.github.io/2020/02/01/distributed-system-2-zookeeper/</id>
    <published>2020-02-01T04:00:15.000Z</published>
    <updated>2020-02-03T12:03:11.302Z</updated>
    
    <content type="html"><![CDATA[<p>Introduction of Zookeeper</p><a id="more"></a><h3 id="Zookeeper-Threading-Model"><a href="#Zookeeper-Threading-Model" class="headerlink" title="Zookeeper Threading Model"></a>Zookeeper Threading Model</h3><ul><li>Application’s start code in the main method is executed on the main thread</li><li>When Zookeeper object is created, two additional threads(IO thread and event thread) are created.</li></ul><h4 id="IO-thread"><a href="#IO-thread" class="headerlink" title="IO thread"></a>IO thread</h4><ul><li>Handles all the network communication with Zookeeper servers</li><li>Handles Zookeeper requests and responses</li><li>Responds to pings</li><li>Session Management</li><li>Session Timeout</li><li>…</li></ul><h4 id="Event-Thread"><a href="#Event-Thread" class="headerlink" title="Event Thread"></a>Event Thread</h4><ul><li>Manages Zookeeper events<ul><li>Connection </li><li>Disconnection</li></ul></li><li>Custom znode Watchers and Triggers we subscribe to</li><li>Event are executed in Event Thread in order</li></ul><h3 id="Watchers-and-Triggers"><a href="#Watchers-and-Triggers" class="headerlink" title="Watchers and Triggers"></a>Watchers and Triggers</h3><ul><li>We cna register a watcher when we call the methods (eg. <em>getChildren()</em>, <em>getData()</em>, <em>exists()</em>). These are one-time trigger</li><li>The watcher allows us to get a notification when a change happens<ul><li><em>getChildren(…, watcher)</em> - Get notified when the list of a znode’s children changes</li><li><em>exists(znodePath, whatcher)</em> - Get notified if a znode gets deleted or created</li><li><em>getData(znodePath, whatcher)</em> - Get notified if a znode’s data gets modified</li></ul></li><li>If we want to get future notifications, we need to register the watcher again</li></ul><h3 id="The-Herd-Effect"><a href="#The-Herd-Effect" class="headerlink" title="The Herd Effect"></a>The Herd Effect</h3><ul><li>A large number of nodes waiting for an event</li><li>When the event happens all nodes get notified and they all wake up</li><li>Only one node can “succeed”</li><li>Indicates bad design, can negatively impact the performance and can completely freeze the cluster</li></ul><h4 id="Bad-Design"><a href="#Bad-Design" class="headerlink" title="Bad Design"></a>Bad Design</h4><p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/zookeeper_bad.png" alt></p><ol><li>All nodes watch leader, a leader dies</li><li>Zookeeper send request to all nodes: the zookeeper cluster will have to notify all znodes a <em>NodeDeleteEvent</em></li><li>All nodes send request to Zookeeper: all nodes call <em>getChildren</em> method to get a new view of the Znode hierarchy from the zookeeper cluster</li><li>All nodes send request to Zookeeper: After the new leader is reelected, all the nodes are going to start watching the Znode of the leader</li></ol><p>Since all nodes will send a lot of requests to zookeeper simultaneously, with a large number of nodes in a cluster, this can really overwhelmed Zookeeper.</p><p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/hert_effect.png" alt></p><h4 id="Good-Design"><a href="#Good-Design" class="headerlink" title="Good Design"></a>Good Design</h4><p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/zookeeper_good.png" alt></p><ol><li>Each node is going to watch only Znode that comes right before it in the sequence of candidate Znodes</li><li>Zookeeper send request to one node: When leader dies, the only node that is going to be notified is its immediate successor</li><li>A node send request to zookeeper: this node call <em>getChildren</em> to make sure that it owns the Znode with the smallest sequence number and in that case it knows that it’s the new leader</li></ol><h3 id="Important-Properties"><a href="#Important-Properties" class="headerlink" title="Important Properties"></a>Important Properties</h3><ul><li><strong>Fault Tolerance</strong> - Your business can run 24*7 with no interruptions</li><li><strong>Horizontal Scalability</strong> - We can dynamically grow our business on demand </li></ul><p>Having those two “badges of honor” is not a trivial achievement we will try to repeat for every distributed system.</p><h3 id="Registration-and-Discovery"><a href="#Registration-and-Discovery" class="headerlink" title="Registration and Discovery"></a>Registration and Discovery</h3><h4 id="Static-Configuration"><a href="#Static-Configuration" class="headerlink" title="Static Configuration"></a>Static Configuration</h4><ul><li>Put all nodes addresses on a single configuration file and distribute the file among all the nodes before launch the application.</li><li>If one of the node becomes unavailable or change its address, the other nodes would still try to use the old address and will never be able to discover the new address.</li><li>If we add a new node to expand our cluster, we’ll have to regenerate this file and distribute the new file to all the nodes.</li></ul><h4 id="Dynamic-Configuration"><a href="#Dynamic-Configuration" class="headerlink" title="Dynamic Configuration"></a>Dynamic Configuration</h4><ul><li>Everytime a new node is added - one central configuration is updated</li><li>An automated configuration management tool such as <em>Chef</em> or <em>Puppet</em> can pick up the configuration and distribute it among the nodes in the cluster.</li><li>More dynamic but still involves a human to update the configuration.</li></ul><h4 id="Fully-automatically-discovery-Zookeeper"><a href="#Fully-automatically-discovery-Zookeeper" class="headerlink" title="Fully automatically discovery - Zookeeper"></a>Fully automatically discovery - Zookeeper</h4><ul><li><strong>Service Registry</strong>: Every node that joins the cluster will add an emphemeral sequential node under the service registty node(<em>/service_registry</em>). Each node would put its own address inside its Znode</li><li><strong>Service Discovery</strong>: Each node that wants to communicate or even be aware of any other node in the cluster, it simply register a watcher on the service registry node(<em>/service_registry</em>) using the <em>getChildren</em> method. Then when it wants to read or use a particular nodes address, the node will simply call the <em>getData</em> method. If there is any change in the cluster, the node will be notified with the <em>NodeChildrenChanged</em> event.</li></ul><h5 id="Peer-to-Peer-Communication"><a href="#Peer-to-Peer-Communication" class="headerlink" title="Peer to Peer Communication"></a>Peer to Peer Communication</h5><p>Every node in the cluster register a watcher to the service registry node. If a node is down or a new node is added to the cluster, every node will get notification.</p><h4 id="Leader-Worker-Architecture"><a href="#Leader-Worker-Architecture" class="headerlink" title="Leader / Worker Architecture"></a>Leader / Worker Architecture</h4><ul><li>The workers don’t need to know about each other at all but register themselves in the registry</li><li>Only the leader will register for notifications</li><li>Leader will know about the state of the cluster at all times and ditribute the work accordingly</li><li>If a leader die, the new leader will remove itself from the service registry and continue distributing the work.</li></ul><h4 id="Function-of-Service-Registry"><a href="#Function-of-Service-Registry" class="headerlink" title="Function of Service Registry"></a>Function of Service Registry</h4><ul><li>Register to the cluster by publishing their address</li><li>Register for updates to get any node’s address</li><li>cluster can scale without any modifications</li><li>establish the communication within the cluster</li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>Github - <a href="https://github.com/Annashuo/Distributed-System" target="_blank" rel="noopener">https://github.com/Annashuo/Distributed-System</a><br>Udemy Course - <a href="https://www.udemy.com/course/distributed-systems-cloud-computing-with-java/" target="_blank" rel="noopener">https://www.udemy.com/course/distributed-systems-cloud-computing-with-java/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Introduction of Zookeeper&lt;/p&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="distributed system" scheme="https://annashuo.github.io/tags/distributed-system/"/>
    
  </entry>
  
  <entry>
    <title>Blog备份</title>
    <link href="https://annashuo.github.io/2020/01/31/Blog%E5%A4%87%E4%BB%BD/"/>
    <id>https://annashuo.github.io/2020/01/31/Blog备份/</id>
    <published>2020-01-31T03:56:45.000Z</published>
    <updated>2020-02-01T07:27:07.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p>mac电脑下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">node -v 确认未安装</span><br><span class="line">brew install node</span><br><span class="line">node -v 查看node版本</span><br><span class="line">npm -v 查看npm版本</span><br></pre></td></tr></table></figure></p><p>问题一：出现node -v有node版本，但是npm -v没有版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall node</span><br><span class="line">brew install nvm</span><br><span class="line">brew install node</span><br><span class="line">node -v 查看node版本</span><br><span class="line">npm -v 查看npm版本</span><br></pre></td></tr></table></figure><h3 id="clone-blog和next主题"><a href="#clone-blog和next主题" class="headerlink" title="clone blog和next主题"></a>clone blog和next主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Annashuo/blog_source.git</span><br><span class="line">cd blog_source/blog/themes/</span><br><span class="line">scp -r next_copy next</span><br></pre></td></tr></table></figure><h3 id="重新渲染hexo并测试"><a href="#重新渲染hexo并测试" class="headerlink" title="重新渲染hexo并测试"></a>重新渲染hexo并测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在blog文件夹中</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">然后在localhost:4000查看</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装node&quot;&gt;&lt;a href=&quot;#安装node&quot; class=&quot;headerlink&quot; title=&quot;安装node&quot;&gt;&lt;/a&gt;安装node&lt;/h3&gt;&lt;p&gt;mac电脑下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="Blog" scheme="https://annashuo.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Java Software Design</title>
    <link href="https://annashuo.github.io/2018/01/22/java01/"/>
    <id>https://annashuo.github.io/2018/01/22/java01/</id>
    <published>2018-01-22T05:34:38.000Z</published>
    <updated>2020-01-30T14:14:21.103Z</updated>
    
    <content type="html"><![CDATA[<p>This is the first part of Java Software Design notes.</p><a id="more"></a><ol><li><ul><li>Primitive Type(stack): int, long, double, boolean, char, byte, short, float</li><li>Object Type(heap): classes, interfaces, arrays, enums, annotations (“==”(pointer) != “.equals()”(values))</li><li>Converts Primitive type to Object types: Integer, Long, Double, Boolean, Character, Byte, Short, Float</li><li>Generic Type contains Object type, eg. List<integer>, HashMap&lt;Byte, Double&gt;</integer></li></ul></li><li><p>Method in all Objects/Classes because all class extends class “Object”: </p><ul><li>.equals</li><li>.hashCode</li><li>.toString: every object can be printed<br>Overwrite .equals must also overwrite .hashCode</li></ul></li><li><p>Interface: a type without implementation</p><ul><li>An interface can <u>extend</u> multiple interfaces</li><li>A class can <u>implement</u> multiple interfaces</li></ul></li><li><p>Array  default method “.length()”</p></li><li><p>Enum</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">enum Planet &#123;EARTH, ...;&#125;</span><br><span class="line">Planet location = Planet.EARTH;</span><br><span class="line">location.equals(Planet.EARTH);</span><br></pre></td></tr></table></figure></li><li><p>Annotation: mark code without any immediate functional effect. eg. @Override (when code doesn;t overwrite a method will warning)</p></li><li><p>Primary collecton interfaces(java.util)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Collection          Map</span><br><span class="line">/   |   \</span><br><span class="line">Set  List  Queue</span><br></pre></td></tr></table></figure><p> Interface | Implementation<br> :–:|:–:<br> Set | HashSet(no order), LinkedHashSet(ordered by add), TreeSet<br> List | ArrayList<br> Queue | ArrayDeque<br> Deque | ArrayDeque<br> Map | HashMap</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; s = new TreeSet&lt;&gt;()</span><br><span class="line">// s can only use methods in set(limit methods usage)</span><br></pre></td></tr></table></figure><ul><li>LinkedHashSet can contain any Object Type.</li><li>TreeSet just contain those Object Type that can compared to each other.</li></ul></li><li><p>arrays and Collection cannot mix. Priority: Collection &gt; arrays</p></li><li><p>private: same class can access each others’ private variable</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Point&#123;</span><br><span class="line">private double x, y;</span><br><span class="line">public Point(double x, double y)&#123;</span><br><span class="line">this.x = s;</span><br><span class="line">this.y = y;</span><br><span class="line">&#125;</span><br><span class="line">public coid translateBy(Point p)&#123;</span><br><span class="line">x += p.x; // in class Point, one can access another Point p private variable</span><br><span class="line">y += p.y;</span><br><span class="line">&#125;</span><br><span class="line">public double getX()&#123;return x;&#125; // accessed by another class.</span><br><span class="line">public double getY()&#123;return y;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Class and Interface</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public interface Animal &#123;</span><br><span class="line">void vocalize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog implements Animal&#123;</span><br><span class="line">public void vocalize()&#123;</span><br><span class="line">System.out.println(&quot;Woof!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">class Cow implements Animal&#123;</span><br><span class="line">public void vocalize()&#123;</span><br><span class="line">moo();</span><br><span class="line">&#125;</span><br><span class="line">public void moo()&#123;</span><br><span class="line">System.out.println(&quot;Moo&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">//main</span><br><span class="line"></span><br><span class="line">// 1. Cannot define a use interface Animal</span><br><span class="line">// Animal a = new Animal(); </span><br><span class="line">// vocalize();</span><br><span class="line">// 2. define Dog instance d, d can access Dog&apos;s every methods</span><br><span class="line">Dog d = new Dog();</span><br><span class="line">d.vocalize();</span><br><span class="line">// 3. define Animal b used implementation, b can only access interface Animal&apos;s methods</span><br><span class="line">Animal b = new Cow();</span><br><span class="line">b.vocalize();</span><br><span class="line">// moo() doesn&apos;t in interface Animal, b cannot access</span><br><span class="line">// b.moo();</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the first part of Java Software Design notes.&lt;/p&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="Java" scheme="https://annashuo.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Database System Review 14</title>
    <link href="https://annashuo.github.io/2017/11/24/database-system-review14/"/>
    <id>https://annashuo.github.io/2017/11/24/database-system-review14/</id>
    <published>2017-11-24T12:45:24.000Z</published>
    <updated>2020-01-30T14:14:21.103Z</updated>
    
    <content type="html"><![CDATA[<p>##<center> Logging and Recovery </center></p><a id="more"></a><h3 id="Crash-Recovery"><a href="#Crash-Recovery" class="headerlink" title="Crash Recovery"></a>Crash Recovery</h3><p>Recovery algorithms are techniques to ensure database consistency, transaction atomicity, and durability despite falitures</p><p>Recovery algorithms: </p><ul><li>Actions during normal txn processing to ensure that the DBMS can recover from a failure</li><li>Actions after a failure to recover the database to a state that ensures atomicity, consistency, and durability.</li></ul><h3 id="Storage-Types"><a href="#Storage-Types" class="headerlink" title="Storage Types"></a>Storage Types</h3><ul><li>Volatile Storage<ul><li>Data does not persist after power is cut</li></ul></li><li>Non-volatile Storage<ul><li>Data persists after losing power</li></ul></li><li>Stable Storage<ul><li>A non-existent form of non-volatile storage that survives all possible failures scenarios.</li></ul></li></ul><h3 id="Failure-Classification"><a href="#Failure-Classification" class="headerlink" title="Failure Classification"></a>Failure Classification</h3><h4 id="Transaction-Failures"><a href="#Transaction-Failures" class="headerlink" title="Transaction Failures"></a>Transaction Failures</h4><ul><li>Logical Errors: Txn cannot complete due to some internal error condition</li><li>Internal State Errors: DBMS must terminate an active txn due ti an error condition</li></ul><h4 id="System-Failures"><a href="#System-Failures" class="headerlink" title="System Failures"></a>System Failures</h4><ul><li>Software Failure: Problem with the DBMS implementation</li><li>Hardware Failure: The computer hosting the DBMS crashes; Non-volatile storage contents are assumed to not be corrupted by system crash</li></ul><h4 id="Storage-Media-Failure"><a href="#Storage-Media-Failure" class="headerlink" title="Storage Media Failure"></a>Storage Media Failure</h4><ul><li>Non-Repairable Hardware Failure: A head crash or similar disk failure destroys all or part of non-volatile storage; Destruction is assumed to be detectable</li><li>No DBMS can recover from this</li></ul><h3 id="Buffer-Pool-Policies"><a href="#Buffer-Pool-Policies" class="headerlink" title="Buffer Pool Policies"></a>Buffer Pool Policies</h3><h4 id="Steal-Policy"><a href="#Steal-Policy" class="headerlink" title="Steal Policy"></a>Steal Policy</h4><p>Whether the DBMS allows an uncommitted txn to overwrite the most recent committed value of an object in non-volatile storage.</p><ul><li>steal: is allowed</li><li>no-steal: is not allowed</li></ul><h4 id="Force-Policy"><a href="#Force-Policy" class="headerlink" title="Force Policy"></a>Force Policy</h4><p>Whether the DBMS ensures that all updates made by a txn are reflected on non-volatile storage before the txn is allowed to commit.</p><ul><li>force: is enforced</li><li>no-force: is not enforced</li></ul><h4 id="No-Steal-Force"><a href="#No-Steal-Force" class="headerlink" title="No-Steal + Force"></a>No-Steal + Force</h4><p>This approach is the easiest to implement:</p><ul><li>Never have to undo changes of an aborted txn because the changes were not written to disk</li><li>Never have to redo changes of a committed txn because all the changes are guaranteed to be written to disk at commit time.</li></ul><h3 id="Shadow-Paging"><a href="#Shadow-Paging" class="headerlink" title="Shadow Paging"></a>Shadow Paging</h3><p>Maintain two seperate copies of the database(<strong>master</strong>, <strong>shadow</strong>). Updates are only made in the shadow copy. When a txn commits, atomically switch the shadow to be come the new master.</p><p>Buffer Pool: NO-STEAL + FORCE</p><p>Organize the database pages in a tree structure where the root is a single disk page.</p><p>There are two copies of the tree, the master and shadow. The root points to the master copy. Updates are applied to the shadow copy.</p><h4 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h4><ul><li>Copying the entire page table is expensive<ul><li>Use a page table structured like a B+tree</li><li>No need to copy entire tree, only need to copy paths in the tree that lead to updated leaf nodes</li></ul></li><li>Commit overhead is high:<ul><li>Flush every updated page, page table and root.</li><li>Data gets fragmented</li><li>Need garbage collection</li></ul></li></ul><h3 id="Write-Ahead-Log"><a href="#Write-Ahead-Log" class="headerlink" title="Write-Ahead Log"></a>Write-Ahead Log</h3><p>Record the changes made to the database in a log file before the change is made.</p><ul><li>Assume that the log is on stable storage</li><li>Log contains sufficient information to perform the necessary undo and redo actions to restore the database after a crash.</li></ul><p>Buffer Pool: STEAL + NO-FORCE</p><p>All log records pertaining to an updated page are written to non-volatile storage before the page itself is allowed to be over-written in non-volatile storage.</p><p>Write a $<begin>$ record to the log for each txn to mark its starting point. When a txn finishes, the DBMS will write a $<commit>$ record on the log and make sure that all log records are flushed before it returns an acknowledgement to application.</commit></begin></p><h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><p>When to write log entries to disk?</p><ul><li>When the txn commits</li><li>Can use group commit to batch multiple log flushes together to amortize overhead</li></ul><p>When to write dirty records to disk?</p><ul><li>Every time the txn executes an update?</li><li>Once when the txn commits?</li></ul><h3 id="Checkpoints"><a href="#Checkpoints" class="headerlink" title="Checkpoints"></a>Checkpoints</h3><p>Output onto stable storage all log records currently residing in main memory</p><p>Output to the disk all modified blocks</p><p>Write a $<checkpoint>$ entry to the log and flush to stable storage.</checkpoint></p><h3 id="Logging-Schemes"><a href="#Logging-Schemes" class="headerlink" title="Logging Schemes"></a>Logging Schemes</h3><p>Physical Logging:</p><ul><li>Record the changes made to a specific location inthe database</li><li>Example: Position of a record in a page</li></ul><p>Logical Logging:</p><ul><li>Record the high-level operations executed by txns</li><li>Not necessarily restricted to single page</li><li>Example: The UPDATE, DELETE and INSERT queries invoked by a txn</li></ul><h4 id="Physiological-Logging"><a href="#Physiological-Logging" class="headerlink" title="Physiological Logging"></a>Physiological Logging</h4><p>Hybrid approach where log records target a single page but do not specify data organization of the page.</p><h3 id="ARIES-Algorithms-for-Recovery-and-Isolation-Exploiting-Semantics"><a href="#ARIES-Algorithms-for-Recovery-and-Isolation-Exploiting-Semantics" class="headerlink" title="ARIES(Algorithms for Recovery and Isolation Exploiting Semantics)"></a>ARIES(Algorithms for Recovery and Isolation Exploiting Semantics)</h3><ul><li><strong>Write-Ahead Logging(WAL)</strong>: Any change is recorded in log on stable storage before the database change is written to disk. Has to be STEAL + NO-FORCE</li><li><strong>Repeating History During Redo</strong>: On restart, retrace actions and restore database to exact state before crash.</li><li><strong>Logging Changes During Undo</strong>: Record undo actions to log to ensure action is not repeated in the event of repeated failures</li></ul><h3 id="Log-Sequence-Numbers"><a href="#Log-Sequence-Numbers" class="headerlink" title="Log Sequence Numbers"></a>Log Sequence Numbers</h3><p>Each data page contains a <font style="color:red;">pageLSN</font>, that is the LSN of the most recent update to that page. </p><p>System keeps track of <font style="color:red;">flushedLSN</font>, that is the max LSN flushed so far.</p><p>Before page i can be written to disk, we must flush log at least to the point where:<br>$pageLSN &lt;= flushedLSN$</p><h3 id="Normal-Commit-amp-Aborted-Operations"><a href="#Normal-Commit-amp-Aborted-Operations" class="headerlink" title="Normal Commit &amp; Aborted Operations"></a>Normal Commit &amp; Aborted Operations</h3><h4 id="Transaction-Commit"><a href="#Transaction-Commit" class="headerlink" title="Transaction Commit"></a>Transaction Commit</h4><ul><li>Write <font style="color:red;">COMMIT</font> record to log.</li><li>All log records up to txn’s <font style="color:red;">COMMIT</font> record are flushed to disk</li><li>When the commit succeeds, write a special <font style="color:red;">TXN-END</font> record to log.</li></ul><h4 id="Transaction-Abort"><a href="#Transaction-Abort" class="headerlink" title="Transaction Abort"></a>Transaction Abort</h4><font style="color:red;">prevLSN</font>: the precious LSN for the txn.<br><br>- First write an <font style="color:red;">ABORT</font> record to log<br>- Play back updates in reverse order<br>- At end, write a <font style="color:red;">TXN-END</font> log record.<br><br><strong>Compensateion Log Records(CLR)</strong>: describe the actions taken to undo the actions of a previous update record.<br><br>### Fuzzy Checkpointing<br>#### Non-fuzzy Checkpoint<br>The DBMS halts everything when it takes a checkpoint to ensure a consistent snapshot.<br><br>#### Better Checkpoints<br>Pause txns while the DBMS takes the checkpoint<br><br>#### Fuzzy Checkpoint<br>- <font style="color:red;">CHECKPOINT-BEGIN</font><br>- <font style="color:red;">CHECKPOINT-END</font><h3 id="Recovery-Algorithm"><a href="#Recovery-Algorithm" class="headerlink" title="Recovery Algorithm"></a>Recovery Algorithm</h3><h4 id="ARIES-Recovery-Phase"><a href="#ARIES-Recovery-Phase" class="headerlink" title="ARIES - Recovery Phase"></a>ARIES - Recovery Phase</h4><ul><li>Analysis: read the WAL to identify dirty pages in the buffer pool and active txns at the time of the crash.</li><li>Redo: repeat all actions starting from an appropriate point in the log</li><li>Undo: reverse the actions of txns that did not commit before the crash</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##&lt;center&gt; Logging and Recovery &lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="database" scheme="https://annashuo.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Database System Review 13</title>
    <link href="https://annashuo.github.io/2017/11/24/database-system-review13/"/>
    <id>https://annashuo.github.io/2017/11/24/database-system-review13/</id>
    <published>2017-11-24T07:20:55.000Z</published>
    <updated>2020-01-30T14:14:21.103Z</updated>
    
    <content type="html"><![CDATA[<p>##<center> Multi-Version Concurrency Control(MVCC) </center></p><p>The DBMS maintains multiple <u><strong>physical</strong></u> versions of a single <u><strong>logical</strong></u> onject in the database:</p><ul><li>When a txn writes to an object, the DBMS creates a new version of that object</li><li>When a txn reads an object, it reads the newest version that existed when the txn started.</li></ul><p><strong>Writers don’t block readers.</strong></p><p><strong>Readers don’t block writers.</strong></p><p>Read-only txns can read a conststent <u>snapshot</u> without acquiring locks. Use timestamps to determine visibility.</p><p>Easily support <u>time-travlel queries</u></p><a id="more"></a><h3 id="Version-Storage"><a href="#Version-Storage" class="headerlink" title="Version Storage"></a>Version Storage</h3><p>Then DBMS uses the tuples’ pointer field to create a version chain per logical tuple.</p><ul><li>Approach 1: Append-Only Storage</li><li>Approach 2: Time-Travel Storage</li><li>Approach 3: Delta Storage</li></ul><h4 id="Append-Only-Storage"><a href="#Append-Only-Storage" class="headerlink" title="Append-Only Storage"></a>Append-Only Storage</h4><p>Version Chain Ordering:</p><ul><li>Approach 1: Oldest-to-Newest(O2N)</li><li>Approach 2: Newest-to-Oldest(N2O)</li></ul><h4 id="Time-Travel-Storage"><a href="#Time-Travel-Storage" class="headerlink" title="Time-Travel Storage"></a>Time-Travel Storage</h4><p>On every update, copy the current version to the time-travel table. Update poiters. Overwrite master version in the main table. Update pointers.</p><h4 id="Delta-Storage"><a href="#Delta-Storage" class="headerlink" title="Delta Storage"></a>Delta Storage</h4><p>On every update, copy only the values that were modified to the delta storage and overwrite the master version.</p><h3 id="Garbage-Collection"><a href="#Garbage-Collection" class="headerlink" title="Garbage Collection"></a>Garbage Collection</h3><p>The DBMS needs to remove <u>reclaimable</u> physical versions from the database over time.</p><ul><li>Approach 1: Tuple-level<ul><li>Find old versions by examining tuples directly</li><li>Background Vacuuming vs. Cooperative Cleaning</li></ul></li><li>Approach 2: Transaction-level<ul><li>Txns keep track of their old versions so the DBMS does not have to scan tuples to determine visibility.</li></ul></li></ul><h4 id="Tuple-level-GC"><a href="#Tuple-level-GC" class="headerlink" title="Tuple-level GC"></a>Tuple-level GC</h4><ul><li><strong>Background Vacuuming</strong>: Seperate thread(s) periodically scan the table and look for reclaimable versions. Works with any storage.</li><li><strong>Cooperative Cleaning</strong>: Worker threads identify reclaimable versions as they traverse version chain. Only works with <strong>O2N</strong></li></ul><h4 id="Transaction-level-GC"><a href="#Transaction-level-GC" class="headerlink" title="Transaction-level GC"></a>Transaction-level GC</h4><p>Each txn keeps track of its read/write set.</p><p>The DBMS determines when all versions created by a finished txn are no longer visible.</p><h3 id="Index-Management"><a href="#Index-Management" class="headerlink" title="Index Management"></a>Index Management</h3><p>PKey index always point to version chain head.</p><p>Secondary indexes are moew complicated.</p><h4 id="Secondary-Indexes"><a href="#Secondary-Indexes" class="headerlink" title="Secondary Indexes"></a>Secondary Indexes</h4><ul><li>Approach 1: Logical Pointers<ul><li>Use a fixed identifier per tuple that does not change.</li><li>Requires an extra indirection layer.</li><li>Primary Key vs. Tuple Id</li></ul></li><li>Approach 2: Physical Pointers<ul><li>Use the physical address to ther version chain head</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##&lt;center&gt; Multi-Version Concurrency Control(MVCC) &lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The DBMS maintains multiple &lt;u&gt;&lt;strong&gt;physical&lt;/strong&gt;&lt;/u&gt; versions of a single &lt;u&gt;&lt;strong&gt;logical&lt;/strong&gt;&lt;/u&gt; onject in the database:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a txn writes to an object, the DBMS creates a new version of that object&lt;/li&gt;
&lt;li&gt;When a txn reads an object, it reads the newest version that existed when the txn started.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Writers don’t block readers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Readers don’t block writers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Read-only txns can read a conststent &lt;u&gt;snapshot&lt;/u&gt; without acquiring locks. Use timestamps to determine visibility.&lt;/p&gt;
&lt;p&gt;Easily support &lt;u&gt;time-travlel queries&lt;/u&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="database" scheme="https://annashuo.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Database System Review 12</title>
    <link href="https://annashuo.github.io/2017/11/24/database-system-review12/"/>
    <id>https://annashuo.github.io/2017/11/24/database-system-review12/</id>
    <published>2017-11-24T02:03:44.000Z</published>
    <updated>2020-01-30T14:14:21.103Z</updated>
    
    <content type="html"><![CDATA[<p>##<center> Timestamp Ordering </center></p><a id="more"></a><h3 id="Concurrency-Control-Approaches"><a href="#Concurrency-Control-Approaches" class="headerlink" title="Concurrency Control Approaches"></a>Concurrency Control Approaches</h3><ul><li>Two-Phase Locking(2PL): Determine serializability order of conflicting operations at runtime while txn execute.</li><li>Timestamp Ordering(T/O): Determine serializability order of txns before they execute.</li></ul><h3 id="T-O-concurrency-control"><a href="#T-O-concurrency-control" class="headerlink" title="T/O concurrency control"></a>T/O concurrency control</h3><p>Use timestamps to determine the serializability order of txns. If <font style="color:red;">$TS(T_{i})&lt;TS(T_{j})$</font>, then the DBMS must ensure taht the execution schedule is equivalent to a serial schedule where <font style="color:red;">$T_{i}$</font> appears before <font style="color:red;">$T_{j}$</font>.</p><p>Eache txn <font style="color:red;">$T_{i}$</font> is assigned a unique fixed timestamp that is monotonically increasing.</p><h4 id="Recoverable-Schedules"><a href="#Recoverable-Schedules" class="headerlink" title="Recoverable Schedules"></a>Recoverable Schedules</h4><p>A schedule is <u><strong>recoverable</strong></u> if txns commit only after all txns whose changes they read, commit. Otherwise, the DBMS cannot guarantee that txns read data that will be restarted after recovering from a crash.</p><h4 id="Basic-Timestamp-Ordering"><a href="#Basic-Timestamp-Ordering" class="headerlink" title="Basic Timestamp Ordering"></a>Basic Timestamp Ordering</h4><p>Txns read and write objects without locks. Every object X is tagged with timestamp of the last txm that successfully did read/write:</p><ul><li><font style="color:red;">$W-TS(X)$</font>: Write timestamp on X</li><li><font style="color:red;">$R-TS(X)$</font>: Read timestamp on X</li></ul><p>Check timestamps for every operation. If txn tries to access an object “from the future”, it aborts and restarts.</p><p>Generates a schedule that is conflict serializable if you do <strong>not</strong> use the Thomas Write Rule.</p><ul><li>No deadlocks because no txn ever waits</li><li>Possibility of starvation for long txns if short txns keep causing conflicts.</li><li>Permits schedules that are not <strong>recoverable</strong></li></ul><h5 id="Basic-T-O-READS"><a href="#Basic-T-O-READS" class="headerlink" title="Basic T/O - READS"></a>Basic T/O - READS</h5><p>If <font style="color:red;">$TS(T_{i})&lt;W-TS(X)$</font>, this violates timestamp order of <font style="color:red;">$T_{i}$</font> with regard to the writer of <font style="color:red;">$X$</font>. Abort <font style="color:red;">$T_{i}$</font> and restart it with same TS. Else allow <font style="color:red;">$T_{i}$</font> to read X. Update <font style="color:red;">$R-TS(X)$</font> to max(<font style="color:red;">$R-TS(X),\ TS(T_{i})$</font>). Have to make a locol copy of X to ensure repeatable reads for <font style="color:red;">$T_{i}$</font>.</p><h5 id="Basic-T-O-WRITES"><a href="#Basic-T-O-WRITES" class="headerlink" title="Basic T/O - WRITES"></a>Basic T/O - WRITES</h5><p>If <font style="color:red;">$TS(T_{i})&lt;R-TS(X)$</font> or <font style="color:red;">$TS(T_{i})&lt;W-TS(X)$</font>, abort and restart <font style="color:red;">$T_{i}$</font>, else allow <font style="color:red;">$T_{i}$</font> to write <font style="color:red;">$X$</font> and update <font style="color:red;">$W-TS(X)$</font>, also have to make a local copy of <font style="color:red;">$X$</font> to ensure repeatable reads for <font style="color:red;">$T_{i}$</font>.</p><h5 id="Thomas-Write-Rule"><a href="#Thomas-Write-Rule" class="headerlink" title="Thomas Write Rule"></a>Thomas Write Rule</h5><ul><li>If <font style="color:red;">$TS(T_{i})&lt;R-TS(X)$</font>: abort and restart <font style="color:red;">$T_{i}$</font></li><li>If <font style="color:red;">$TS(T_{i})&lt;W-TS(X)$</font>: <u><strong>Thomas Write Rule</strong></u>: ignore the write and allow the txn to continue. This violates timestamp order of <font style="color:red;">$T_{i}$</font>.</li><li>Else, allow <font style="color:red;">$T_{i}$</font> to wrie <font style="color:red;">$X$</font> and update <font style="color:red;">$W-TS(X)$</font></li></ul><h5 id="Basic-T-O-PERFORMANCE-ISSUES"><a href="#Basic-T-O-PERFORMANCE-ISSUES" class="headerlink" title="Basic T/O - PERFORMANCE ISSUES"></a>Basic T/O - PERFORMANCE ISSUES</h5><ul><li>High overhead from copying data to txn’s workspace and from updating timestamps.</li><li>Long running txns can get starved.</li><li>Suffers from timestamps bottleneck.</li></ul><h4 id="Optimistic-Concurrency-Control"><a href="#Optimistic-Concurrency-Control" class="headerlink" title="Optimistic Concurrency Control"></a>Optimistic Concurrency Control</h4><p>The DBMS creates a private workspace for each txn. All modifications are applied to workspace. Any object read is copied into workspace.</p><p>When a txn commits, the DBMS compares its workspace write set to see whether it conflicts with other txns.</p><p>If there are no conflicts, the write set is installed into the “global” database.</p><h5 id="OCC-Phase"><a href="#OCC-Phase" class="headerlink" title="OCC Phase"></a>OCC Phase</h5><ul><li><strong>Read Phase</strong>: track the read/write sets of txns and start their writes in a private workspace</li><li><strong>Validation Phase</strong>: when a txn commits, check whether it conflicts with other txns</li><li><strong>Write Phase</strong>: if validation succeeds, apply private changes to database. Otherwise abort and restart the txn.</li></ul><h5 id="OCC-PERFORMANCE-ISSUES"><a href="#OCC-PERFORMANCE-ISSUES" class="headerlink" title="OCC -  PERFORMANCE ISSUES"></a>OCC -  PERFORMANCE ISSUES</h5><ul><li>High overhead for copying data locally</li><li>Validation/Write phase bottlenecks</li><li>Aborts are more wasteful because they only occur after a txn has already executed.</li><li>Suffers from timestamp allocation bottleneck</li><li>When a txn commits, all previous T/O schemes check to see whether there is a conflict with concurrent txns. This requires latches. If there are a lot of concurrent txns, then this is slow even if the conflict rate is slow.</li></ul><h4 id="Partition-Based-T-O"><a href="#Partition-Based-T-O" class="headerlink" title="Partition-Based T/O"></a>Partition-Based T/O</h4><p>Split the datebase up in disjoint subsets called <u><strong>partitions</strong></u>. Only check for conflicts between txns that are running in the same partition.</p><p>Txns are assigned timestamps based on when they arrive at the DBMS.</p><p>Partitions are protected by a single lock:</p><ul><li>Each tan is queued at the partitions it needs</li><li>The txn acquires a partition’s lock if it has the lowest timestamp in that partition’s queue</li></ul><h5 id="Partition-Based-T-O-PERFORMANCE-ISSUES"><a href="#Partition-Based-T-O-PERFORMANCE-ISSUES" class="headerlink" title="Partition-Based T/O - PERFORMANCE ISSUES"></a>Partition-Based T/O - PERFORMANCE ISSUES</h5><p>Partition-Based T/O is fast if:</p><ul><li>The DBMS knows what partitions the txn needs before it starts</li><li>Most txns only need to access a single partition</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##&lt;center&gt; Timestamp Ordering &lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="database" scheme="https://annashuo.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Database System Review 11</title>
    <link href="https://annashuo.github.io/2017/11/09/database-system-review11/"/>
    <id>https://annashuo.github.io/2017/11/09/database-system-review11/</id>
    <published>2017-11-09T06:45:36.000Z</published>
    <updated>2020-01-30T14:14:21.103Z</updated>
    
    <content type="html"><![CDATA[<p>##<center> Index Concurrency Control</center></p><a id="more"></a><h3 id="Isolation-Level"><a href="#Isolation-Level" class="headerlink" title="Isolation Level"></a>Isolation Level</h3><p>Isolation High -&gt; Low</p><ul><li>serializable: no phantoms, all reads repeatable, no dirty reads; Obtain all locks first + index locks + strict 2PL</li><li>repeatable reads: phantoms may happen; Obtain all locks first + strict 2PL</li><li>read committed: phantoms and unrepeatable reads may happen; Obtain all locks first + S locks released immediately</li><li>read uncommitted: all of them may happen; Obtain all locks first + allows dirty reads(no S locks)</li></ul><table><thead><tr><th style="text-align:center">…</th><th style="text-align:center">Dirty Read</th><th style="text-align:center">Unrepeatable Read</th><th style="text-align:center">Phantom</th></tr></thead><tbody><tr><td style="text-align:center">serializable</td><td style="text-align:center">no</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">repeatable read</td><td style="text-align:center">no</td><td style="text-align:center">no</td><td style="text-align:center">maybe</td></tr><tr><td style="text-align:center">read committed</td><td style="text-align:center">no</td><td style="text-align:center">maybe</td><td style="text-align:center">maybe</td></tr><tr><td style="text-align:center">read uncommitted</td><td style="text-align:center">maybe</td><td style="text-align:center">maybe</td><td style="text-align:center">maybe</td></tr></tbody></table><h3 id="Lock-Crabbing"><a href="#Lock-Crabbing" class="headerlink" title="Lock Crabbing"></a>Lock Crabbing</h3><p>Protocol to allow multiple threads to access/modify B+Tree at the same time.</p><ul><li>get lock for parent</li><li>get lock for child</li><li>release lock for parent if “safe”</li></ul><p>A <strong>safe node</strong> is one that will not splict or merge when updated. Not full on insertion and more than half-full on deletion.</p><h4 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h4><p>Start at root and go down; repeatedly, acquire S lock on child then unlock parent.</p><h4 id="Insert-Delete"><a href="#Insert-Delete" class="headerlink" title="Insert/Delete"></a>Insert/Delete</h4><p>Start at root and go down, obtaining X lock as needed. Once child is locked, check if it is safe. If child is safe, release all locks on ancestors.</p><h3 id="Bayer-Schkolnick-algorithm"><a href="#Bayer-Schkolnick-algorithm" class="headerlink" title="Bayer Schkolnick algorithm"></a>Bayer Schkolnick algorithm</h3><p>Assume that the leaf is safe, and use S-locks &amp; crabbing to reach it, and verify. If leaf is not safe, then do previous algorithm.</p><h4 id="Search-1"><a href="#Search-1" class="headerlink" title="Search"></a>Search</h4><p>Same as before.</p><h4 id="Insert-Delete-1"><a href="#Insert-Delete-1" class="headerlink" title="Insert/Delete:"></a>Insert/Delete:</h4><p>Set locks as if for search, get to leaf and set X lock on leaf. If leaf is not safe, release all locks and restart txn using previous Insert/Delete protocol.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##&lt;center&gt; Index Concurrency Control&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="database" scheme="https://annashuo.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Database System Review 10</title>
    <link href="https://annashuo.github.io/2017/11/08/database-system-review10/"/>
    <id>https://annashuo.github.io/2017/11/08/database-system-review10/</id>
    <published>2017-11-08T07:09:29.000Z</published>
    <updated>2020-01-30T14:14:21.102Z</updated>
    
    <content type="html"><![CDATA[<p>##<center> Concurrency Control Theory</center></p><a id="more"></a><h3 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h3><p>A <u>transaction</u> is the execution of a sequence of one or more operations on a shared database to perform some higher-level function.</p><h4 id="Strawman-System-SQLite"><a href="#Strawman-System-SQLite" class="headerlink" title="Strawman System(SQLite)"></a>Strawman System(SQLite)</h4><p>One and only one txn can be running at the same time in the DBMS. Before a txn starts, copy the entire database to a new file and make all changes to that file.</p><h4 id="Formal-Definitions"><a href="#Formal-Definitions" class="headerlink" title="Formal Definitions"></a>Formal Definitions</h4><p>Database: A fixed set of named data objects(A, B, C,…)</p><p>Transaction: A sequence of read and write operations(R(A), W(B),…)</p><p>In SQL:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">...</span><br><span class="line">COMMIT/ABORT</span><br></pre></td></tr></table></figure><h4 id="Atomicity"><a href="#Atomicity" class="headerlink" title="Atomicity"></a>Atomicity</h4><p>Execute all its actions or executes no action at all.</p><ul><li><p>Approach #1: Logging</p><p>  DBMS Logs all actions so that it can undo the actions of aborted txns.</p></li><li><p>Shadow Paging</p><p>  DBMS makes copies of pages and txns make changed to those copies. Only when the txn commits is the page made visible to others.</p></li></ul><h4 id="Consistency"><a href="#Consistency" class="headerlink" title="Consistency"></a>Consistency</h4><ul><li>Database Consistency</li><li>Transaction Consistency</li></ul><h4 id="Isolation"><a href="#Isolation" class="headerlink" title="Isolation"></a>Isolation</h4><p>Users submit txns and each txn executes as if it was running by itself.</p><p>A <u>concurrency control</u> protocol is how the DBMS decides the proper interleaving of operations from multiple transactions.</p><p>Two main categories:</p><ul><li>Pessimistic: Don’t let problems arise in the first place.</li><li>Optimistic: Assume conflicts are rare, deal with them after they happen.</li></ul><h5 id="Formal-Properties-of-Schedule"><a href="#Formal-Properties-of-Schedule" class="headerlink" title="Formal Properties of Schedule"></a>Formal Properties of Schedule</h5><ul><li><strong>Serial Schedule</strong>: A schedule that does not interleave the actions of different txns.</li><li><strong>Equivalent Schedules</strong>: The effect of executing the first schedule is identical to the effect of executing the second schedule.</li><li><strong>Serializable Schedule</strong>: A schedule that is equivalent to some serial execution of txns.</li></ul><h5 id="Conflicting-Operations"><a href="#Conflicting-Operations" class="headerlink" title="Conflicting Operations"></a>Conflicting Operations</h5><p>Two operations conflict if:</p><ul><li>They are by different txns</li><li>They are one the same object and at least one of them is a write.</li></ul><p>Three types:</p><ul><li>R-W</li><li>W-R</li><li>W-W</li></ul><h5 id="Conflict-Serializable-Schedules"><a href="#Conflict-Serializable-Schedules" class="headerlink" title="Conflict Serializable Schedules"></a>Conflict Serializable Schedules</h5><p>Conflict Serializable Schedules S is conflict equivalent to some serial schedule.</p><p>Ways to find out a schedule S is conflict serializable:</p><ul><li>if transform S into a serial schedule by swapping consecutive non-confliting operations of different txns.</li><li><p>Dependency Graphs</p><p>  <img src="https://github.com/Annashuo/hello-world/blob/master/dependency_graphs.png?raw=true" alt></p><ul><li>Operation $O_{i} \in T_{i}$</li><li>Operation $O_{j} \in T_{j}$</li><li>Operation $O_{i} $ and $ O_{j}$ conflicts</li><li><p>Operation $O_{i} $ early than $ O_{j}$ </p><p>Schedule S is conflict serializable if dependency graph has <strong>no cycle</strong>.</p></li></ul></li></ul><h5 id="View-Serializability"><a href="#View-Serializability" class="headerlink" title="View Serializability"></a>View Serializability</h5><p>Schedules $S_{1}$ and $S_{2}$ are view equivalent:</p><ul><li>if $T_{1}$ reads initial value of A in $S_{1}$, then $T_{1}$ also reads initial value of A in $S_{2}$</li><li>if $T_{1}$ reads value of A written by $T_{2}$ in $S_{1}$, then $T_{1}$ also reads value of A written by $T_{2}$ in $S_{2}$</li><li>if $T_{1}$ writes final value of A in $S_{1}$, then $T_{1}$ also writes final value of A in $S_{2}$</li></ul><h4 id="Durability"><a href="#Durability" class="headerlink" title="Durability"></a>Durability</h4><p>All of the changes of committed txns ahsould be persistent.</p><h3 id="Uses-locks-to-guarantee-serializable"><a href="#Uses-locks-to-guarantee-serializable" class="headerlink" title="Uses locks to guarantee serializable"></a>Uses <font style="color:red;">locks</font> to guarantee serializable</h3><h4 id="Lock-Types"><a href="#Lock-Types" class="headerlink" title="Lock Types"></a>Lock Types</h4><h5 id="Locks-and-Latches"><a href="#Locks-and-Latches" class="headerlink" title="Locks and Latches"></a>Locks and Latches</h5><ul><li><p>Locks</p><ul><li>Protects the index’s logical contents from other txns.</li><li>Held for txn duration</li><li>Need to be able to rollback changes.</li></ul></li><li><p>Latches</p><ul><li>Protects the critical sections of the index’s internal data structure from other threads</li><li>Held for operation duration</li><li>Do not need to be able to rollback changes.</li></ul></li></ul><table><thead><tr><th style="text-align:center">…</th><th style="text-align:center">Locks</th><th style="text-align:center">Latches</th></tr></thead><tbody><tr><td style="text-align:center">Seperate…</td><td style="text-align:center">User txns</td><td style="text-align:center">Threads</td></tr><tr><td style="text-align:center">Protect…</td><td style="text-align:center">Database contents</td><td style="text-align:center">In-Memory Data Structure</td></tr><tr><td style="text-align:center">During…</td><td style="text-align:center">Entire txns</td><td style="text-align:center">Critical sections</td></tr><tr><td style="text-align:center">Modes…</td><td style="text-align:center">Shared, Exclusive, Update, Intention</td><td style="text-align:center">Read, Write</td></tr><tr><td style="text-align:center">Deadlock</td><td style="text-align:center">Detection &amp; Resolution</td><td style="text-align:center">Avoidance</td></tr><tr><td style="text-align:center">…by…</td><td style="text-align:center">Waits-for, Timeout, Aborts</td><td style="text-align:center">Coding Discipline</td></tr><tr><td style="text-align:center">Kept in…</td><td style="text-align:center">Lock Manager</td><td style="text-align:center">Protected Data Structure</td></tr></tbody></table><h5 id="Basic-Lock-Types"><a href="#Basic-Lock-Types" class="headerlink" title="Basic Lock Types"></a>Basic Lock Types</h5><ul><li>S-LOCK: Shared locks for reads</li><li>X-LOCK: Exclusive locks for writes</li></ul><p>Compatibility Matrix</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Shared</th><th style="text-align:center">Exclusive</th></tr></thead><tbody><tr><td style="text-align:center">Shared</td><td style="text-align:center">yes</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">Exclusive</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr></tbody></table><h4 id="Two-Phase-Locking"><a href="#Two-Phase-Locking" class="headerlink" title="Two-Phase Locking"></a>Two-Phase Locking</h4><p>Two-Phase Locking(2PL) is a concurrency control protocol that determines whether a txn is allowed to access an object in the database on the fly.</p><ul><li>Phase 1: Growing<ul><li>Each txn requests the locks that it needs from the DBMS’s lock manager</li><li>The lock manager grants/denies lock requests</li></ul></li><li>Phase 2: Shrinking<ul><li>The txn is allowed to only release locks that it previously acquired. It cannot acquire new locks.</li></ul></li></ul><p><strong>Two-Phase Locking on its own is sufficient to guarantee conflic serializability. But it is subject to cascading aborting.</strong></p><h5 id="2PL-Cascading-Aborts"><a href="#2PL-Cascading-Aborts" class="headerlink" title="2PL-Cascading Aborts"></a>2PL-Cascading Aborts</h5><p>One aborted txn may cause other txn aborts.</p><h5 id="Problems-about-2PL"><a href="#Problems-about-2PL" class="headerlink" title="Problems about 2PL"></a>Problems about 2PL</h5><ul><li>There are potential schedules that are serializable but would not be allowed by 2PL. Locking limits concurrency.</li><li>May still have “dirty read”-&gt;Solution: <strong>Strict 2PL</strong></li><li>May lead to deadlocks-&gt;Solutions: <strong>Detection</strong> of <strong>Prevention</strong></li></ul><h4 id="Strict-Two-Phase-Locking"><a href="#Strict-Two-Phase-Locking" class="headerlink" title="Strict Two-Phase Locking"></a>Strict Two-Phase Locking</h4><p>A schedule is <u>strict</u> if a value written by a txn is not read or overwritten by other txns until that txn finishes.</p><p>Advantages:</p><ul><li>Does not incur cascading aborts</li><li>Aborted txns can be undone by just restoring original values of modified tuples.</li></ul><h4 id="Deadlock-Detection-Prevention"><a href="#Deadlock-Detection-Prevention" class="headerlink" title="Deadlock Detection + Prevention"></a>Deadlock Detection + Prevention</h4><p>A <u>deadlock</u> is a cycle of transactions waiting for locks to be released by each other.</p><h5 id="Deadlock-Detection"><a href="#Deadlock-Detection" class="headerlink" title="Deadlock Detection"></a>Deadlock Detection</h5><p><strong>Wait-for</strong> Graph: Nodes are txns, Edge fro $T_{i}$ to $T_{j}$ if $T_{i}$ is waiting for $T_{j}$ to release a lock. Check for cycles and make a decision to break it.</p><p><strong>Deadlock Handling</strong>:</p><ul><li>Victim Selection(by age, by progress, by the # of items already locked, by the # of txns that we have to rollback with it), Also consider the # of times a txn has been restarted in the past.</li><li>Rollback Length: Completely or Minimally</li></ul><h5 id="Deadlock-Prevention"><a href="#Deadlock-Prevention" class="headerlink" title="Deadlock Prevention"></a>Deadlock Prevention</h5><p>Priority: older-&gt; higher priority.</p><ul><li><strong>Wait-Die</strong>(Old waits for Young): If $T_{i}$ has higher priority, $T_{i}$ waits for $T_{j}$, otherwise $T_{i}$ aborts</li><li><strong>wound-wait</strong>(Young waits for Old): If $T_{i}$ has higher priority, $T_{j}$ abort, otherwise $T_{i}$ waits.</li></ul><p><strong>When a txn restarts, its new priority is original timestamp.</strong></p><h4 id="Hierarchical-Locking"><a href="#Hierarchical-Locking" class="headerlink" title="Hierarchical Locking"></a>Hierarchical Locking</h4><h5 id="Intention-Locks"><a href="#Intention-Locks" class="headerlink" title="Intention Locks"></a>Intention Locks</h5><p>A <u>intention lock</u> allows a higher level node to be locked in shared or exclusive mode without having to check all descendent nodes.</p><ul><li>Intention-Shared(IS): Indicates explicit locking at a lower level with shared locks.</li><li>Intention-Exclusive(IX): Indicates locking at lower level with excludive or shared locks.</li><li>Shared+Intention-Exclusive(SIX): The subtree rooted by that node is locked explicitly in shared mode and explicit locking is being done at lower level with exclusive-mode locks. Like S and IX at the same time.</li></ul><p>Compatibility Matrix:</p><table><thead><tr><th style="text-align:center">…</th><th style="text-align:center">IS</th><th style="text-align:center">IX</th><th style="text-align:center">S</th><th style="text-align:center">SIX</th><th style="text-align:left">X</th></tr></thead><tbody><tr><td style="text-align:center">IS</td><td style="text-align:center">y</td><td style="text-align:center">y</td><td style="text-align:center">y</td><td style="text-align:center">y</td><td style="text-align:left">n  </td></tr><tr><td style="text-align:center">IX</td><td style="text-align:center">y</td><td style="text-align:center">y</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:left">n</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">y</td><td style="text-align:center">n</td><td style="text-align:center">y</td><td style="text-align:center">n</td><td style="text-align:left">n</td></tr><tr><td style="text-align:center">SIX</td><td style="text-align:center">y</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:left">n</td></tr><tr><td style="text-align:center">X</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:center">n</td><td style="text-align:left">n</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##&lt;center&gt; Concurrency Control Theory&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="database" scheme="https://annashuo.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Database System Review 09</title>
    <link href="https://annashuo.github.io/2017/11/07/database-system-review09/"/>
    <id>https://annashuo.github.io/2017/11/07/database-system-review09/</id>
    <published>2017-11-07T07:39:00.000Z</published>
    <updated>2020-01-30T14:14:21.102Z</updated>
    
    <content type="html"><![CDATA[<p>##<center> Embedded Database Logic</center></p><h3 id="User-defined-Functions-UDF"><a href="#User-defined-Functions-UDF" class="headerlink" title="User-defined Functions(UDF)"></a>User-defined Functions(UDF)</h3><ul><li>Return Types:<ul><li>Scalar Functions: return a single data value.</li><li>Table Functions: return a single result table.</li></ul></li><li><p>Computation Definition:</p><ul><li><p>SQL functions</p><p>eg.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION get_foo(int)</span><br><span class="line">RETURNS foo AS $$</span><br><span class="line">SELECT * FROM foo WHERE foo.id = $1;</span><br><span class="line">$$ LANGUAGE SQL;</span><br></pre></td></tr></table></figure></li><li><p>External programming language</p></li></ul></li></ul><h3 id="Storage-Procesures"><a href="#Storage-Procesures" class="headerlink" title="Storage Procesures"></a>Storage Procesures</h3><p>A <u>storage procedure</u> is a self-contained function that performs more complex logic inside of the DBMS.</p><ul><li>Can have many input/output parameters</li><li>Can modify the database table/structures</li><li>Not normally used with a SQL query</li></ul><h4 id="Storage-proceduce-vs-UDF"><a href="#Storage-proceduce-vs-UDF" class="headerlink" title="Storage proceduce vs. UDF"></a>Storage proceduce vs. UDF</h4><ul><li>A UDF is meant to perform a subset ofread-only computation with a query.</li><li>A storage proceduce is meant to perform a complete computation that is independent of a query. </li></ul><h3 id="Triggers"><a href="#Triggers" class="headerlink" title="Triggers"></a>Triggers</h3><p>A <u>trigger</u> instruct the DBMS to invoke a UDF when some event occurs in the database.</p><p>It contains:</p><ul><li><p>What type of event will cause it to fire</p><p>  INSERT, UPDATE, DELETE, TRUNCATE, CREATE, ALTER, DROP</p></li><li><p>The scope of the event</p><p>  TABLE, DATABASE, VIEW, SYSTEM</p></li><li><p>When it fires relative to that event</p><ul><li>Before the statement executes</li><li>After the statement executes</li><li>Before each row that the statement affects</li><li>After each row that the statement affects</li><li>Instead of the statement</li></ul></li></ul><h3 id="Change-Notifications"><a href="#Change-Notifications" class="headerlink" title="Change Notifications"></a>Change Notifications</h3><p>A <u>change notification</u> is like a trigger except that the DBMS send a message to an external entity that something notable has happened in the database.</p><h3 id="User-defined-Types"><a href="#User-defined-Types" class="headerlink" title="User-defined Types"></a>User-defined Types</h3><p>A <u>user-defined type</u> is a special data type that ts defined by the application developer that the DBMS can stored natively.</p><h3 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h3><p>Creates a “virtual” table containing the output from a SELECT query.</p><p>Mechanism for hiding data from view of certain users.</p><p>Can be used to simplify a complex query that is executed often but won’t make it faster though.</p><h4 id="VIEW-vs-SELECT-INTO"><a href="#VIEW-vs-SELECT-INTO" class="headerlink" title="VIEW vs. SELECT INTO"></a>VIEW vs. SELECT INTO</h4><ul><li>VIEW: dynamic results are only materialized when needed.</li><li>SELECT…INTO: creates static table that does not get updated when original table gets updated.</li></ul><h4 id="Materialized-View"><a href="#Materialized-View" class="headerlink" title="Materialized View"></a>Materialized View</h4><p>Creates a view containing the output from a SELECT query that is automatically updated when the underlying tables change.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##&lt;center&gt; Embedded Database Logic&lt;/center&gt;&lt;/p&gt;
&lt;h3 id=&quot;User-defined-Functions-UDF&quot;&gt;&lt;a href=&quot;#User-defined-Functions-UDF&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="database" scheme="https://annashuo.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Database System Review 08</title>
    <link href="https://annashuo.github.io/2017/11/07/database-system-review08/"/>
    <id>https://annashuo.github.io/2017/11/07/database-system-review08/</id>
    <published>2017-11-07T06:17:03.000Z</published>
    <updated>2020-01-30T14:14:21.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Parallel-Execution"><a href="#Parallel-Execution" class="headerlink" title=" Parallel Execution "></a><center> Parallel Execution </center></h2><a id="more"></a><h3 id="Parallel-vs-Distributed"><a href="#Parallel-vs-Distributed" class="headerlink" title="Parallel vs. Distributed"></a>Parallel vs. Distributed</h3><ul><li>Parallel DBMSs:<ul><li>Nodes are physically close to each other.</li><li>Nodes connected with high-speed LAN.</li><li>Communication cost is assumed to be small</li></ul></li><li>Distributed DBMSs:<ul><li>Nodes can be far from each other</li><li>Nodes connected using public network</li><li>Communication cost and problems cannot be ignored.</li></ul></li></ul><h3 id="Inter-vs-Intra-Query-Parallelism"><a href="#Inter-vs-Intra-Query-Parallelism" class="headerlink" title="Inter- vs. Intra-Query Parallelism"></a>Inter- vs. Intra-Query Parallelism</h3><ul><li>Inter-Query: different queries are executed concurrently. Increases throughput and reduces latency.</li><li>Intra-Query: execute the operations of a single query in parallel. Decreases latency for long-running queries.</li></ul><h3 id="Process-Model"><a href="#Process-Model" class="headerlink" title="Process Model"></a>Process Model</h3><p>A DBMS’s <u>process model</u> defines how the system is architected to support concurrent requests from a multi-user application.</p><p>A <u>worker</u> is the DBMS component that is responsible form executing tacks on behalf of the client and returning the results.</p><ul><li>Approach #1: Process per DBMSs worker</li><li>Approach #2: Process Pool</li><li>Approach #3: Thread per DBMS worker</li></ul><h4 id="Process-per-DBMSs-worker"><a href="#Process-per-DBMSs-worker" class="headerlink" title="Process per DBMSs worker"></a>Process per DBMSs worker</h4><p>Each worker is a seperate OS process.</p><ul><li>Relies on OS scheduler</li><li>Use shared-memory for global data structures</li><li>A process crash doesn’t take down entire system</li></ul><h4 id="Process-Pool"><a href="#Process-Pool" class="headerlink" title="Process Pool"></a>Process Pool</h4><p>A worker use any process that is free in a pool.</p><ul><li>Relies on OS scheduler</li><li>Use shared-memory for global data structures</li><li>Bad for CPU cache locality</li></ul><h4 id="Thread-per-worker"><a href="#Thread-per-worker" class="headerlink" title="Thread per worker"></a>Thread per worker</h4><p>Single process with multiple worker thread.</p><ul><li>DBMS has to manage its own scheduling</li><li>May or may not use a dispatcher thread</li><li>Thread crash (may) kill the entire system.</li></ul><p>Advantages:</p><ul><li>Less overhead per context switch</li><li>Don’t have to manage shared memory</li></ul><p>Thread per worker process model is not equal to intra-query parallelism</p><h3 id="Inter-Query-Parallelism"><a href="#Inter-Query-Parallelism" class="headerlink" title="Inter-Query Parallelism"></a>Inter-Query Parallelism</h3><p>Procide the illusion of isolation through <u>concurrency control</u> scheme.</p><h3 id="Intra-Query-Parallelism"><a href="#Intra-Query-Parallelism" class="headerlink" title="Intra-Query Parallelism"></a>Intra-Query Parallelism</h3><p>Execute operators in parallel, improve performance of a single query.</p><ul><li><p>Approach #1: Intra-Operator: </p><p>  Operators are decomposed into independent instances that perform the same function on different subsets of data.</p></li><li><p>Approach #2: Inter-Operator(pipeline parallelism)</p><p>  Operations are overlapped in order to pipeline data from one stage to the next without materialization.</p></li></ul><h3 id="I-O-Parallelism"><a href="#I-O-Parallelism" class="headerlink" title="I/O Parallelism"></a>I/O Parallelism</h3><p>Split the DBMS installation across multiple storage devides.</p><ul><li>Multiple Disks per Database</li><li>One Database per Disk</li><li>One Relation per Disk</li><li>Split Relation across Multiple Disk</li></ul><h4 id="Multi-disk-parallelism"><a href="#Multi-disk-parallelism" class="headerlink" title="Multi-disk parallelism"></a>Multi-disk parallelism</h4><p>Configure OS/hardware to staore the DBMS’s files across multiple storage devices.</p><ul><li>Storage Appliances</li><li>RAID Configuration</li></ul><h4 id="Database-Partitioning"><a href="#Database-Partitioning" class="headerlink" title="Database Partitioning"></a>Database Partitioning</h4><p>Some DBMSs allow you to specify the disk location of each individual database. Using buffer pool manager maps a page to a disk location.</p><h4 id="Partitioning"><a href="#Partitioning" class="headerlink" title="Partitioning"></a>Partitioning</h4><p>Split single logical table into disjoint physical segments that are stored/managed separated.</p><h5 id="Vertical-Partitioning"><a href="#Vertical-Partitioning" class="headerlink" title="Vertical Partitioning"></a>Vertical Partitioning</h5><p>Store a table’s attributes in a seperate location. Have to store tuple info to recontruct the original record.</p><h5 id="Horizontal-Partitioning"><a href="#Horizontal-Partitioning" class="headerlink" title="Horizontal Partitioning"></a>Horizontal Partitioning</h5><p>Divide the tuples of a table up into disjoint segments based on some partitioning key.</p><ul><li>Hash Partitioning </li><li>Range Partitioning </li><li>Predicate Partitioning </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Parallel-Execution&quot;&gt;&lt;a href=&quot;#Parallel-Execution&quot; class=&quot;headerlink&quot; title=&quot; Parallel Execution &quot;&gt;&lt;/a&gt;&lt;center&gt; Parallel Execution &lt;/center&gt;&lt;/h2&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="database" scheme="https://annashuo.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Database System Review 07</title>
    <link href="https://annashuo.github.io/2017/11/06/database-system-review07/"/>
    <id>https://annashuo.github.io/2017/11/06/database-system-review07/</id>
    <published>2017-11-06T12:33:52.000Z</published>
    <updated>2020-01-30T14:14:21.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Query-Optimization"><a href="#Query-Optimization" class="headerlink" title="Query Optimization"></a>Query Optimization</h3><ul><li>Heuristics / Rules<ul><li>Rewrite the query to remove stupid / inefficient things</li><li>Does not require a cost model</li></ul></li><li>Cose-based search<ul><li>Use a cost model to evaluate multiple equivalent plans and pick the one with the lowest cost.</li></ul></li></ul><h4 id="Relational-algebra-equivalences-query-rewriting"><a href="#Relational-algebra-equivalences-query-rewriting" class="headerlink" title="Relational algebra equivalences (query rewriting)"></a>Relational algebra equivalences (query rewriting)</h4><ul><li>Selections:<ul><li>Perform filter as early as possible</li><li>Break a complex predicate and push down</li></ul></li><li>Projections:<ul><li>Perform them early to create smaller tuples and reduce intermediate results</li><li>Project out all attributes except the ones requested or required</li></ul></li></ul><h4 id="Cost-Estimation"><a href="#Cost-Estimation" class="headerlink" title="Cost Estimation"></a>Cost Estimation</h4><ul><li>$N_{R}$:  # tuples</li><li>$V(A,R)$: # of distinct values of attribute A</li><li>Selection cardinality $SC(A,R)$: average number of records with a value for an attribute A given $N_{R}/V(A,R)$</li><li>selectivity(<font style="color:red">sel</font>) of a predicate P is the fraction of tuples that qualify</li></ul><h5 id="Complex-Predicates"><a href="#Complex-Predicates" class="headerlink" title="Complex Predicates"></a>Complex Predicates</h5><ul><li>Equality Predicate: $A=constant \rightarrow sel(A=constant) = SC(P)\ /\ V(A,R)$</li><li>Range: $sel(A&gt;=a) = (A_{max}-a)/(A_{max}-A_{min})$</li><li>Negation Query: $sel(not\ P) = 1\ -\ sel(P)$</li><li>Conjunction: $sel(P1\ \wedge \ p2) = sel(P1)\ \cdot \ sel(P2)$</li><li>Disjunction: $sel(P1\ \vee \ p2) = sel(P1)+sel(P2)-sel(P1\ \wedge \ p2)$</li></ul><h5 id="Result-size-estimation-form-joins"><a href="#Result-size-estimation-form-joins" class="headerlink" title="Result size estimation form joins"></a>Result size estimation form joins</h5><p>$R_{cols}\cap S_{cols}={A}$<br>$estSize \approx N_{R} \cdot N_{S}\ /\ max({V(A,S), V(A,R)})$</p><p>…to be continue…<br>Query Optimization is really hard…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Query-Optimization&quot;&gt;&lt;a href=&quot;#Query-Optimization&quot; class=&quot;headerlink&quot; title=&quot;Query Optimization&quot;&gt;&lt;/a&gt;Query Optimization&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="database" scheme="https://annashuo.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Database System Review 06</title>
    <link href="https://annashuo.github.io/2017/10/10/database-system-review06/"/>
    <id>https://annashuo.github.io/2017/10/10/database-system-review06/</id>
    <published>2017-10-10T05:30:02.000Z</published>
    <updated>2020-01-30T14:14:21.102Z</updated>
    
    <content type="html"><![CDATA[<p>This post contains a couple of frequently used relational operators.</p><a id="more"></a><h3 id="Sorting-algorithms"><a href="#Sorting-algorithms" class="headerlink" title="Sorting algorithms"></a>Sorting algorithms</h3><h4 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h4><ol><li>In relational model, tuple in a table have no specific order</li><li><p>SELECT … ORDER BY</p><ul><li>Users often want to retrieve tuples in a specific order</li><li>Trivial to support duplicate elimination(DISTINCT)</li><li>Bulk loading sorted tuples into B+ tree index is faster</li></ul></li><li><p>SELECT … GROUP BY -&gt; sort-merge join algorithm</p></li></ol><h4 id="Based-on-memory"><a href="#Based-on-memory" class="headerlink" title="Based on memory"></a>Based on memory</h4><p>If data fits in memory, use standard sorting algorithm like <strong>quick sort</strong></p><p>If data does not fit in memory, use <strong>external sorting</strong>, <strong>B+ TREE index</strong></p><h4 id="External-merge-sort"><a href="#External-merge-sort" class="headerlink" title="External merge sort"></a>External merge sort</h4><p>Frequently used external sorting algorithm</p><p>Idea: Hybird <strong>sort-marge</strong> strategy</p><ul><li>Sorting phase: sort small chunks of data that in main-memory, and then write back the sorted data to a file on disk</li><li>Merge phase: combine sorted sub-files into a single larger file</li></ul><h5 id="2-way-External-Merge-Sort"><a href="#2-way-External-Merge-Sort" class="headerlink" title="2-way External Merge Sort"></a>2-way External Merge Sort</h5><p>Assuming files are broken up into <font style="color:red">N</font> pages. The DBMS has a finite number of <font style="color:red">B</font> fixed-size buffers.</p><p>Pass 0: </p><ul><li>Reads every B pages of the tables into memory</li><li>Sort them and write them back to disk</li><li>Each sorted set of pages is a <font style="color:red">run</font></li></ul><p>Pass 1,2,3,…:</p><ul><li>Recursively merges pairs of runs into runs twice as long</li><li>Uses three buffer pages(two for input, one for output)</li></ul><p>Number of passes = <font style="color:red">$1+\left \lceil log_{2}N \right \rceil$</font></p><p>Total I/O cost = <font style="color:red">$2N * (#\ of\ passes)$</font></p><p>This algorithm only requeries 3 buffer pages, buffer pages utilization is pretty low.</p><h5 id="General-External-Merge-Sort-K-way-external-merge-sort"><a href="#General-External-Merge-Sort-K-way-external-merge-sort" class="headerlink" title="General External Merge Sort(K-way external merge sort)"></a>General External Merge Sort(K-way external merge sort)</h5><p>Pass 0: use <font style="color:red">B</font> buffer pages, produce <font style="color:red">$\left \lceil N/B \right \rceil$</font> sorted runs of size B</p><p>Pass 1,2,3,…: merge <font style="color:red">B-1</font> runs(K-way merge)</p><p>Number of passes = <font style="color:red">$1+\left \lceil log_{B-1}\left \lceil N/B \right \rceil \right \rceil$</font></p><p>Total I/O cost = <font style="color:red">$2N * (#\ of\ passes)$</font></p><h6 id="K-way-merge-algorithm"><a href="#K-way-merge-algorithm" class="headerlink" title="K-way merge algorithm"></a>K-way merge algorithm</h6><p>Input: K sorted sub-arrays </p><p>Efficiently computes the <strong>minimum element</strong> of K sub-arrays</p><p>Repeatedly transfers that element to output array.</p><p>Internally maintains a heap to efficiently compute minimum element.</p><p>Time Complexity = <font style="color:red">$O(N\ log_{2}K)$</font></p><h4 id="Using-B-Tree"><a href="#Using-B-Tree" class="headerlink" title="Using B+ Tree"></a>Using B+ Tree</h4><p>If table that must be sorted already has a B+ tree index on the sorted attribute(s)</p><p>Idea: Retrieve tuples in desired sorted order by simply traversing the leaf pages of the tree</p><p>Cases to consider:</p><ul><li>Clustered B+ tree: traverse to the left-most leaf page and then retrieve tuples from all leaf pages. <strong>better than external sorting</strong></li><li>Unclustered B+ tree: Chase each pointer to the page that contains the data. Generally one I/O per data record.<strong>Bad!</strong></li></ul><h4 id="Alternatives-to-sorting"><a href="#Alternatives-to-sorting" class="headerlink" title="Alternatives to sorting"></a>Alternatives to sorting</h4><p>GROUP BY: may no need to be sorted</p><p>DISTINCT: use hashing to remove duplicates without ordering, computationally cheaper than sorting.</p><h3 id="JOIN-algorithms"><a href="#JOIN-algorithms" class="headerlink" title="JOIN algorithms"></a>JOIN algorithms</h3><h4 id="WHY-1"><a href="#WHY-1" class="headerlink" title="WHY"></a>WHY</h4><ol><li><p>In relational model</p><ul><li>unnecessary repetition of information must be avoided</li><li>decompose tables using normalization theory</li></ul></li><li><p>SELECT … JOIN</p><ul><li>Reconstruct original tables via joins</li><li>No information loss</li></ul></li></ol><h4 id="Join-algorithms"><a href="#Join-algorithms" class="headerlink" title="Join algorithms"></a>Join algorithms</h4><ul><li>Nested Loop Join<ul><li>Simple Nested Loop Join</li><li>Block Nested Loop Join</li><li>Index Nested Loop Join</li></ul></li><li>Sort-Merge Join</li><li>Hash Join</li></ul><h4 id="Join-operator-output"><a href="#Join-operator-output" class="headerlink" title="Join operator output"></a>Join operator output</h4><ul><li>data: copy values for the attributes in outer and inner tuples into a new output tuple. subsequent operators in the query plan never need to go back to the base tables to get more data.</li><li>record id: only copy the joins keys along with the record ids of the matching tuples. Ideal for column stores because the DBMS does not copy data that is not need for the query(also called <strong>materialization</strong>)</li></ul><h4 id="I-O-cost-algorithm"><a href="#I-O-cost-algorithm" class="headerlink" title="I/O cost algorithm"></a>I/O cost algorithm</h4><p>Assume</p><ul><li><font style="color:red">M</font> pages in R, <font style="color:red">$p_{R}$</font> tuples per page, <font style="color:red">m</font> tuples total</li><li><font style="color:red">N</font> pages in S, <font style="color:red">$p_{S}$</font> tuples per page, <font style="color:red">n</font> tuples total</li></ul><p>Ignore output cost: <font style="color:red">Cost metric = # of I/Os</font></p><h4 id="Nested-Loop-Join"><a href="#Nested-Loop-Join" class="headerlink" title="Nested Loop Join"></a>Nested Loop Join</h4><h5 id="Simple-Nested-Loop-Join"><a href="#Simple-Nested-Loop-Join" class="headerlink" title="Simple Nested Loop Join"></a>Simple Nested Loop Join</h5><p>2 buffers for steaming the tables and 1 for storing output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foreach tuple of R(outer table)</span><br><span class="line">foreach tuple of S(inner table)</span><br><span class="line">output, if r and s match</span><br></pre></td></tr></table></figure><font style="color:red">Cost = M + (m*N)</font><h5 id="Block-Nested-Loop-Join"><a href="#Block-Nested-Loop-Join" class="headerlink" title="Block Nested Loop Join"></a>Block Nested Loop Join</h5><p>The small table (in terms of # of pages) should be outer.(in this example, M&lt;N)</p><ul><li><p>if buffer = 3(2 for input, 1 for output),</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">read block from R</span><br><span class="line">read block from S</span><br><span class="line">output, if pair of tuples match</span><br></pre></td></tr></table></figure></li></ul><pre><code>&lt;font style=&quot;color:red&quot;&gt;Cost = M + (M*N)&lt;/font&gt;</code></pre><ul><li><p>if buffer B &lt; M + 2,</p><p>  Use <font style="color:red">B-2</font> buffers for scaning outer table, 1 buffer to scanning inner table, 1 for storing output</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">read B-2 blocks from R</span><br><span class="line">read block from S</span><br><span class="line">output, if a pair of tuples match</span><br></pre></td></tr></table></figure></li></ul><pre><code>&lt;font style=&quot;color:red&quot;&gt;$Cost = M + (\left \lceil M/(B-2) \right \rceil *N)$&lt;/font&gt;</code></pre><ul><li><p>if buffer B &gt;= M + 2</p>  <font style="color:red">Cost = M + N</font></li></ul><h5 id="Index-Nested-Loop-Join"><a href="#Index-Nested-Loop-Join" class="headerlink" title="Index Nested Loop Join"></a>Index Nested Loop Join</h5><p>Use an index to find <strong>inner table matches</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foreach tuple r of R</span><br><span class="line">foreach tuple s of S, where ri = sj</span><br><span class="line">output, if ri and sj match</span><br></pre></td></tr></table></figure><font style="color:red">Cost = M + (m<em>C)</em></font> (C is index look-up cost)<br><br>##### Nested Loop Join SUMMARY<br><br>- Pick the small table as outer table<br>- Buffer as much of outer table in memory as possible<br>- Loop over the inner table or use an index<br><br>#### Sort-Merge Join<br><br>- Sort Phase: sort <strong>both</strong> tables on the join attribute<br>- Merge Phase: scan the two sorted tables in parallel and emit matching tuples.<br><br>Useful when one or both tables are already sorted or output must be sorted on join key<br><br><font style="color:red">Cost = [(2M\logM/logB) + (2N*logN/logB)] + [M+N]</font><h4 id="Hash-Join"><a href="#Hash-Join" class="headerlink" title="Hash Join"></a>Hash Join</h4><p>Partitioning Phase:Read and Write both tables. <font style="color:red">Cost = 2(M+N)</font></p><p>Probing Phase:Read tables. <font style="color:red">Cost = (M+N)</font></p><p>Total: <font style="color:red">Cost = 3(M+N)</font></p><h5 id="Basic-hash-join-algorithm"><a href="#Basic-hash-join-algorithm" class="headerlink" title="Basic hash join algorithm"></a>Basic hash join algorithm</h5><ul><li><p>Phase #1: Build</p><p>  Scan the outer relation and populate a hash table using hash function $h_{1}$ on the join attributes</p></li><li><p>Phase #2: Probe</p><p>  Scan the inner relation and use $h_{1}$ on each tuple to jump to a location in the hash table and find a matching tuple</p></li></ul><p>build hash table H for R<br><br>foreach tuple s of S<br><br>    output, if $H_{1}(s_{j}) \in HT(R)$ </p><h5 id="Hash-table-values"><a href="#Hash-table-values" class="headerlink" title="Hash table values"></a>Hash table values</h5><ul><li><p>Approach 1: Full tuple</p><ul><li>Avoid having to retrieve the outer relation’s tuple contents on a match</li><li>Takes up more space in memory</li></ul></li><li><p>Approach 2: Tuple identifier</p><ul><li>Ideal for column stores because the DBMS doesn’t fetch no need data from disk </li><li>Better if join selectivity is slow</li></ul></li></ul><h5 id="Grace-Hash-Join"><a href="#Grace-Hash-Join" class="headerlink" title="Grace Hash Join"></a>Grace Hash Join</h5><p>When no enough memory to fit the entire hash table</p><ul><li><p>Phase #1: Build</p><p>  Hash both tables on the join attribute into partitions</p></li><li><p>Phase #2: Probe</p><p>  Compares tuples in corresponding partitions for each table</p></li></ul><p>If buckets don’t fit in memory, use <strong>recursive partitioning</strong>, build another hash table for buckets using hash function $h_{2}$($h_{1}\not= h_{2}$)</p><h4 id="JOIN-SUMMARY"><a href="#JOIN-SUMMARY" class="headerlink" title="JOIN SUMMARY"></a>JOIN SUMMARY</h4><table><thead><tr><th style="text-align:center">Join algorithm</th><th style="text-align:center">I/O cost </th></tr></thead><tbody><tr><td style="text-align:center">Simple Nested Loop Join</td><td style="text-align:center">M+(m*N)</td></tr><tr><td style="text-align:center">Block Nested Loop Join</td><td style="text-align:center">M+(M*N)</td></tr><tr><td style="text-align:center">Index Nested Loop Join</td><td style="text-align:center">M+(m*logN)</td></tr><tr><td style="text-align:center">Sort Merge Join</td><td style="text-align:center">M+N+(sort cost)</td></tr><tr><td style="text-align:center">Hash Join</td><td style="text-align:center">3(M+N)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post contains a couple of frequently used relational operators.&lt;/p&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="database" scheme="https://annashuo.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Database System Review 05</title>
    <link href="https://annashuo.github.io/2017/10/10/database-system-review05/"/>
    <id>https://annashuo.github.io/2017/10/10/database-system-review05/</id>
    <published>2017-10-10T02:33:25.000Z</published>
    <updated>2020-01-30T14:14:21.101Z</updated>
    
    <content type="html"><![CDATA[<p>Query processing includes processing models, access models and expression evaluation</p><a id="more"></a><h3 id="Query-plan"><a href="#Query-plan" class="headerlink" title="Query plan"></a>Query plan</h3><p>The operators are arranged in a tree. Data flows from the leaves toward the root.</p><h3 id="Processing-Methods"><a href="#Processing-Methods" class="headerlink" title="Processing Methods"></a>Processing Methods</h3><p>A DBMS’s processing model defines how the system executes a query plan.</p><p>Three approaches:</p><ul><li>Iterator Model</li><li>Materialization Model</li><li>Vectorized / Batch Model</li></ul><h4 id="Iterator-Model-Volcano-Model-–-Top-down-plan-processing"><a href="#Iterator-Model-Volcano-Model-–-Top-down-plan-processing" class="headerlink" title="Iterator Model(Volcano Model) – Top-down plan processing"></a>Iterator Model(Volcano Model) – Top-down plan processing</h4><p>Each query plan operator implements a next function.</p><ul><li>On each invocation, the operator returns either a singke tuple or a null marker if there are no more tuples</li><li>The operator implements a loop that calls next on its children to retrieve their tuples and then process them.</li></ul><p>This allows for tuple pipelining. Some operators will block until children emit all of their tuples.</p><h4 id="Materialization-Model-–-Bottom-up-plan-processing"><a href="#Materialization-Model-–-Bottom-up-plan-processing" class="headerlink" title="Materialization Model – Bottom-up plan processing"></a>Materialization Model – Bottom-up plan processing</h4><p>Each operator processes its input all at once and tehn emits its output all at once.</p><ul><li>The operator “materializes” it output as a single result.</li><li>The DBMS can push down hints into avoid scanning too many tuples.</li></ul><p>Better for PLTP workloads because queries typically only access a small number of tuples at a time.</p><ul><li>Lower execution / coordination overhead.</li><li>More difficult to parallelize.</li></ul><p>No good for OLAP queries with large intermediate result.</p><h4 id="Vectorization-Model"><a href="#Vectorization-Model" class="headerlink" title="Vectorization Model"></a>Vectorization Model</h4><p>Like Interator Model, each operator implements a next function</p><p>Each operator emits a <u>batch</u> of tuples instead of a single tuple.</p><ul><li>The operator’s internal loop processes multiole tuples at a time.</li><li>The size of batch can vary based on hardware or query properties.</li></ul><p>Ideal for OLAP queries</p><ul><li>Greatly reduces the number of invocations per operator</li><li>Allows dor operators to use vectorized(SIMD) instructions to process batches of tuples.</li></ul><table><thead><tr><th style="text-align:center">Processing Model</th><th style="text-align:center">Iterator</th><th style="text-align:center">Materialization</th><th style="text-align:left">Vectorized</th></tr></thead><tbody><tr><td style="text-align:center">Direction</td><td style="text-align:center">Top-Down</td><td style="text-align:center">Bottom-Top</td><td style="text-align:left">Top-Down</td></tr><tr><td style="text-align:center">Emits</td><td style="text-align:center">Single Tuple</td><td style="text-align:center">Entire Tuple Set</td><td style="text-align:left">Tuple Batch</td></tr><tr><td style="text-align:center">Target</td><td style="text-align:center">General Purpose</td><td style="text-align:center">OLTP</td><td style="text-align:left">OLAP</td></tr></tbody></table><h3 id="Acess-Method"><a href="#Acess-Method" class="headerlink" title="Acess Method"></a>Acess Method</h3><p>A access method is a way that the DBMS can access the data stored in a table.(Not defined in relational algebra)</p><p>Three basic approaches:</p><ul><li>Sequential Scan</li><li>Index Scan</li><li>Multi-Index / “Bitmap” Scan</li></ul><h4 id="Sequential-Scan"><a href="#Sequential-Scan" class="headerlink" title="Sequential Scan"></a>Sequential Scan</h4><p>For each page in the table:</p><ul><li>Retrive it from the buffer pool.</li><li>Iterate over each tuple and check whether to include it</li></ul><p>The DBMS maintain an internal <strong>cursor</strong> that tracks the last page / slot it examined.</p><p>Sequential Scan Optimizations:</p><ul><li>Prefetching</li><li>Paralleization</li><li>Zone Maps</li><li>Buffer POll Bypass</li><li>Heap Clustering</li></ul><h5 id="Zone-Maps"><a href="#Zone-Maps" class="headerlink" title="Zone Maps"></a>Zone Maps</h5><p>Pre-computed aggregates(like min, max, avg, sum, count) for the attribute values in a page.</p><p>DBMS can check the zone map first to decide whether it wants to access the page.</p><h5 id="Buffer-Pool-Bypass-Light-Scan"><a href="#Buffer-Pool-Bypass-Light-Scan" class="headerlink" title="Buffer Pool Bypass(Light Scan)"></a>Buffer Pool Bypass(Light Scan)</h5><p>The sequential scan operator will not store fetched pages in the buffer pool to avoid overhead.</p><ul><li>Memory is local to running query.</li><li>Works well if operator need to read a large sequence of pages that are contiguous on disk.</li></ul><h5 id="Heap-Clustering"><a href="#Heap-Clustering" class="headerlink" title="Heap Clustering"></a>Heap Clustering</h5><p>Tuple are sorted in the heap’s pages using the order specified by a clustering index.</p><p>If the query accesses tuples using the clustering index’s attributes, then the DBMS can jump directly to the pages that it needs.</p><h4 id="Index-Scan"><a href="#Index-Scan" class="headerlink" title="Index Scan"></a>Index Scan</h4><p>The DBMS picks an index to find the tuples that the query needs.</p><p>Which index to use depends on:</p><ul><li>What attributes the index contains</li><li>What attributes the query references</li><li>The attributes’s value domains</li><li>Predicate composition</li><li>Whether the index has unique or non-uninque keys</li></ul><h4 id="Multi-index-Scan-Bitmap-Scan-in-PostgreSQL"><a href="#Multi-index-Scan-Bitmap-Scan-in-PostgreSQL" class="headerlink" title="Multi-index Scan(Bitmap Scan in PostgreSQL)"></a>Multi-index Scan(Bitmap Scan in PostgreSQL)</h4><p>If there are multiple indexs that the DBMS can use for a query:</p><ul><li>Compute sets of record ids using each matching index</li><li>Combine these sets bases on the query’s predicates(union vs. intersect)</li><li>Retrieve the record and apply any remaining terms</li></ul><h5 id="Index-Scan-Page-Sorting"><a href="#Index-Scan-Page-Sorting" class="headerlink" title="Index Scan Page Sorting"></a>Index Scan Page Sorting</h5><p>Retrieve tuples in the order that appear in an unclustered index is inefficient.</p><p>The DBMS can first figure out all the tuples that it needs and then sort them based on their page id.</p><h3 id="Expression-Evaluation"><a href="#Expression-Evaluation" class="headerlink" title="Expression Evaluation"></a>Expression Evaluation</h3><p>The DBMS represents a WHERE clause as an expression tree.</p><p>The nodes in the tree represent different expression types:</p><ul><li>Comparisons(=,&lt;,&gt;,!=)</li><li>Conjunction(AND), Disjunction(OR)</li><li>Arithmetic Operators(+,-,*,/,%)</li><li>Constant Values</li><li>Tuple Attribute References</li></ul><p>Expression Tree is slow because the DBMS traverses the tree and for each node that it visits it has to figure out what the operator needs to do.</p><p>Better approach is to just evaluate the expression directlt(JIT compilation)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Query processing includes processing models, access models and expression evaluation&lt;/p&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="database" scheme="https://annashuo.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Database System Review 04</title>
    <link href="https://annashuo.github.io/2017/09/26/database-system-review04/"/>
    <id>https://annashuo.github.io/2017/09/26/database-system-review04/</id>
    <published>2017-09-26T01:56:26.000Z</published>
    <updated>2020-01-30T14:14:21.101Z</updated>
    
    <content type="html"><![CDATA[<p>We are now going to talk about how to support the DBMS’s execution engine to read/write data from pages.</p><p>Two types of data structures:</p><ul><li>Hash tables</li><li>Trees</li></ul><a id="more"></a><h3 id="Data-structures"><a href="#Data-structures" class="headerlink" title="Data structures"></a>Data structures</h3><ul><li>Internal meta-data</li><li>Core data storage</li><li>Temporary data structures</li><li>Table indexes</li></ul><h4 id="Table-index"><a href="#Table-index" class="headerlink" title="Table index"></a>Table index</h4><p>A <u>table index</u> is a replica of a subset of a table’s columns that are organized and/or sorted for efficient access using a subset of those columns.</p><p>Trade-off on the number of indexes to create per database</p><ul><li>Storage Overhead</li><li>Maintenance Overhead</li></ul><h3 id="Design-decisions"><a href="#Design-decisions" class="headerlink" title="Design decisions"></a>Design decisions</h3><ul><li>Data Organization: how to layout memory and what information to store inside of the data structure to support efficient access.</li><li>Concurrency: how to enable multiple threads to access the data structure at the same time without causing problems.</li></ul><h3 id="Hash-Tables"><a href="#Hash-Tables" class="headerlink" title="Hash Tables"></a>Hash Tables</h3><p>A <u>hash table</u> implements an associative array abstract data type that maps keys to values.</p><h4 id="Static-hash-table"><a href="#Static-hash-table" class="headerlink" title="Static hash table"></a>Static hash table</h4><p>Allocate a giant array that has one slot for <u>every</u> element that you need to record.</p><p>Requirement:</p><ul><li>know the number of elemts ahead of time</li><li>each key is unique</li><li>perfect hash function: $key1 \neq  key2 \Rightarrow hash(key1) \neq hash(key2)$ </li></ul><h5 id="Chained-hashing"><a href="#Chained-hashing" class="headerlink" title="Chained hashing"></a>Chained hashing</h5><p>Maintain a linked list of <u>buckets</u> for each slot in the hash table.</p><p>Resolve collisions by placing all elements with the same hash key into the same bucket</p><font style="color:red">Insertion, deletion and lookup are all hash to its bucket and scan for it, depending on the bucket size.</font><p><img src="https://github.com/Annashuo/hello-world/blob/master/chained-hash.png?raw=true" alt></p><p>The hash table can grow infinitely because you just keep adding new buckets to the linked list.</p><p>When store a new entry or extend the linked list, just take a latch on the bucket.</p><h6 id="Non-unique-keys"><a href="#Non-unique-keys" class="headerlink" title="Non-unique keys"></a>Non-unique keys</h6><ul><li>Choice #1: <strong>Seperate Linked List</strong>, store values in seperate storage area for each key.</li><li>Choice #2: <strong>Store in Bucket</strong>, store dulicate keys entries in the same bucket.</li></ul><p><img src="https://github.com/Annashuo/hello-world/blob/master/non-unique-keys.png?raw=true" alt></p><h5 id="Open-addressing-Hashing"><a href="#Open-addressing-Hashing" class="headerlink" title="Open-addressing Hashing"></a>Open-addressing Hashing</h5><p>Single gaint table of slots.</p><p>Resolve collisions by linearly searching for the next free slot in the table.</p><font style="color:red">Insertion, deletion and lookup are all hash to its bucket and scan for it, depending on the bucket size. But has to store the key in the index to know when to stop scanning.</font><p><img src="https://github.com/Annashuo/hello-world/blob/master/open-address-hash.png?raw=true" alt></p><p>Always requires a hasg table with ~2x the number of slots as the number of elements in order to avoid collisions of hashed keys.</p><h5 id="Cuckoo-Hashing"><a href="#Cuckoo-Hashing" class="headerlink" title="Cuckoo Hashing"></a>Cuckoo Hashing</h5><p>Use multiple hash tables with different hash functions </p><font style="color:red">Deletion and lookup are always O(1) because only one location per hash table is checked<br><br>On insert, check every table and pick anyone that has a free slot. If no table has a free slot, evict the element from one of them and then re-hash it find a new location</font><p>Make sure that we don’t get stuck in an infinite loop when moving keys.</p><p>If there is a circle, rebuild the entire hash tables with new hash functions</p><h4 id="Dynamic-Hash-Tables"><a href="#Dynamic-Hash-Tables" class="headerlink" title="Dynamic Hash Tables"></a>Dynamic Hash Tables</h4><h5 id="Extendible-Hashing"><a href="#Extendible-Hashing" class="headerlink" title="Extendible Hashing"></a>Extendible Hashing</h5><p>Chained hashing approach when we split buckets instead of letting the linked list grow forever.</p><p>This requires reshuffling the entries on split, but the change is localized.</p><h5 id="Linear-Hashing"><a href="#Linear-Hashing" class="headerlink" title="Linear Hashing"></a>Linear Hashing</h5><p>Maintain a <u>pointer</u> that tracks the next bucket to split.</p><p>When <u>any</u> bucket overflows, split the bucket at the pointer location.</p><h3 id="B-TREE-family"><a href="#B-TREE-family" class="headerlink" title="B-TREE family"></a>B-TREE family</h3><ul><li>B-Tree</li><li>B+Tree</li><li>B$^{link}$-Tree</li><li>B*Tree</li></ul><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>A <strong>B+Tree</strong> is a self-balancing tree data structure that keeps data <font style="color: red;">sorted</font> and allows searches, sequential access, insertions and deletions in <font style="color: red;">O(log n)</font></p><ul><li>Generalization of a binary search tree in that a node can have more than tw children</li><li>Optimized for systems that read and write large blocks of data</li></ul><h5 id="B-Tree-properties"><a href="#B-Tree-properties" class="headerlink" title="B+Tree properties"></a>B+Tree properties</h5><p>A B+Tree is an M-way search tree with the following properties:</p><ul><li>perfectly balanced(every leaf node is at the same depth)</li><li>Every inner node other than the root is at least half-full(M/2-1 &lt;= #KEYS &lt; M-1)</li><li>Every inner node with k keys has k+1 non-null children</li></ul><h5 id="B-Tree-nodes"><a href="#B-Tree-nodes" class="headerlink" title="B+Tree nodes"></a>B+Tree nodes</h5><p>Every node in the B+Tree contains an array of key/value pairs</p><ul><li>The keys will always be the column or columns that you built your index on</li><li>The values will diff based on whether the node is classified as <u><strong>inner nodes</strong></u> or <u><strong>leaf nodes</strong></u></li></ul><h5 id="B-Tree-leaf-node-values"><a href="#B-Tree-leaf-node-values" class="headerlink" title="B+Tree: leaf node values"></a>B+Tree: leaf node values</h5><ul><li>Approach #1 <strong>Record ids</strong>: a pointer to the location of the tuple that the index entry corresponds to.</li><li>Approach #2 <strong>Tuple Data</strong>: the actual contents of the tuple is stored in the leaf node; secondary indexes have to store the record id as their values</li></ul><h5 id="B-Tree-vs-B-Tree"><a href="#B-Tree-vs-B-Tree" class="headerlink" title="B-Tree vs. B+Tree"></a>B-Tree vs. B+Tree</h5><p>B-Tree stored keys+values in all nodes on the tree. It’s more space efficient since each key only appears once in the tree.</p><p>A B+Tree only stores values in leaf node. Inner nodes only guide the search process.</p><h5 id="B-Tree-INSERT"><a href="#B-Tree-INSERT" class="headerlink" title="B+Tree: INSERT"></a>B+Tree: INSERT</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Find correct lead L</span><br><span class="line">Put data entry into L in sorted order.</span><br><span class="line">&#123;</span><br><span class="line">If L has enough space, done!</span><br><span class="line">Else must split L into L and a new node L2</span><br><span class="line">&#123;</span><br><span class="line">Redistribute entries evenly, a copy up middle key</span><br><span class="line">Inser index entry pointing to L2 into parent of L</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">To split inner node, redistribute entries evenly but push up middle key.</span><br></pre></td></tr></table></figure><h5 id="B-Tree-DELETE"><a href="#B-Tree-DELETE" class="headerlink" title="B+Tree: DELETE"></a>B+Tree: DELETE</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Start at root, find lead L where entry belongs</span><br><span class="line">Remove the entry</span><br><span class="line">&#123;</span><br><span class="line">If L is at least half-full, done!</span><br><span class="line">If L has only M/2-1 entries</span><br><span class="line">&#123;</span><br><span class="line">Try to redistribute, borrowing from sibling(adjacent node with same parent as L)</span><br><span class="line">If redistribute fails, merge L and sibling.</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">If merge occurred, must delete entry(pointing to L or sibling) from parent of L.</span><br></pre></td></tr></table></figure><h5 id="B-Tree-design-choices"><a href="#B-Tree-design-choices" class="headerlink" title="B+Tree design choices"></a>B+Tree design choices</h5><ul><li>Merge Threshold</li><li>Non-unique Indexes</li><li>Variable Length Keys</li><li>Prefix Compression</li></ul><h5 id="B-Tree-Merge-threshold"><a href="#B-Tree-Merge-threshold" class="headerlink" title="B+Tree: Merge threshold"></a>B+Tree: Merge threshold</h5><p>Some DBMSs don’t always merge nodes when it is half full.</p><p>Delaying a merge operation may reduce the amount of reorganization.</p><h5 id="B-Tree-Non-unique-Indexes"><a href="#B-Tree-Non-unique-Indexes" class="headerlink" title="B+Tree: Non-unique Indexes"></a>B+Tree: Non-unique Indexes</h5><ul><li>Approach #1 Duplicate Keys: Use the same leaf node layout but store duplicate keys multiple times</li><li>Approach #2 Value Lists: Store each key only once and maintain a linked list of unique values.</li></ul><h5 id="B-Tree-Variable-Length-Keys"><a href="#B-Tree-Variable-Length-Keys" class="headerlink" title="B+Tree: Variable Length Keys"></a>B+Tree: Variable Length Keys</h5><ul><li>Approach #1 Pointers: store the keys as pointers to the tuple’s attribute</li><li>Approach #2 Variable length nodes: the size of each  node in the B+Tree can vary; requires careful memory management</li><li>Approach #3 Key Map: embed an array of pointers that map to the key+value list within the node.</li></ul><h5 id="B-Tree-Prefix-compression"><a href="#B-Tree-Prefix-compression" class="headerlink" title="B+Tree: Prefix compression"></a>B+Tree: Prefix compression</h5><p>Since the keys in the inner nodes are only used to direct traffic, we store a minimum prefix that is needed to correctly route probes into the index other than the entire key.</p><h5 id="B-Tree-Bulk-Insert"><a href="#B-Tree-Bulk-Insert" class="headerlink" title="B+Tree: Bulk Insert"></a>B+Tree: Bulk Insert</h5><p>The fastest/best way to build a B+Tree is to first sort the keys and then build the index from the bottom up.</p><h3 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h3><p>The easiest way to implement a <strong>dynamic</strong> order-preserving index is to use a sorted linked list</p><p>All operations have to linear search. Average Cost: O(N)</p><h3 id="Skip-Lists"><a href="#Skip-Lists" class="headerlink" title="Skip Lists"></a>Skip Lists</h3><p>A collection of lists at different levels</p><ul><li>Lowest level is a sorted, singly linked list of all keys</li><li>2nd level links every other key</li><li>3rd level links every fourth key</li><li>In general, a level has half the keys of one below it.</li></ul><p>To insert a new key, flip a coin to decide how many levels to add the new key into. Provides approximate <font style="color:red;">O(log n)</font> search times.</p><h4 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages:"></a>Advantages:</h4><ul><li>Uses less memory than a typical B+Tree id you don’t include reverse pointers</li><li>Insertions and deletions do not require rebalancing</li></ul><h4 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages:"></a>Disadvantages:</h4><ul><li>Not disk/cache friendly because they do not optimize locality references</li><li>Invoking random number generator multiple times per insert is slow</li><li>Reverse search is non-trivial</li></ul><h3 id="Radix-Tree"><a href="#Radix-Tree" class="headerlink" title="Radix Tree"></a>Radix Tree</h3><p>Uses digital representation of keys to examine prefixes one-by-one instead of comparing entire key</p><ul><li>The height of the tree depend on the length of keys</li><li>Does not require rebalancing</li><li>The path to a leaf node represents the key of the leaf</li><li>Keys are stored implicitly and can be reconstructed from paths</li></ul><h4 id="Radix-Tree-Binary-comparable-keys"><a href="#Radix-Tree-Binary-comparable-keys" class="headerlink" title="Radix Tree: Binary comparable keys"></a>Radix Tree: Binary comparable keys</h4><p>not all attribute types can be decomposed into binary comparable digits for a radix tree</p><ul><li><strong>Unsigned integers</strong>: Byte order must be flipped for little endian machines</li><li><strong>Signed Integers</strong>: Flip two’s-complement so that negative numbers are smaller than positive</li><li><strong>Floats</strong>: Classify into group(neg vs. pos, normalized vs. denormalized), then store as unsigned interger</li><li><strong>Compound</strong>: Transform each attribute seperately.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We are now going to talk about how to support the DBMS’s execution engine to read/write data from pages.&lt;/p&gt;
&lt;p&gt;Two types of data structures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hash tables&lt;/li&gt;
&lt;li&gt;Trees&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="database" scheme="https://annashuo.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Database System Review 03</title>
    <link href="https://annashuo.github.io/2017/09/21/database-system-review03/"/>
    <id>https://annashuo.github.io/2017/09/21/database-system-review03/</id>
    <published>2017-09-21T03:08:34.000Z</published>
    <updated>2020-01-31T05:12:47.912Z</updated>
    
    <content type="html"><![CDATA[<p>Introduction to database storage.</p><a id="more"></a><h3 id="Why-not-use-OS"><a href="#Why-not-use-OS" class="headerlink" title="Why not use OS?"></a>Why not use OS?</h3><p>If you rely on the operating system, then you have less choise in your design space inside the database system.</p><p>If using the operating system, when the process hit a page fault and it need to hold locks to some tuples or other latches to other data structures. It will be blocking for a long time and all other threads that are running other queries and other transactions could not be doing useful work but they can because all the locks.</p><h3 id="What-DBMS-can-do-for-storage"><a href="#What-DBMS-can-do-for-storage" class="headerlink" title="What DBMS can do for storage?"></a>What DBMS can do for storage?</h3><ul><li>Specialized prefetching</li><li>Buffer replacement policy</li><li>Thread/process scheduling</li><li>Flushing data to disk</li></ul><h3 id="File-Storage-how-pages-stored-in-file"><a href="#File-Storage-how-pages-stored-in-file" class="headerlink" title="File Storage(how pages stored in file)"></a>File Storage(how pages stored in file)</h3><p>Storage manager organized the files as a collection of pages.</p><ul><li>Tracks data read/written to pages</li><li>Tracks the available space</li></ul><h4 id="Four-types-of-page-storage-architecture"><a href="#Four-types-of-page-storage-architecture" class="headerlink" title="Four types of page storage architecture"></a>Four types of page storage architecture</h4><p><strong>Different DBMS manage pages in files on disk in different ways</strong></p><ul><li>Heap File Organization</li><li>Sequential/ Sorted File Organization</li><li>Hashing File Organization</li><li>Log-Structured File Organization</li></ul><h4 id="HEAP-file-Organization"><a href="#HEAP-file-Organization" class="headerlink" title="HEAP file Organization"></a>HEAP file Organization</h4><p>A heap file is an unordered collection of pages where tuples that are stored in random order.</p><p>Two ways to represent a heap file:</p><ul><li>Linked list</li><li>Page directory</li></ul><h5 id="Linked-list"><a href="#Linked-list" class="headerlink" title="Linked list"></a>Linked list</h5><p>Maintain a <u>header page</u> at the beginning of the file that stores two pointers:</p><ul><li>Head of the <u> free gage list</u></li><li>Head of the <u> data page list</u></li></ul><p><img src="https://github.com/Annashuo/hello-world/blob/master/linked-list.png?raw=true" alt></p><h5 id="Page-directory"><a href="#Page-directory" class="headerlink" title="Page directory"></a>Page directory</h5><p>Maintain special pages that tracks the location of the data pages in the database files. The directory also records the number of free slot per page.</p><p>The DBMS has to make sure that the directory pages are in sync with the data pages.</p><p><img src="https://github.com/Annashuo/hello-world/blob/master/page-directory.png?raw=true" alt></p><h4 id="Log-Structured-file-organization"><a href="#Log-Structured-file-organization" class="headerlink" title="Log-Structured file organization"></a>Log-Structured file organization</h4><p>The DBMS only stores log recoreds instead of tuples in pages.</p><p>The system appends log records to the file of how the database was modified:</p><ul><li>Inserts store the entire tuple</li><li>Deletes mark the tuple as deleted</li><li>Updates contain the delta of just the attributes that were modified</li></ul><p>To read a record, the DBMS scans the log backwards and “recreates” the tuple.</p><p>Build indexes to allow it to jump to locations in the log.</p><p>Periodically compact the log.</p><p><img src="https://github.com/Annashuo/hello-world/blob/master/log-structured.png?raw=true" alt></p><h3 id="Page-Layout-how-tuples-stored-in-page"><a href="#Page-Layout-how-tuples-stored-in-page" class="headerlink" title="Page Layout(how tuples stored in page)"></a>Page Layout(how tuples stored in page)</h3><p>A <font color="red">page</font> is a fixed-size block of data</p><ul><li>It can contain tuples, meta-data, indexes, log records(database page can be 1KB~16KB, but hardware page and OS page are always 4KB)</li><li>Most systems do not mix page types</li><li>Some systems require a page to be self-contained.</li></ul><p>Each page is given a unique identifier. The DBMS uses an indirection layer to map page ids to pysical locations.</p><h4 id="Page-header"><a href="#Page-header" class="headerlink" title="Page header"></a>Page header</h4><p>Each page contains a <u>header</u> that records meta-data about the page’s contents.</p><ul><li>Page size</li><li>Checksum</li><li>DBMS Version</li><li>Transaction Visibility</li></ul><h4 id="Slotted-Pages-most-common-layout"><a href="#Slotted-Pages-most-common-layout" class="headerlink" title="Slotted Pages(most common layout)"></a>Slotted Pages(most common layout)</h4><p>The page maps “slots” to offsets. The length of tuples can be fixed or variable.</p><p>The header keeps track of:</p><ul><li>The # of used slots</li><li>The offset of the starting location of the last slot used</li></ul><p><img src="https://github.com/Annashuo/hello-world/blob/master/slotted-page.png?raw=true" alt></p><h3 id="Tuple-Layout"><a href="#Tuple-Layout" class="headerlink" title="Tuple Layout"></a>Tuple Layout</h3><p>A tuple is essentially a sequence of bytes. DBMS interpret those bytes into attribute type and values.</p><p>Each tuple is assigned a unique record identifier</p><ul><li>Most common: $page_id + offset/slot$</li><li>Can also contain file location info</li></ul><h4 id="Tuple-header"><a href="#Tuple-header" class="headerlink" title="Tuple header"></a>Tuple header</h4><p>Header of each tuple contains meta-data:</p><ul><li>visibility(concurrency control)</li><li>Bit map for NULL values</li></ul><h4 id="Data-representation"><a href="#Data-representation" class="headerlink" title="Data representation"></a>Data representation</h4><ul><li>INTEGER/BIGINT/SMALLINT/TINYINT: C/C++ representation</li><li>FLOAT/REAL vs. NUMERIC/DECIMAL: IEEE-754 Standard/ Fixed-point Decimals</li><li>VARCHAR/VARBINARY/TEXT/BLOB: Header with length, followed by data bytes</li><li>TIME/DATA/TIMESTAMP: 32/64-bit integer of seconds</li></ul><h3 id="Locks-vs-Latches"><a href="#Locks-vs-Latches" class="headerlink" title="Locks vs. Latches"></a>Locks vs. Latches</h3><h4 id="Locks"><a href="#Locks" class="headerlink" title="Locks"></a>Locks</h4><ul><li>Protects the database’s logical contents from other transactions</li><li>Held for transaction duration</li><li>Need to be able to rollback changes</li></ul><h4 id="Latches"><a href="#Latches" class="headerlink" title="Latches:"></a>Latches:</h4><ul><li>Protects the critical sections of the DBMS’s internal data structure from other threads</li><li>Held for operation duration</li><li>Do not need to be able to rollback changes</li></ul><h3 id="Buffer-Pool"><a href="#Buffer-Pool" class="headerlink" title="Buffer Pool"></a>Buffer Pool</h3><p>The <u>buffer pool</u> is an in-memory cache of pages read from disk.</p><h4 id="Buffer-pool-organization"><a href="#Buffer-pool-organization" class="headerlink" title="Buffer pool organization"></a>Buffer pool organization</h4><p>Memory region organized as an array of fixed-size pages.</p><p>An array entry is called a <font color="red">frame</font></p><p>When DBMS requests a page, an exact copy is placed into one of these frames.</p><h4 id="Buffer-pool-page-table"><a href="#Buffer-pool-page-table" class="headerlink" title="Buffer pool page table"></a>Buffer pool page table</h4><p>The page table keeps track of pages that are currently in memory and also maintains additional meta-data per page.</p><p>meta-data:</p><ul><li>dirty flag</li><li>pin counter</li></ul><p><u>Pin counter</u> do not equals to the <u>latches</u>. If DBMS want to modify a page, it should put a latch on that page. If DBMS want to add a new entry, it needs to put a latch on the page table.</p><p><img src="https://github.com/Annashuo/hello-world/blob/master/buffer-pool.png?raw=true" alt></p><h4 id="Multiple-Buffer-Pools"><a href="#Multiple-Buffer-Pools" class="headerlink" title="Multiple Buffer Pools"></a>Multiple Buffer Pools</h4><p>Helps reduce latch contention and improve locality.</p><ul><li>Multiple buffer pool instances</li><li>Per-database buffer pool</li><li>Per-page type buffer pool</li></ul><h4 id="Pre-fetching"><a href="#Pre-fetching" class="headerlink" title="Pre-fetching"></a>Pre-fetching</h4><ol><li>Different query plan has different pre-fetching result.<ul><li>sequential scans</li><li>index scans</li></ul></li><li>scan sharing(queries reuse data retrieved from storage or operator computations)<ul><li>queries do not have to be exactly the same</li><li>Can also share intermediate results.</li></ul></li></ol><h4 id="Buffer-replacement-policies"><a href="#Buffer-replacement-policies" class="headerlink" title="Buffer replacement policies"></a>Buffer replacement policies</h4><h5 id="Goals"><a href="#Goals" class="headerlink" title="Goals:"></a>Goals:</h5><ul><li>correctness</li><li>accuracy</li><li>speed</li><li>meta-data overhead</li></ul><h5 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h5><p>Maintain a timestamp of when each page was last accessed</p><p>Keep the pages in sorted order to reduce the search time on eviction</p><h5 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h5><ol><li>Approximation of LRU without needing a seperate timestamp per page<ul><li>Each page has a reference bit</li><li>When a page is accessed, set to 1</li></ul></li><li>Organize the pages in a circular buffer with a “clock hand”:<ul><li>Upon sweeping, check if a page’s bit is set to 1</li><li>If yes, set to 0. If no, then evict.</li></ul></li></ol><h4 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h4><p>Both LRU and CLOCK are susceptible to sequential flooding. Th most recently used page is actually the most unneeded page.</p><h4 id="Better-solutions"><a href="#Better-solutions" class="headerlink" title="Better solutions"></a>Better solutions</h4><ul><li>LRU-K: take into account historyof lats K references</li><li>Priority Hints: allow txns to tell the buffer pool whether a page is important or not.</li><li>Localization: choose pages to evict on a per txn/query basis</li></ul><h4 id="Allocation-policies"><a href="#Allocation-policies" class="headerlink" title="Allocation policies"></a>Allocation policies</h4><ol><li>Global policies: make decisions for all active txns</li><li>Local policies:<ul><li>allocate frams to a specific txn without considering the behavior of concurrent txns</li><li>still need to support sharing pages</li></ul></li></ol><h3 id="Other-memory-pools"><a href="#Other-memory-pools" class="headerlink" title="Other memory pools"></a>Other memory pools</h3><p>Not for just tuples and indexes, not always backed by disk</p><ul><li>sorting + join buffers</li><li>query caches</li><li>maintenance buffers</li><li>log buffers</li><li>dictionary caches</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Introduction to database storage.&lt;/p&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="database" scheme="https://annashuo.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>web_knowledge</title>
    <link href="https://annashuo.github.io/2017/09/19/web-knowledge/"/>
    <id>https://annashuo.github.io/2017/09/19/web-knowledge/</id>
    <published>2017-09-19T15:59:07.000Z</published>
    <updated>2020-01-30T14:14:21.106Z</updated>
    
    <content type="html"><![CDATA[<p>Some basic knowledge of web application.<br><a id="more"></a></p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><h4 id="Version-control-system"><a href="#Version-control-system" class="headerlink" title="Version control system"></a>Version control system</h4><p>the basic idea of version control system is that as you work on a large project and you often want to commit change to your project while still being able to access and possibly to go back to older version of the project. It’s also useful for teams of programmers to coordinate their work by each of the programmer work on their static copy of their own and only commit her changes of the project possibly resolve conflict with other programmer’s work with her changes complete.</p><h4 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h4><p>GIT is a distributed version control system because when you clone, it make a copy of a repository. You get a full complete copy of that repository. Essentially a collections of all collaborate repository.</p><h4 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h4><p>Branch is a full copy of a version of the repository so you have multiple version of your repository.</p><h3 id="HTTP-Hypertext-Transfer-Protocol"><a href="#HTTP-Hypertext-Transfer-Protocol" class="headerlink" title="HTTP: Hypertext Transfer Protocol"></a>HTTP: Hypertext Transfer Protocol</h3><p>HTTP is a protocol that is used for tranfering data on the web.</p><p>If the brouser doesn’t have the address of the www….com, the browser might have to start when it initiate the connection by connecting the domain name system(DNS) server and convert the <a href="http://www.com" target="_blank" rel="noopener">www.com</a> to IP address.</p><p>After the browser gets the IP address of the remote server, it may initiate a TCP/IP connection with the remote server. TCP is the transfer control protocol. It how most traffic internet work. To initiate a TCP/IP connection, the browser first send a SYN message to the web server and the server reply with a SYN-ACK package message to acknowledge the web server has receive the SYN. The browser send a ACK package to the server to acknowledge it has receive the SYN-ACK package. At this point, the browser can begin sending HTTP traffic by sending a HTTP request to the web server. The web server receive the HTTP request and send back the HTTP response.</p><h4 id="Port"><a href="#Port" class="headerlink" title="Port"></a>Port</h4><p>Ports for common web services:</p><ul><li>Telnet(23), SMTP(25), mysql(3306)</li><li>For web servers:<ul><li>Deployment: HTTP(80), HTTPS(443)</li><li>Development: HTTP(8000 or 8080), HTTPS(8443)</li></ul></li></ul><h4 id="Request-and-Response"><a href="#Request-and-Response" class="headerlink" title="Request and Response"></a>Request and Response</h4><p>HTTP Request(first line is the request line):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;METHOD&gt; &lt;URI&gt; &lt;VERSION&gt;</span><br><span class="line">&lt;HEADER LINE&gt;</span><br><span class="line">&lt;HEADER LINE&gt;</span><br><span class="line">...</span><br><span class="line">&lt;HEADER LINE&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;OPTIONAL MESSAGE BODY&gt;</span><br></pre></td></tr></table></figure><p>HTTP Response(first line is the resopnse line):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;VERSION&gt; &lt;STATUS CODE&gt; &lt;STATUS MESSAGE&gt;</span><br><span class="line">&lt;HEADER LINE&gt;</span><br><span class="line">&lt;HEADER LINE&gt;</span><br><span class="line">...</span><br><span class="line">&lt;HEADER LINE&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;OPTIONAL MESSAGE BODY&gt;</span><br></pre></td></tr></table></figure><h4 id="HTTP-Request-Method"><a href="#HTTP-Request-Method" class="headerlink" title="HTTP Request Method"></a>HTTP Request Method</h4><ul><li>Safe methods are not supposed to have side effect:<ul><li>GET, HEAD(much like GET, but the response without message body), TRACE(the response will contain the whole request in the message body) and OPTIONS（请求http的方法）</li></ul></li><li>Idempotent（幂等性：调用一次和调用n次结果相同） methods can have side effect<ul><li>PUT（更新会指明某个资源，做多次更新和1次更新结果一样） and DELETE（删除会指明某个资源，做一次删除和多次删除结果一样）,GET, HEAD</li></ul></li><li>Update method<ul><li>POST（创建不会致命某个资源，一次调用创建一个，没有幂等性）</li></ul></li></ul><table><thead><tr><th style="text-align:center">method</th><th style="text-align:center">safe</th><th style="text-align:center">idempotent</th></tr></thead><tbody><tr><td style="text-align:center">GET</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td></tr><tr><td style="text-align:center">HEAD</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td></tr><tr><td style="text-align:center">OPTIONS</td><td style="text-align:center">YES</td><td style="text-align:center">YES</td></tr><tr><td style="text-align:center">DELETE</td><td style="text-align:center">NO</td><td style="text-align:center">YES</td></tr><tr><td style="text-align:center">PUT</td><td style="text-align:center">NO</td><td style="text-align:center">YES</td></tr><tr><td style="text-align:center">POST</td><td style="text-align:center">NO</td><td style="text-align:center">NO</td></tr></tbody></table><h4 id="POST-vs-GET"><a href="#POST-vs-GET" class="headerlink" title="POST vs. GET:"></a>POST vs. GET:</h4><ul><li><p>What data is contained in a typical request line? a header line? a message body?</p><p>  Get: the query string in the url, like</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test/demo_form.php?name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure></li></ul><pre><code>Post: the query string is sent in the HTTP request body<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /test/demo_form.php HTTP/1.1</span><br><span class="line">Host: w3schools.com</span><br><span class="line">name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>What are GET and POST typically used for?</p><p>  Use GET for safe and idempotent requests</p><p>  Use POST for neither safe nor idempotent requests</p><p>  Use POST for destructive actions such as creation (I’m aware of the irony), editing, and deletion, because you can’t hit a POST action in the address bar of your browser. Use GET when it’s safe to allow a person to call an action.</p></li><li><p>How do browsers treats GET and POST request differently?</p><p>  Web browsers typically treat GET and POST differently since GET is safe and POST is unsafe. It’s OK to refresh a web page retrieved by a GET request – the web browser will just re-issue the last GET request and render whatever the server sends back. However, if the page we are looking at in a browser is the response to a POST request, the browser will warn us if we try to refresh the page.</p></li></ul><h3 id="HTML-Hypertext-Markup-Language"><a href="#HTML-Hypertext-Markup-Language" class="headerlink" title="HTML(Hypertext Markup Language)"></a>HTML(Hypertext Markup Language)</h3><h3 id="CSS-Cascading-Style-Sheets"><a href="#CSS-Cascading-Style-Sheets" class="headerlink" title="CSS(Cascading Style Sheets)"></a>CSS(Cascading Style Sheets)</h3><p>It a mean to seperate the style from the content and the structure.</p><h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><p>Bootstrap is a popular CSS library that allows you to easily create sophisticated web page designs. You don’t need to know any less or Java script or any of the other libraries like jquery that bootstrap uses you can just download precompiled CSS and Java script bootstrap files and include them in the header of your HTML file and then use the bootstrap CSS rules as you would use any CSS.</p><p>LESS is a CSS scripting language implemented in Java script.</p><p>you don’t need to hand write any of the CSS or the Java script that makes that interactive, you can just use the appropriate bootstrap specific classes here and then your page will be interactive.</p><h4 id="How-bootstrap-work"><a href="#How-bootstrap-work" class="headerlink" title="How bootstrap work"></a>How bootstrap work</h4><p>It ‘s a lot less style sheets better compiled to CSS and javascript and it use jquery library.</p><h3 id="Hidden-Field"><a href="#Hidden-Field" class="headerlink" title="Hidden Field"></a>Hidden Field</h3><h4 id="How-to-use-hidden-field"><a href="#How-to-use-hidden-field" class="headerlink" title="How to use hidden field"></a>How to use hidden field</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot;...&gt;</span><br></pre></td></tr></table></figure><h4 id="The-limitation-of-hidden-field"><a href="#The-limitation-of-hidden-field" class="headerlink" title="The limitation of hidden field"></a>The limitation of hidden field</h4><ul><li>They aren’t secret, they just aren’t displayed.</li><li>The user can control the value sent back to the server</li></ul><h3 id="CSRF-Cross-Site-Request-Forgery"><a href="#CSRF-Cross-Site-Request-Forgery" class="headerlink" title="CSRF(Cross Site Request Forgery)"></a>CSRF(Cross Site Request Forgery)</h3><h4 id="CSRF-basic-problem"><a href="#CSRF-basic-problem" class="headerlink" title="CSRF basic problem"></a>CSRF basic problem</h4><p>One site could potentially send authenticated requests to another site if you are simultaneously logged in in a single browser session</p><h4 id="The-solution-to-CSRF"><a href="#The-solution-to-CSRF" class="headerlink" title="The solution to CSRF"></a>The solution to CSRF</h4><p>Require each request to contain some secret information that is not automatically added by the browser. One way to do that is to include a parameter in every request and have the value of that parameter be some big randomly generated secret value that only the site and possibly the user knows if they want.</p><h3 id="MVC-Model-View-Controller"><a href="#MVC-Model-View-Controller" class="headerlink" title="MVC(Model View Controller)"></a>MVC(Model View Controller)</h3><h4 id="The-basic-components-of-a-typical-MVC-framework"><a href="#The-basic-components-of-a-typical-MVC-framework" class="headerlink" title="The basic components of a typical MVC framework"></a>The basic components of a typical MVC framework</h4><ul><li>Web browser</li><li>Web servser<ul><li>Controller application: a single point of control for the common features such as authentication, and mapping urls to the model and the views managing user session data and so on.</li><li>Model<ul><li>Data model: store data</li><li>Actions: the core logic of the application</li></ul></li><li>Views: justifies how information is presented back to the user after authenticating a request and performing some other basic processing</li></ul></li></ul><h4 id="The-flow-of-information-in-MVC-to-process-a-request"><a href="#The-flow-of-information-in-MVC-to-process-a-request" class="headerlink" title="The flow of information in MVC to process a request"></a>The flow of information in MVC to process a request</h4><p>The controller typically determines which action in the application is responsible for processing this particular request and it forward the request to the model to be executed by the appropriate action. The action typically interacts with the data model getting and changing data as needed. When the action is done processing the request typically it forwards the request to some particular view it chooses which view is the right view for displaying the data for this request. The information from the model will help the view generate the actual response. The view itself is just responsible for formatting the data that was presented to it and generating some sort of response to the web browser</p><h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><h4 id="Django-components-correspond-to-MVC"><a href="#Django-components-correspond-to-MVC" class="headerlink" title="Django components correspond to MVC"></a>Django components correspond to MVC</h4><table><thead><tr><th style="text-align:center">MVC</th><th style="text-align:center">Django</th></tr></thead><tbody><tr><td style="text-align:center">controller</td><td style="text-align:center">Django framework itself with Django URL configuration</td></tr><tr><td style="text-align:center">view</td><td style="text-align:center">template</td></tr><tr><td style="text-align:center">data model</td><td style="text-align:center">model</td></tr><tr><td style="text-align:center">actions</td><td style="text-align:center">view</td></tr></tbody></table><h4 id="Standard-details-of-a-basic-Django-application"><a href="#Standard-details-of-a-basic-Django-application" class="headerlink" title="Standard details of a basic Django application"></a>Standard details of a basic Django application</h4><ul><li>Project configuration in setting.py</li><li>Request route configuration in urls.py</li><li>Action in views.py</li><li>View templates</li></ul><h3 id="Relational-Model"><a href="#Relational-Model" class="headerlink" title="Relational Model"></a>Relational Model</h3><h4 id="Relational-model-itself"><a href="#Relational-model-itself" class="headerlink" title="Relational model itself"></a>Relational model itself</h4><ul><li>primary key: the column that can identify the record in the relation</li><li>foreign key: when one table refers to another table using that table’s primary key. This is called the foreign key.</li></ul><h4 id="The-goals-of-the-relational-model"><a href="#The-goals-of-the-relational-model" class="headerlink" title="The goals of the relational model"></a>The goals of the relational model</h4><p>Abstract away the physical data layout. User doesn’t need to understand the physical data layout.</p><h3 id="ORM-Object-Relational-Mapping-Tools"><a href="#ORM-Object-Relational-Mapping-Tools" class="headerlink" title="ORM(Object Relational Mapping Tools)"></a>ORM(Object Relational Mapping Tools)</h3><h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><p>ORM is to provide an additional layer of abstraction between the web application and the storage system. User the ORM to retrieve or save data in the database, the web app never needs to write an y direct database or cloud service specific code itself. Web app just plays objects and the ORM generate an execute whatever code is needed to interact with the storage system.</p><h4 id="Advantage-vs-Disadvantage"><a href="#Advantage-vs-Disadvantage" class="headerlink" title="Advantage vs. Disadvantage"></a>Advantage vs. Disadvantage</h4><p>AD. This makes the web application much easier to write and it also allows you to easily change on back end store system without needing to rewrite your web app.</p><p>Dis. 1. lose the full power when interact directly with the storage system. 2. The web app need features provided by the ORM but some high performance apps might need special feature that just not provided by the ORM.</p><h3 id="Django’s-URL-dispatcher"><a href="#Django’s-URL-dispatcher" class="headerlink" title="Django’s URL dispatcher"></a>Django’s URL dispatcher</h3><h4 id="Basic-regular-expressions"><a href="#Basic-regular-expressions" class="headerlink" title="Basic regular expressions"></a>Basic regular expressions</h4><p>regular-expression groups is (?P<name>pattern)</name></p><h3 id="Django-data-model"><a href="#Django-data-model" class="headerlink" title="Django data model"></a>Django data model</h3><h4 id="How-to-use-Django’s-ORM"><a href="#How-to-use-Django’s-ORM" class="headerlink" title="How to use Django’s ORM"></a>How to use Django’s ORM</h4><ul><li>Edit configuration in settings.py</li><li>Create data models in your application’s models.py</li><li>Run python manage.py makemigrations and python manage.py migrate</li><li>Use your data models in your actions</li></ul><h4 id="Basic-Django-ORM-features"><a href="#Basic-Django-ORM-features" class="headerlink" title="Basic Django ORM features"></a>Basic Django ORM features</h4><ul><li>The id primary key</li><li>.objects.all()</li><li>.objects.get()</li><li>.save()</li><li>.delete()</li><li>.filter()</li></ul><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><p>Cookies is just a small piece of data provided by the web server in http response. The cookies are actually sent back to the server in the header and stored in the header. Cookies transmitted between web client and web server.</p><p>when the web client sends a subsequent request it will store the cookie and then send the cookie along with every subsequent http request to the same server.</p><h4 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h4><ul><li>4KB limit enforsed by most browsers</li><li>the user can see and forge cookie data</li><li>the user can disable cookies</li></ul><h3 id="Sessions"><a href="#Sessions" class="headerlink" title="Sessions"></a>Sessions</h3><h4 id="Sessions-1"><a href="#Sessions-1" class="headerlink" title="Sessions"></a>Sessions</h4><ul><li><p>HOW: When the user first access the site and the server is not yet storing data for the user, the server creates a server side session and a sign that session some id and then stores some data as session data for the session and sends the session id back to the user and response usually as a cookie. </p></li><li><p>WHAT(for web application): The session data is typically stored on the server as a big dictionary of name value pairs for each session so that the server of the web application can maintain arbitrary data for each user.</p></li></ul><h4 id="Limitations-1"><a href="#Limitations-1" class="headerlink" title="Limitations"></a>Limitations</h4><ul><li>Session ID must be transmitted with each subsequent request</li><li>Server must maintain session data for each active user</li></ul><p><strong>The session id transmitted in cookie</strong></p><h3 id="Django’s-built-in-authentication-module"><a href="#Django’s-built-in-authentication-module" class="headerlink" title="Django’s built-in authentication module"></a>Django’s built-in authentication module</h3><h4 id="HOW"><a href="#HOW" class="headerlink" title="HOW:"></a>HOW:</h4><ul><li>configuration in settings.py</li><li>URLs that route to Django’s authentication actions</li><li>How to use the Django’s authentication form</li><li>Automatic authentication using <code>@login_required</code></li><li>Manual authentication using <code>authenticate</code> and <code>login</code></li></ul><h3 id="Race-condition"><a href="#Race-condition" class="headerlink" title="Race condition"></a>Race condition</h3><ul><li><p>Thread: a sequence of instruction that is scheduled and executed by the operating system and shared resources such as memory and programs</p></li><li><p>Thread safe: Thread-safe code only manipulates shared data structures in a manner that ensures that all threads behave properly and fulfil their design specifications without unintended interaction.</p></li><li><p>Race condition: it was check in one thread and then check in the second thread and then act in the first thread and the action the second threat so that the action in the second thread didn’t get to see the effect of the first threats execution.</p></li></ul><h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><h4 id="ACID-properties"><a href="#ACID-properties" class="headerlink" title="ACID properties"></a>ACID properties</h4><ul><li>Atomicity: All or nothing</li><li>Consistency: Won’t violate programmer-defined integrity constraints</li><li>Isolation: Each transaction runs as if it is alone</li><li>Durability: After successful commit, database won’t undo transaction</li></ul><h4 id="Typical-transaction-operations"><a href="#Typical-transaction-operations" class="headerlink" title="Typical transaction operations"></a>Typical transaction operations</h4><ul><li><code>begin</code> or <code>start</code>: Starts a transaction</li><li><code>commit</code>: Attempts to successfully complete the transaction</li><li><code>rollback</code> or <code>abort</code>: Undoes the work of an uncommitted transaction</li><li><code>checkpoint</code> or <code>savepoint</code>: Marks partial work of an uncommitted transaction as a version that can be rolled-back to</li></ul><h3 id="Reverse-URL-Resolution-in-Django"><a href="#Reverse-URL-Resolution-in-Django" class="headerlink" title="Reverse URL Resolution in Django"></a>Reverse URL Resolution in Django</h3><h4 id="Django-url-template-tag"><a href="#Django-url-template-tag" class="headerlink" title="Django url template tag"></a>Django url template tag</h4><ul><li>Four routes:<ul><li>hard coding with static url</li><li>hard coding with django url</li><li>url template tag with url action</li><li>url template tag with url name</li></ul></li></ul><h3 id="Django-Form"><a href="#Django-Form" class="headerlink" title="Django Form"></a>Django Form</h3><h4 id="What-problems-Forms-are-solving"><a href="#What-problems-Forms-are-solving" class="headerlink" title="What problems Forms are solving"></a>What problems Forms are solving</h4><ul><li>validates the user input and checks to make sure that all the expected parametsers are present in the request and the parameters are in the right format.</li><li>execuet some core logic. This varies from application to appliction depending on the purpose of the app and once the core logic is executed the application finally renders the view.</li></ul><h4 id="How-to-define-a-Django-Form"><a href="#How-to-define-a-Django-Form" class="headerlink" title="How to define a Django Form"></a>How to define a Django Form</h4><ul><li>Define and use basic field types</li><li>How to write custom overall validation code</li><li>How to write custom field-specific validation code</li></ul><h4 id="Using-a-Django-Form-in-your-action"><a href="#Using-a-Django-Form-in-your-action" class="headerlink" title="Using a Django Form in your action"></a>Using a Django Form in your action</h4><ul><li>How to create and use an unbound Form</li><li>How t create a bound Form from request parameters</li><li>How to validate a bound form</li><li>How to use a Form’s cleaned_data</li></ul><h4 id="Using-a-Django-Form-in-your-view"><a href="#Using-a-Django-Form-in-your-view" class="headerlink" title="Using a Django Form in your view"></a>Using a Django Form in your view</h4><ul><li>How to use a Form’s non-field-specific errors</li><li>How to use the default Form view</li><li>How to use the Form’s fields individually<ul><li>How to access each field</li><li>How to print labels, input widget, errors</li></ul></li></ul><h4 id="MIME-Multipurpose-Internet-Mail-Extensions"><a href="#MIME-Multipurpose-Internet-Mail-Extensions" class="headerlink" title="MIME: Multipurpose Internet Mail Extensions"></a>MIME: Multipurpose Internet Mail Extensions</h4><p>MIME: describe the data format on purpose</p><p>Common MIME-related header fields</p><ul><li>MIME-Version</li><li>Content-Type: the type of content being sent</li><li>Content-transfer-encoding: Encoding format for how the binary data s representing non-binary information</li><li>Accept: specifies content-types a client is willing to accept </li></ul><h4 id="Multipart-form"><a href="#Multipart-form" class="headerlink" title="Multipart form"></a>Multipart form</h4><p>Normal <form> the content-type is “application/x-www-form-urlencoded”. It only accept text type request</form></p><p>Multipart form accept both text type and binary data type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form enctype=&quot;multipart/form-data&quot; action=&quot;...&quot; method=&quot;post&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;file&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="Sending-email"><a href="#Sending-email" class="headerlink" title="Sending email"></a>Sending email</h4><p>SMTP: Simple Mail Transfer Protocol</p><ul><li>The standard, text-based protocol for sending mail on the internet<ul><li>You can run your own SMTP server</li><li>or you can use smtp.andrew.cmu.edu but you will need to authenticate yourself</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.core.mail import send_mail</span><br><span class="line"></span><br><span class="line">send_mail(subject=&quot;Verify your email address&quot;,</span><br><span class="line">meddage = email_body,</span><br><span class="line">from_email=&quot;XXX@cs.cmu.edu&quot;,</span><br><span class="line">recipient_list=[new_user,email])</span><br></pre></td></tr></table></figure><h4 id="DOM-The-Document-Object-Model"><a href="#DOM-The-Document-Object-Model" class="headerlink" title="DOM: The Document Object Model"></a>DOM: The Document Object Model</h4><p>A tree of nodes that represent the HTML documents</p><h4 id="Client-side-Web-Programming"><a href="#Client-side-Web-Programming" class="headerlink" title="Client-side Web Programming"></a>Client-side Web Programming</h4><p>JavaScript: A client-side scripting language that runs in the web browser</p><ul><li>Interpreted, dynamically typed, garbage-collected</li><li>Object-oriented, C-like syntax</li><li>Functions are objects</li></ul><h5 id="two-ways"><a href="#two-ways" class="headerlink" title="two ways:"></a>two ways:</h5><ul><li>Write it drectly in HTML page:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>Include it from an external source file</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;foo.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="Using-javascript"><a href="#Using-javascript" class="headerlink" title="Using javascript"></a>Using javascript</h5><ul><li>Write javascript functions</li><li><p>Respond to in-browser events:</p><ul><li><p>onload, onclick, onfocus, onblur,onmouseover…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img onclick=&quot;foo()&quot;&gt;</span><br><span class="line">&lt;bodu onload=&quot;document.forms[0].elements[0].focus()&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Generate asynchronous HTTP requests</p></li><li>Navigate and update the DOM</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Some basic knowledge of web application.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Database System Review 02</title>
    <link href="https://annashuo.github.io/2017/09/14/database-system-review02/"/>
    <id>https://annashuo.github.io/2017/09/14/database-system-review02/</id>
    <published>2017-09-14T10:00:22.000Z</published>
    <updated>2020-01-30T14:14:21.101Z</updated>
    
    <content type="html"><![CDATA[<p>This contains functional dependencies and normal form.</p><a id="more"></a><h3 id="Functional-Dependencies-FD"><a href="#Functional-Dependencies-FD" class="headerlink" title="Functional Dependencies (FD)"></a>Functional Dependencies (FD)</h3><h4 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h4><p>A Functional Dependency (FD) is a form of a constraint, part of a relation’s schema to define a valid instance.</p><p>$$X \rightarrow Y$$<br>The value of X functionally defines the value of Y. For example, if two tuples$(t_{1},t_{2})$ agree on the X attribute, then they must agree on the Y attribute too.</p><p>$$(X \rightarrow Y) \, + \, (X \rightarrow Z) \, \Rightarrow \, (X \rightarrow YZ)$$<br>$$(XY \rightarrow Z) \, \not\Rightarrow \, (X \rightarrow Z) \, + \, (Y \rightarrow Z)$$</p><h4 id="Definning-FDs-in-SQL"><a href="#Definning-FDs-in-SQL" class="headerlink" title="Definning FDs in SQL"></a>Definning FDs in SQL</h4><p>eg.</p><p>$$FD_{1}: sid \rightarrow name$$<br>$$FD_{2}: sid \rightarrow address$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE ASSERTION student-name-addr </span><br><span class="line">  CHECK (NOT EXISTS</span><br><span class="line">    (SELECT * FROM students AS s1, </span><br><span class="line">                   students AS s2</span><br><span class="line">      WHERE s1.sid = s2.sid</span><br><span class="line">        AND((s1.name &lt;&gt; s2.name</span><br><span class="line">        OR (s1.address &lt;&gt; s2.address)));</span><br></pre></td></tr></table></figure><h4 id="Armstrong’s-Axioms"><a href="#Armstrong’s-Axioms" class="headerlink" title="Armstrong’s Axioms"></a>Armstrong’s Axioms</h4><ul><li>Reflexivity: $X \supseteq Y \Rightarrow X \rightarrow Y$</li><li>Augmentation: $X \rightarrow Y \Rightarrow XZ \rightarrow YZ$</li><li>Transitivity: $(X \rightarrow Y) \wedge (Y \rightarrow Z) \Rightarrow (X \rightarrow Z)$</li><li>Union: $(X \rightarrow Y) \wedge (X \rightarrow Z) \Rightarrow (X \rightarrow YZ)$</li><li>Decomposition: $(X \rightarrow YZ) \Rightarrow (X \rightarrow Y) \wedge (X \rightarrow Z)  $</li><li>Pseudo-transitivity: $(X \rightarrow Y) \wedge (YW \rightarrow Z) \Rightarrow (XW \rightarrow YZ)$</li></ul><h4 id="Closure-F"><a href="#Closure-F" class="headerlink" title="Closure (F+)"></a>Closure (F+)</h4><p>Given a set F of FDs, closure F+ is the set of all implied FDs.</p><p>To check $X \rightarrow A$:</p><ol><li>compute X+</li><li>check if $A \in X+$</li></ol><h4 id="Canonical-Cover-F-c"><a href="#Canonical-Cover-F-c" class="headerlink" title="Canonical Cover ($F_{c}$)"></a>Canonical Cover ($F_{c}$)</h4><p>Given a set F of FDs, canonical cover $F_{c}$ is the minimal set of all FDs.</p><p>$F_{c}$ properties:</p><ol><li>The right-hand side(RHS) of every FD is a single attribute</li><li>$F_{c}$ is identical to the closure F+</li><li>$F_{c}$ is minimal(we cannot eliminate any attribute from the LHS or RHS of a FD)</li><li>$F_{c}$ LHS usually unique</li></ol><h3 id="Relational-Model-Keys"><a href="#Relational-Model-Keys" class="headerlink" title="Relational Model Keys"></a>Relational Model Keys</h3><ul><li>Super key: any set of attributes in a relation that functionally determines all attributes in the relation (随意组合attribute，只要组合出来的结果可以决定其他所有attribute，这个组合就是super key)</li><li>Candidate key: any super key such that the removal of any attribute leaves a set that does not functionally determine all attributes (super key里面元素最少的一个是candidate key)</li><li>primary key = candidate key</li></ul><h3 id="Decomposition-Goals"><a href="#Decomposition-Goals" class="headerlink" title="Decomposition Goals"></a>Decomposition Goals</h3><ul><li>Lossless Joins (<strong>mandatory</strong>): 要保证lossless joins，找出最有决定性的LHS的attribute，以它作为跨越多个表的attribute进行拆分</li><li>Dependency Preservation: 最好同一个FD里的attribute在拆分后的同一个表内</li><li>Redundancy Avoidance</li></ul><h4 id="Lossless-Joins"><a href="#Lossless-Joins" class="headerlink" title="Lossless Joins"></a>Lossless Joins</h4><p>For the decomposition $R={R_{1}\cup R_{n}}$, check whether $(R_{1} \cap R_{2})\rightarrow R_{1}$ <strong>or</strong> $(R_{1} \cap R_{2})\rightarrow R_{2}$</p><h4 id="Dependency-Preservation"><a href="#Dependency-Preservation" class="headerlink" title="Dependency Preservation"></a>Dependency Preservation</h4><p>To test whether the decomposition $R={R_{1},..R_{n}}$ preserves the FD set F:</p><ol><li>Compute F+</li><li>Divide F+ into sets of only covered by ${R_{1},..,R_{n}}$</li><li>Compute G as union of those sets</li><li>Compute G+</li><li>If F+=G+, then ${R_{1},..,R_{n}}$ is dependency preserving</li></ol><h4 id="Redundancy-Avoidance"><a href="#Redundancy-Avoidance" class="headerlink" title="Redundancy Avoidance"></a>Redundancy Avoidance</h4><p>For an $X \rightarrow Y$ covered by$R_{n}$, X should be a super key of $R_{n}$</p><h3 id="Normal-Forms"><a href="#Normal-Forms" class="headerlink" title="Normal Forms"></a>Normal Forms</h3><p>A Normal Form is a characterization of a decomposition in terms of the properties that satisfies when putting the relations back together.</p><h4 id="First-Normal-Form-1NF"><a href="#First-Normal-Form-1NF" class="headerlink" title="First Normal Form(1NF)"></a>First Normal Form(1NF)</h4><ol><li>All value must be atomic</li><li>No repeating groups</li></ol><h4 id="Second-Normal-Form-2NF"><a href="#Second-Normal-Form-2NF" class="headerlink" title="Second Normal Form(2NF)"></a>Second Normal Form(2NF)</h4><ol><li>1NF</li><li>Non-key attributes fully depend on the candidate key</li></ol><p>Decomposition后，如果一个表里除了一个FD的LHS和RHS以外还有其他的attribute，就提出LHS和RHS成立一个新的表</p><h4 id="Boyce-codd-Normal-Form-BCNF"><a href="#Boyce-codd-Normal-Form-BCNF" class="headerlink" title="Boyce-codd Normal Form(BCNF)"></a>Boyce-codd Normal Form(BCNF)</h4><ul><li>+no lossless joins</li><li>+no redundancies</li><li>-dependency perserving</li></ul><p><strong>for every FD in a relation R, LHS must be super key</strong></p><p>A relation R with FD set F is in BCNF if for every $X \rightarrow Y$ in F+:</p><ul><li>$X \rightarrow Y$ is trivial (that is, $Y \subseteq X$), or</li><li>X is a super key</li></ul><h5 id="BCNF-decomposition-algorithem-Given-a-relation-R-and-a-FD-set-F"><a href="#BCNF-decomposition-algorithem-Given-a-relation-R-and-a-FD-set-F" class="headerlink" title="BCNF decomposition algorithem(Given a relation R and a FD set F):"></a>BCNF decomposition algorithem(Given a relation R and a FD set F):</h5><ul><li>Compute F+</li><li>$Result \leftarrow {R}$</li><li>While $R_{i} \in Result$ not in BCNF, do:<ul><li>Choose$(X \rightarrow Y)\in F+$ such that $(X \rightarrow Y)$ is covered by $R_{i}$ and $X \not\rightarrow R_{i}$ </li><li>Decompose $R_{i}$ on $(X \rightarrow Y)$ into $R_{i,1} \leftarrow X \cup Y$ and $R_{i,2} \leftarrow R_{i}-Y$</li></ul></li></ul><h5 id="Problem-with-BCNF"><a href="#Problem-with-BCNF" class="headerlink" title="Problem with BCNF"></a>Problem with BCNF</h5><p>After decomposed R into BCNF relations ${R_{1},…,R_{n}}$ with their own ${FD_{1},….FD_{n}}$, we can reconstruct R from ${R_{1},…,R_{n}}$ but cannot reconstruct FD from ${FD_{1},….FD_{n}}$.</p><h4 id="Third-Normal-Form-3NF"><a href="#Third-Normal-Form-3NF" class="headerlink" title="Third Normal Form(3NF)"></a>Third Normal Form(3NF)</h4><ul><li>+no lossless joins</li><li>no redundancies</li><li>dependency perserving</li></ul><p>A relation R with FD set F is in 3NF if for every $X \rightarrow Y$ in F+:</p><ul><li>$X \rightarrow Y$ is trivial, or</li><li>X is a super key, or</li><li>Y is part of a candidate key</li></ul><h5 id="3NF-decomposition-algorithem-Given-a-relation-R-and-a-FD-set-F"><a href="#3NF-decomposition-algorithem-Given-a-relation-R-and-a-FD-set-F" class="headerlink" title="3NF decomposition algorithem(Given a relation R and a FD set F):"></a>3NF decomposition algorithem(Given a relation R and a FD set F):</h5><ul><li>Compute $F_{c}$</li><li>$Result \leftarrow \phi$</li><li>For $(X \rightarrow Y)\in F_{c}$, add a relation $R_{i}(X,Y)$ to Result</li><li>If result is not lossless, add a relation with an appropriate key</li></ul><h5 id="3NF-and-BCNF"><a href="#3NF-and-BCNF" class="headerlink" title="3NF and BCNF"></a>3NF and BCNF</h5><ul><li>both lossless</li><li>BCNF lose dependency preservation</li><li>3NF lose redanduncy avoidance</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This contains functional dependencies and normal form.&lt;/p&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="database" scheme="https://annashuo.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Database System Review 01</title>
    <link href="https://annashuo.github.io/2017/09/14/database-system-review01/"/>
    <id>https://annashuo.github.io/2017/09/14/database-system-review01/</id>
    <published>2017-09-14T03:20:49.000Z</published>
    <updated>2020-01-30T14:14:21.101Z</updated>
    
    <content type="html"><![CDATA[<p>This is the introduction of database, relational database and SQL.</p><a id="more"></a><h3 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h3><h4 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h4><p>Organized collection of interelated data that models some aspect of the real-world.</p><ul><li>data integrity</li><li>implementation</li><li>durability</li></ul><h4 id="Database-Management-System"><a href="#Database-Management-System" class="headerlink" title="Database Management System"></a>Database Management System</h4><p>A DBMS is software that allows applications to store and analyse information in a database</p><h5 id="DBMS-types-by-Target-Workloads"><a href="#DBMS-types-by-Target-Workloads" class="headerlink" title="DBMS types by Target Workloads:"></a>DBMS types by Target Workloads:</h5><ul><li>On-line Transaction Processing(OLTP): Fast operations that only read/update a small amount of data each time</li><li>On-line Analytical Processing(OLAP): Complex queries that read a lot of data to compute aggregates</li><li>Hybrid Transaction + Analytical Processing: OLTP + OLAP</li></ul><h5 id="DBMS-types-by-Data-Model"><a href="#DBMS-types-by-Data-Model" class="headerlink" title="DBMS types by Data Model"></a>DBMS types by Data Model</h5><p><strong>Data model</strong>: collection of concepts form describing the data in a database.</p><p><strong>Schema</strong>: a description of a particular collection of data, using a given data model.</p><ul><li>Most DBMSs data model<ul><li>Relational  </li></ul></li><li>NoSQL data model<ul><li>Key/Value</li><li>Graph</li><li>Document</li><li>Column-family</li></ul></li><li>Machine Learning data model<ul><li>Array/Matrix</li></ul></li><li>Obsolete / Rare<ul><li>Hierarchical</li><li>Network</li></ul></li></ul><h3 id="Relational-Model"><a href="#Relational-Model" class="headerlink" title="Relational Model"></a>Relational Model</h3><ol><li><p>Structure</p><p> <strong>Relation</strong>: unordered set that contain the relationship of attributes that represent entities.</p><p> <strong>Tuple</strong>: a set of attribute values(domain) in the relation</p><ul><li>values are (normally) atomic/scalar</li><li>The special value <font color="red">NULL</font> is a member of every domain</li></ul></li><li><p>Integrity Constraints:</p><ul><li>Primary Keys: Uniquely identifies a single tuple</li><li>Foreign Keys: Specifies that an attribute from one relation has to map to <strong>a</strong> tuple in another relation</li></ul></li><li><p>Manipulation</p><p> Data Manipulation Language(DML)</p><ul><li>Procedural(<strong>Relational Algebra</strong>): The query specifies the strategy the DBMS should use to find the desired result</li><li>Non-Procedural(<strong>Relational Calulus</strong>): The query specifies only what data is wanted and not how to find it.</li></ul></li></ol><h4 id="Relational-Algebra"><a href="#Relational-Algebra" class="headerlink" title="Relational Algebra"></a>Relational Algebra</h4><ol><li><p>$\sigma$</p><p> $\sigma _{predicate}(R)$</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM R</span><br><span class="line">WHERE predicate;</span><br></pre></td></tr></table></figure></li><li><p>$\pi$</p><p> $ \pi _{A_{1},A_{2},…,A_{n}} (R) $</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT A1, A2, ... An</span><br><span class="line">FROM R;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>$U$</p><p> $(R\, U \, S)$</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM R</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM S;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>$\cap$</p><p> $(R\, \cap \, S)$</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM R</span><br><span class="line">INTERSECT</span><br><span class="line">SELECT * FROM S;</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>$-$</p><p> $(R\, - \, S)$</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM R</span><br><span class="line">EXCEPT</span><br><span class="line">SELECT * FROM S;</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>$\times$</p><p> $(R\, \times \, S)$</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM R</span><br><span class="line">CROSS JOIN</span><br><span class="line">SELECT * FROM S;</span><br><span class="line"></span><br><span class="line">SELECT * FROM R, S;</span><br></pre></td></tr></table></figure></li><li><p>$\bowtie$</p><p> $(R\, \bowtie \, S)$</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM R</span><br><span class="line">NATURAL JOIN</span><br><span class="line">SELECT * FROM S;</span><br></pre></td></tr></table></figure><p> <em>Join type</em>:</p><ul><li>Cross join</li><li><p>Inner join (<font color="red">!! NATURAL JOIN AND INNER JOIN have different result</font>)</p><ul><li><p>Natural join$(R\, \bowtie \, S)$</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM R NATURAL JOIN S;</span><br></pre></td></tr></table></figure></li><li><p>Theta join$(R\, \bowtie_{\theta} \, S)$</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM R INNER JOIN S ON R.C1 = S.C1;</span><br></pre></td></tr></table></figure></li><li><p>Semi join$(R\, \ltimes \, S)$</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM R WHERE EXISTS (SELECT * FROM S WHERE R.C1 = S.C1);</span><br></pre></td></tr></table></figure></li><li><p>Anti join$(R\, \triangleright \, S)$</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM R WHERE NOT EXISTS (SELECT * FROM S WHERE R.C1 = S.C1);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Outer join</p><ul><li><p>Left outer join $(R\, ⟕ \, S)$</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM R LEFT OUTER JOIN S ON R.C1 = S.C1;</span><br></pre></td></tr></table></figure></li><li><p>Right outer join $(R\, ⟖ \, S)$</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM R RIGHT OUTER JOIN S ON R.C1 = S.C1;</span><br></pre></td></tr></table></figure></li><li><p>Full outer join (Union)</p></li></ul></li></ul></li><li><p>extra operators</p><ul><li>Rename $\rho$</li><li>Assignment $R\leftarrow S$</li><li>Duplicate Elimination $\delta$</li><li>Agregation $\gamma$</li><li>Sorting $\tau$</li><li>Division $R\div S$ </li></ul></li></ol><h4 id="Relational-Language"><a href="#Relational-Language" class="headerlink" title="Relational Language"></a>Relational Language</h4><ul><li>Data Manipulation Language(DML)</li><li>Data Definition Language(DDL) </li></ul><h4 id="Aggregation"><a href="#Aggregation" class="headerlink" title="Aggregation"></a>Aggregation</h4><ul><li>AVG</li><li>MIN</li><li>MAX</li><li>SUM</li><li>COUNT</li></ul><p>COUNT, SUM, AVG support DISTINCT.</p><p>Output of other columns outside pf an aggregate is undefined.</p><h4 id="Group-by"><a href="#Group-by" class="headerlink" title="Group by"></a>Group by</h4><p>Non-aggreagated values in SELECT output clause must appear in GROUP BY clause.</p><h4 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h4><p>Filters output results for GROUP BY.</p><h4 id="String-operations"><a href="#String-operations" class="headerlink" title="String operations"></a>String operations</h4><ul><li>LIKE: string matching<ul><li>“%”: matches any substring(including empty)</li><li>“_”: match any one character</li></ul></li><li>SUBSTRING(STRING, BEGIN, END)</li><li>UPPER</li><li>LOWER</li><li>||</li></ul><h4 id="Output-control"><a href="#Output-control" class="headerlink" title="Output control"></a>Output control</h4><ul><li>Order by</li><li>LIMIT OFFSET</li></ul><h4 id="Nested-query"><a href="#Nested-query" class="headerlink" title="Nested query"></a>Nested query</h4><ul><li>ALL</li><li>ANY</li><li>IN</li><li>EXISTS</li></ul><h4 id="Window-function"><a href="#Window-function" class="headerlink" title="Window function"></a>Window function</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT ... FUNC-NAME(...) OVER (...)</span><br><span class="line">FROM table</span><br></pre></td></tr></table></figure><p>FUNC-NAME:</p><ul><li>ROW_NUMBER(): number of the current row</li><li>RANK(): order position of the current row</li></ul><p>OVER: </p><ul><li>PARTITION BY: to specify group</li><li>ORDER BY</li></ul><h4 id="Common-Table-Expressions"><a href="#Common-Table-Expressions" class="headerlink" title="Common Table Expressions"></a>Common Table Expressions</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eg. print the sequence of numbers from 1 to 10</span><br><span class="line"></span><br><span class="line">with recursive cteSource(counter) as(</span><br><span class="line">(select 1)</span><br><span class="line">union all</span><br><span class="line">(select counter+1 from cteSource</span><br><span class="line">where counter &lt; 10)</span><br><span class="line">)</span><br><span class="line">select * from cteSource;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the introduction of database, relational database and SQL.&lt;/p&gt;
    
    </summary>
    
      <category term="STUDY" scheme="https://annashuo.github.io/categories/STUDY/"/>
    
    
      <category term="database" scheme="https://annashuo.github.io/tags/database/"/>
    
  </entry>
  
</feed>
