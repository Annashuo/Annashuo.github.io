<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Distributed System - Zookeeper</title>
    <url>/2020/02/01/distributed-system-2-zookeeper/</url>
    <content><![CDATA[<p>Introduction of Zookeeper</p>
<a id="more"></a>
<h3 id="Zookeeper-Threading-Model"><a href="#Zookeeper-Threading-Model" class="headerlink" title="Zookeeper Threading Model"></a>Zookeeper Threading Model</h3><ul>
<li>Application’s start code in the main method is executed on the main thread</li>
<li>When Zookeeper object is created, two additional threads(IO thread and event thread) are created.</li>
</ul>
<h4 id="IO-thread"><a href="#IO-thread" class="headerlink" title="IO thread"></a>IO thread</h4><ul>
<li>Handles all the network communication with Zookeeper servers</li>
<li>Handles Zookeeper requests and responses</li>
<li>Responds to pings</li>
<li>Session Management</li>
<li>Session Timeout</li>
<li>…</li>
</ul>
<h4 id="Event-Thread"><a href="#Event-Thread" class="headerlink" title="Event Thread"></a>Event Thread</h4><ul>
<li>Manages Zookeeper events<ul>
<li>Connection </li>
<li>Disconnection</li>
</ul>
</li>
<li>Custom znode Watchers and Triggers we subscribe to</li>
<li>Event are executed in Event Thread in order</li>
</ul>
<h3 id="Watchers-and-Triggers"><a href="#Watchers-and-Triggers" class="headerlink" title="Watchers and Triggers"></a>Watchers and Triggers</h3><ul>
<li>We cna register a watcher when we call the methods (eg. <em>getChildren()</em>, <em>getData()</em>, <em>exists()</em>). These are one-time trigger</li>
<li>The watcher allows us to get a notification when a change happens<ul>
<li><em>getChildren(…, watcher)</em> - Get notified when the list of a znode’s children changes</li>
<li><em>exists(znodePath, whatcher)</em> - Get notified if a znode gets deleted or created</li>
<li><em>getData(znodePath, whatcher)</em> - Get notified if a znode’s data gets modified</li>
</ul>
</li>
<li>If we want to get future notifications, we need to register the watcher again</li>
</ul>
<h3 id="The-Herd-Effect"><a href="#The-Herd-Effect" class="headerlink" title="The Herd Effect"></a>The Herd Effect</h3><ul>
<li>A large number of nodes waiting for an event</li>
<li>When the event happens all nodes get notified and they all wake up</li>
<li>Only one node can “succeed”</li>
<li>Indicates bad design, can negatively impact the performance and can completely freeze the cluster</li>
</ul>
<h4 id="Bad-Design"><a href="#Bad-Design" class="headerlink" title="Bad Design"></a>Bad Design</h4><p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/zookeeper_bad.png" alt></p>
<ol>
<li>All nodes watch leader, a leader dies</li>
<li>Zookeeper send request to all nodes: the zookeeper cluster will have to notify all znodes a <em>NodeDeleteEvent</em></li>
<li>All nodes send request to Zookeeper: all nodes call <em>getChildren</em> method to get a new view of the Znode hierarchy from the zookeeper cluster</li>
<li>All nodes send request to Zookeeper: After the new leader is reelected, all the nodes are going to start watching the Znode of the leader</li>
</ol>
<p>Since all nodes will send a lot of requests to zookeeper simultaneously, with a large number of nodes in a cluster, this can really overwhelmed Zookeeper.</p>
<p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/hert_effect.png" alt></p>
<h4 id="Good-Design"><a href="#Good-Design" class="headerlink" title="Good Design"></a>Good Design</h4><p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/zookeeper_good.png" alt></p>
<ol>
<li>Each node is going to watch only Znode that comes right before it in the sequence of candidate Znodes</li>
<li>Zookeeper send request to one node: When leader dies, the only node that is going to be notified is its immediate successor</li>
<li>A node send request to zookeeper: this node call <em>getChildren</em> to make sure that it owns the Znode with the smallest sequence number and in that case it knows that it’s the new leader</li>
</ol>
<h3 id="Important-Properties"><a href="#Important-Properties" class="headerlink" title="Important Properties"></a>Important Properties</h3><ul>
<li><strong>Fault Tolerance</strong> - Your business can run 24*7 with no interruptions</li>
<li><strong>Horizontal Scalability</strong> - We can dynamically grow our business on demand </li>
</ul>
<p>Having those two “badges of honor” is not a trivial achievement we will try to repeat for every distributed system.</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>Github - <a href="https://github.com/Annashuo/Distributed-System" target="_blank" rel="noopener">https://github.com/Annashuo/Distributed-System</a><br>Udemy Course - <a href="https://www.udemy.com/course/distributed-systems-cloud-computing-with-java/" target="_blank" rel="noopener">https://www.udemy.com/course/distributed-systems-cloud-computing-with-java/</a></p>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>distributed system</tag>
      </tags>
  </entry>
  <entry>
    <title>Distributed System - Introduction</title>
    <url>/2020/02/01/distributed-system-1-introduction/</url>
    <content><![CDATA[<p>Introduction to Distributed System</p>
<p>A Distributed System is a system of several <u> processes </u>, running on <u>different computers</u>, communicating with each other through the <u>network</u>, and are sharing a <u>state</u> or are working together to achieve a <u>common goal</u>.</p>
<a id="more"></a>
<h3 id="Problems-of-Centralized-System"><a href="#Problems-of-Centralized-System" class="headerlink" title="Problems of Centralized System"></a>Problems of Centralized System</h3><ul>
<li>Performance and Storage - limited vertical scalability</li>
<li>Single Point of failure - loss of money and trust</li>
<li>High latency - poor user experience</li>
<li>Security and privacy</li>
</ul>
<h3 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h3><ul>
<li><strong>node</strong>: a process running on a dedicated machine</li>
<li><strong>cluster</strong>: collection of computers/nodes connected to each other; the nodes in a cluster are working on the same task and typically are running the same code.</li>
</ul>
<h3 id="Apache-Zookeeper"><a href="#Apache-Zookeeper" class="headerlink" title="Apache Zookeeper"></a>Apache Zookeeper</h3><p>High Performance Distributed System Coordination Service.</p>
<ul>
<li>Is a distributed system itself that provides us high availability and reliability</li>
<li>Typically runs in a cluster of an odd numver of nodes, higher than 3</li>
<li>Uses redundancy to allow failures and stay functional</li>
</ul>
<h3 id="Znodes’-Properties"><a href="#Znodes’-Properties" class="headerlink" title="Znodes’ Properties"></a>Znodes’ Properties</h3><p>Zookeeper provides us with a very familiar and easy software abstraction and data model that looks a lot like a <u>tree</u> and is very similar to a <u>file system</u>. Each element in that tree or virtual file system is called a <font color="red">Znode</font>.</p>
<p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/znode.png" alt></p>
<h4 id="Znode-Hybrid-between-a-file-and-a-directory"><a href="#Znode-Hybrid-between-a-file-and-a-directory" class="headerlink" title="Znode - Hybrid between a file and a directory"></a>Znode - Hybrid between a <u>file</u> and a <u>directory</u></h4><ul>
<li>Znodes can store any data inside (like a file)</li>
<li>Anodes can have children znodes (like a directory)</li>
</ul>
<h4 id="Znode-Types"><a href="#Znode-Types" class="headerlink" title="Znode Types"></a>Znode Types</h4><ul>
<li>Persistent - persists between sessions</li>
<li>Ephemeral - is deleted when the session ends</li>
</ul>
<h3 id="Simply-Use-Zookeeper"><a href="#Simply-Use-Zookeeper" class="headerlink" title="Simply Use Zookeeper"></a>Simply Use Zookeeper</h3><h4 id="Install-and-Configure"><a href="#Install-and-Configure" class="headerlink" title="Install and Configure"></a>Install and Configure</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">download from https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/</span><br><span class="line">tar -zxvf apache-zookeeper-3.5.6-bin.tar.gz</span><br><span class="line">cd apache-zookeeper-3.5.6-bin/</span><br><span class="line">scp conf/zoo_sample.cfg conf/zoo.cfg  # .cgf is configure file</span><br><span class="line">mkdir logs</span><br><span class="line">cd bin</span><br><span class="line">./zkServer.sh start		# ./zkServer.sh finds more commands</span><br></pre></td></tr></table></figure>
<h4 id="Simply-Use"><a href="#Simply-Use" class="headerlink" title="Simply Use"></a>Simply Use</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./zkCli.sh</span><br><span class="line">help	# find more commands</span><br><span class="line">ls /</span><br><span class="line">create /parent &quot;some parent data&quot;</span><br><span class="line">ls /</span><br><span class="line">ls /parent</span><br><span class="line">create /parent/child &quot;some child data&quot;</span><br><span class="line">ls /</span><br><span class="line">get /parent</span><br><span class="line">get /parent/child</span><br><span class="line">stat /parent</span><br><span class="line">stat /parent/child</span><br><span class="line">deleteall /parent	# delete parent and child</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>distributed system</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog备份</title>
    <url>/2020/01/31/Blog%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p>mac电脑下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew update</span><br><span class="line">node -v 确认未安装</span><br><span class="line">brew install node</span><br><span class="line">node -v 查看node版本</span><br><span class="line">npm -v 查看npm版本</span><br></pre></td></tr></table></figure></p>
<p>问题一：出现node -v有node版本，但是npm -v没有版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew uninstall node</span><br><span class="line">brew install nvm</span><br><span class="line">brew install node</span><br><span class="line">node -v 查看node版本</span><br><span class="line">npm -v 查看npm版本</span><br></pre></td></tr></table></figure>
<h3 id="clone-blog和next主题"><a href="#clone-blog和next主题" class="headerlink" title="clone blog和next主题"></a>clone blog和next主题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Annashuo/blog_source.git</span><br><span class="line">cd blog_source/blog/themes/</span><br><span class="line">scp -r next_copy next</span><br></pre></td></tr></table></figure>
<h3 id="重新渲染hexo并测试"><a href="#重新渲染hexo并测试" class="headerlink" title="重新渲染hexo并测试"></a>重新渲染hexo并测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在blog文件夹中</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">然后在localhost:4000查看</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Software Design</title>
    <url>/2018/01/22/java01/</url>
    <content><![CDATA[<p>This is the first part of Java Software Design notes.</p>
<a id="more"></a>
<ol>
<li><ul>
<li>Primitive Type(stack): int, long, double, boolean, char, byte, short, float</li>
<li>Object Type(heap): classes, interfaces, arrays, enums, annotations (“==”(pointer) != “.equals()”(values))</li>
<li>Converts Primitive type to Object types: Integer, Long, Double, Boolean, Character, Byte, Short, Float</li>
<li>Generic Type contains Object type, eg. List<integer>, HashMap<byte, double></byte,></integer></li>
</ul>
</li>
<li><p>Method in all Objects/Classes because all class extends class “Object”: </p>
<ul>
<li>.equals</li>
<li>.hashCode</li>
<li>.toString: every object can be printed<br>Overwrite .equals must also overwrite .hashCode</li>
</ul>
</li>
<li><p>Interface: a type without implementation</p>
<ul>
<li>An interface can <u>extend</u> multiple interfaces</li>
<li>A class can <u>implement</u> multiple interfaces</li>
</ul>
</li>
<li><p>Array  default method “.length()”</p>
</li>
<li><p>Enum</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum Planet &#123;EARTH, ...;&#125;</span><br><span class="line">Planet location = Planet.EARTH;</span><br><span class="line">location.equals(Planet.EARTH);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Annotation: mark code without any immediate functional effect. eg. @Override (when code doesn;t overwrite a method will warning)</p>
</li>
<li><p>Primary collecton interfaces(java.util)</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Collection          Map</span><br><span class="line">/   |   \</span><br><span class="line">Set  List  Queue</span><br></pre></td></tr></table></figure>
<p> Interface | Implementation<br> :—:|:—:<br> Set | HashSet(no order), LinkedHashSet(ordered by add), TreeSet<br> List | ArrayList<br> Queue | ArrayDeque<br> Deque | ArrayDeque<br> Map | HashMap</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; s = new TreeSet&lt;&gt;()</span><br><span class="line">// s can only use methods in set(limit methods usage)</span><br></pre></td></tr></table></figure>
<ul>
<li>LinkedHashSet can contain any Object Type.</li>
<li>TreeSet just contain those Object Type that can compared to each other.</li>
</ul>
</li>
<li><p>arrays and Collection cannot mix. Priority: Collection &gt; arrays</p>
</li>
<li><p>private: same class can access each others’ private variable</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Point&#123;</span><br><span class="line">	private double x, y;</span><br><span class="line">	public Point(double x, double y)&#123;</span><br><span class="line">		this.x = s;</span><br><span class="line">		this.y = y;</span><br><span class="line">	&#125;</span><br><span class="line">	public coid translateBy(Point p)&#123;</span><br><span class="line">		x += p.x; // in class Point, one can access another Point p private variable</span><br><span class="line">		y += p.y;</span><br><span class="line">	&#125;</span><br><span class="line">	public double getX()&#123;return x;&#125; // accessed by another class.</span><br><span class="line">	public double getY()&#123;return y;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Class and Interface</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface Animal &#123;</span><br><span class="line">	void vocalize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog implements Animal&#123;</span><br><span class="line">	public void vocalize()&#123;</span><br><span class="line">		System.out.println(&quot;Woof!&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">class Cow implements Animal&#123;</span><br><span class="line">	public void vocalize()&#123;</span><br><span class="line">		moo();</span><br><span class="line">	&#125;</span><br><span class="line">	public void moo()&#123;</span><br><span class="line">		System.out.println(&quot;Moo&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">//main</span><br><span class="line"></span><br><span class="line">// 1. Cannot define a use interface Animal</span><br><span class="line">// Animal a = new Animal(); </span><br><span class="line">// vocalize();</span><br><span class="line">// 2. define Dog instance d, d can access Dog&apos;s every methods</span><br><span class="line">Dog d = new Dog();</span><br><span class="line">d.vocalize();</span><br><span class="line">// 3. define Animal b used implementation, b can only access interface Animal&apos;s methods</span><br><span class="line">Animal b = new Cow();</span><br><span class="line">b.vocalize();</span><br><span class="line">// moo() doesn&apos;t in interface Animal, b cannot access</span><br><span class="line">// b.moo();</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Review 14</title>
    <url>/2017/11/24/database-system-review14/</url>
    <content><![CDATA[<h2 id="Logging-and-Recovery"><a href="#Logging-and-Recovery" class="headerlink" title=" Logging and Recovery "></a><center> Logging and Recovery </center></h2><a id="more"></a>
<h3 id="Crash-Recovery"><a href="#Crash-Recovery" class="headerlink" title="Crash Recovery"></a>Crash Recovery</h3><p>Recovery algorithms are techniques to ensure database consistency, transaction atomicity, and durability despite falitures</p>
<p>Recovery algorithms: </p>
<ul>
<li>Actions during normal txn processing to ensure that the DBMS can recover from a failure</li>
<li>Actions after a failure to recover the database to a state that ensures atomicity, consistency, and durability.</li>
</ul>
<h3 id="Storage-Types"><a href="#Storage-Types" class="headerlink" title="Storage Types"></a>Storage Types</h3><ul>
<li>Volatile Storage<ul>
<li>Data does not persist after power is cut</li>
</ul>
</li>
<li>Non-volatile Storage<ul>
<li>Data persists after losing power</li>
</ul>
</li>
<li>Stable Storage<ul>
<li>A non-existent form of non-volatile storage that survives all possible failures scenarios.</li>
</ul>
</li>
</ul>
<h3 id="Failure-Classification"><a href="#Failure-Classification" class="headerlink" title="Failure Classification"></a>Failure Classification</h3><h4 id="Transaction-Failures"><a href="#Transaction-Failures" class="headerlink" title="Transaction Failures"></a>Transaction Failures</h4><ul>
<li>Logical Errors: Txn cannot complete due to some internal error condition</li>
<li>Internal State Errors: DBMS must terminate an active txn due ti an error condition</li>
</ul>
<h4 id="System-Failures"><a href="#System-Failures" class="headerlink" title="System Failures"></a>System Failures</h4><ul>
<li>Software Failure: Problem with the DBMS implementation</li>
<li>Hardware Failure: The computer hosting the DBMS crashes; Non-volatile storage contents are assumed to not be corrupted by system crash</li>
</ul>
<h4 id="Storage-Media-Failure"><a href="#Storage-Media-Failure" class="headerlink" title="Storage Media Failure"></a>Storage Media Failure</h4><ul>
<li>Non-Repairable Hardware Failure: A head crash or similar disk failure destroys all or part of non-volatile storage; Destruction is assumed to be detectable</li>
<li>No DBMS can recover from this</li>
</ul>
<h3 id="Buffer-Pool-Policies"><a href="#Buffer-Pool-Policies" class="headerlink" title="Buffer Pool Policies"></a>Buffer Pool Policies</h3><h4 id="Steal-Policy"><a href="#Steal-Policy" class="headerlink" title="Steal Policy"></a>Steal Policy</h4><p>Whether the DBMS allows an uncommitted txn to overwrite the most recent committed value of an object in non-volatile storage.</p>
<ul>
<li>steal: is allowed</li>
<li>no-steal: is not allowed</li>
</ul>
<h4 id="Force-Policy"><a href="#Force-Policy" class="headerlink" title="Force Policy"></a>Force Policy</h4><p>Whether the DBMS ensures that all updates made by a txn are reflected on non-volatile storage before the txn is allowed to commit.</p>
<ul>
<li>force: is enforced</li>
<li>no-force: is not enforced</li>
</ul>
<h4 id="No-Steal-Force"><a href="#No-Steal-Force" class="headerlink" title="No-Steal + Force"></a>No-Steal + Force</h4><p>This approach is the easiest to implement:</p>
<ul>
<li>Never have to undo changes of an aborted txn because the changes were not written to disk</li>
<li>Never have to redo changes of a committed txn because all the changes are guaranteed to be written to disk at commit time.</li>
</ul>
<h3 id="Shadow-Paging"><a href="#Shadow-Paging" class="headerlink" title="Shadow Paging"></a>Shadow Paging</h3><p>Maintain two seperate copies of the database(<strong>master</strong>, <strong>shadow</strong>). Updates are only made in the shadow copy. When a txn commits, atomically switch the shadow to be come the new master.</p>
<p>Buffer Pool: NO-STEAL + FORCE</p>
<p>Organize the database pages in a tree structure where the root is a single disk page.</p>
<p>There are two copies of the tree, the master and shadow. The root points to the master copy. Updates are applied to the shadow copy.</p>
<h4 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h4><ul>
<li>Copying the entire page table is expensive<ul>
<li>Use a page table structured like a B+tree</li>
<li>No need to copy entire tree, only need to copy paths in the tree that lead to updated leaf nodes</li>
</ul>
</li>
<li>Commit overhead is high:<ul>
<li>Flush every updated page, page table and root.</li>
<li>Data gets fragmented</li>
<li>Need garbage collection</li>
</ul>
</li>
</ul>
<h3 id="Write-Ahead-Log"><a href="#Write-Ahead-Log" class="headerlink" title="Write-Ahead Log"></a>Write-Ahead Log</h3><p>Record the changes made to the database in a log file before the change is made.</p>
<ul>
<li>Assume that the log is on stable storage</li>
<li>Log contains sufficient information to perform the necessary undo and redo actions to restore the database after a crash.</li>
</ul>
<p>Buffer Pool: STEAL + NO-FORCE</p>
<p>All log records pertaining to an updated page are written to non-volatile storage before the page itself is allowed to be over-written in non-volatile storage.</p>
<p>Write a $<begin>$ record to the log for each txn to mark its starting point. When a txn finishes, the DBMS will write a $<commit>$ record on the log and make sure that all log records are flushed before it returns an acknowledgement to application.</commit></begin></p>
<h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><p>When to write log entries to disk?</p>
<ul>
<li>When the txn commits</li>
<li>Can use group commit to batch multiple log flushes together to amortize overhead</li>
</ul>
<p>When to write dirty records to disk?</p>
<ul>
<li>Every time the txn executes an update?</li>
<li>Once when the txn commits?</li>
</ul>
<h3 id="Checkpoints"><a href="#Checkpoints" class="headerlink" title="Checkpoints"></a>Checkpoints</h3><p>Output onto stable storage all log records currently residing in main memory</p>
<p>Output to the disk all modified blocks</p>
<p>Write a $<checkpoint>$ entry to the log and flush to stable storage.</checkpoint></p>
<h3 id="Logging-Schemes"><a href="#Logging-Schemes" class="headerlink" title="Logging Schemes"></a>Logging Schemes</h3><p>Physical Logging:</p>
<ul>
<li>Record the changes made to a specific location inthe database</li>
<li>Example: Position of a record in a page</li>
</ul>
<p>Logical Logging:</p>
<ul>
<li>Record the high-level operations executed by txns</li>
<li>Not necessarily restricted to single page</li>
<li>Example: The UPDATE, DELETE and INSERT queries invoked by a txn</li>
</ul>
<h4 id="Physiological-Logging"><a href="#Physiological-Logging" class="headerlink" title="Physiological Logging"></a>Physiological Logging</h4><p>Hybrid approach where log records target a single page but do not specify data organization of the page.</p>
<h3 id="ARIES-Algorithms-for-Recovery-and-Isolation-Exploiting-Semantics"><a href="#ARIES-Algorithms-for-Recovery-and-Isolation-Exploiting-Semantics" class="headerlink" title="ARIES(Algorithms for Recovery and Isolation Exploiting Semantics)"></a>ARIES(Algorithms for Recovery and Isolation Exploiting Semantics)</h3><ul>
<li><strong>Write-Ahead Logging(WAL)</strong>: Any change is recorded in log on stable storage before the database change is written to disk. Has to be STEAL + NO-FORCE</li>
<li><strong>Repeating History During Redo</strong>: On restart, retrace actions and restore database to exact state before crash.</li>
<li><strong>Logging Changes During Undo</strong>: Record undo actions to log to ensure action is not repeated in the event of repeated failures</li>
</ul>
<h3 id="Log-Sequence-Numbers"><a href="#Log-Sequence-Numbers" class="headerlink" title="Log Sequence Numbers"></a>Log Sequence Numbers</h3><p>Each data page contains a <font style="color:red;">pageLSN</font>, that is the LSN of the most recent update to that page. </p>
<p>System keeps track of <font style="color:red;">flushedLSN</font>, that is the max LSN flushed so far.</p>
<p>Before page i can be written to disk, we must flush log at least to the point where:<br>$pageLSN &lt;= flushedLSN$</p>
<h3 id="Normal-Commit-amp-Aborted-Operations"><a href="#Normal-Commit-amp-Aborted-Operations" class="headerlink" title="Normal Commit &amp; Aborted Operations"></a>Normal Commit &amp; Aborted Operations</h3><h4 id="Transaction-Commit"><a href="#Transaction-Commit" class="headerlink" title="Transaction Commit"></a>Transaction Commit</h4><ul>
<li>Write <font style="color:red;">COMMIT</font> record to log.</li>
<li>All log records up to txn’s <font style="color:red;">COMMIT</font> record are flushed to disk</li>
<li>When the commit succeeds, write a special <font style="color:red;">TXN-END</font> record to log.</li>
</ul>
<h4 id="Transaction-Abort"><a href="#Transaction-Abort" class="headerlink" title="Transaction Abort"></a>Transaction Abort</h4><font style="color:red;">prevLSN</font>: the precious LSN for the txn.

- First write an <font style="color:red;">ABORT</font> record to log
- Play back updates in reverse order
- At end, write a <font style="color:red;">TXN-END</font> log record.

**Compensateion Log Records(CLR)**: describe the actions taken to undo the actions of a previous update record.

### Fuzzy Checkpointing
#### Non-fuzzy Checkpoint
The DBMS halts everything when it takes a checkpoint to ensure a consistent snapshot.

#### Better Checkpoints
Pause txns while the DBMS takes the checkpoint

#### Fuzzy Checkpoint
- <font style="color:red;">CHECKPOINT-BEGIN</font>
- <font style="color:red;">CHECKPOINT-END</font>

<h3 id="Recovery-Algorithm"><a href="#Recovery-Algorithm" class="headerlink" title="Recovery Algorithm"></a>Recovery Algorithm</h3><h4 id="ARIES-Recovery-Phase"><a href="#ARIES-Recovery-Phase" class="headerlink" title="ARIES - Recovery Phase"></a>ARIES - Recovery Phase</h4><ul>
<li>Analysis: read the WAL to identify dirty pages in the buffer pool and active txns at the time of the crash.</li>
<li>Redo: repeat all actions starting from an appropriate point in the log</li>
<li>Undo: reverse the actions of txns that did not commit before the crash</li>
</ul>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Review 13</title>
    <url>/2017/11/24/database-system-review13/</url>
    <content><![CDATA[<h2 id="Multi-Version-Concurrency-Control-MVCC"><a href="#Multi-Version-Concurrency-Control-MVCC" class="headerlink" title=" Multi-Version Concurrency Control(MVCC) "></a><center> Multi-Version Concurrency Control(MVCC) </center></h2><p>The DBMS maintains multiple <u><strong>physical</strong></u> versions of a single <u><strong>logical</strong></u> onject in the database:</p>
<ul>
<li>When a txn writes to an object, the DBMS creates a new version of that object</li>
<li>When a txn reads an object, it reads the newest version that existed when the txn started.</li>
</ul>
<p><strong>Writers don’t block readers.</strong></p>
<p><strong>Readers don’t block writers.</strong></p>
<p>Read-only txns can read a conststent <u>snapshot</u> without acquiring locks. Use timestamps to determine visibility.</p>
<p>Easily support <u>time-travlel queries</u></p>
<a id="more"></a>
<h3 id="Version-Storage"><a href="#Version-Storage" class="headerlink" title="Version Storage"></a>Version Storage</h3><p>Then DBMS uses the tuples’ pointer field to create a version chain per logical tuple.</p>
<ul>
<li>Approach 1: Append-Only Storage</li>
<li>Approach 2: Time-Travel Storage</li>
<li>Approach 3: Delta Storage</li>
</ul>
<h4 id="Append-Only-Storage"><a href="#Append-Only-Storage" class="headerlink" title="Append-Only Storage"></a>Append-Only Storage</h4><p>Version Chain Ordering:</p>
<ul>
<li>Approach 1: Oldest-to-Newest(O2N)</li>
<li>Approach 2: Newest-to-Oldest(N2O)</li>
</ul>
<h4 id="Time-Travel-Storage"><a href="#Time-Travel-Storage" class="headerlink" title="Time-Travel Storage"></a>Time-Travel Storage</h4><p>On every update, copy the current version to the time-travel table. Update poiters. Overwrite master version in the main table. Update pointers.</p>
<h4 id="Delta-Storage"><a href="#Delta-Storage" class="headerlink" title="Delta Storage"></a>Delta Storage</h4><p>On every update, copy only the values that were modified to the delta storage and overwrite the master version.</p>
<h3 id="Garbage-Collection"><a href="#Garbage-Collection" class="headerlink" title="Garbage Collection"></a>Garbage Collection</h3><p>The DBMS needs to remove <u>reclaimable</u> physical versions from the database over time.</p>
<ul>
<li>Approach 1: Tuple-level<ul>
<li>Find old versions by examining tuples directly</li>
<li>Background Vacuuming vs. Cooperative Cleaning</li>
</ul>
</li>
<li>Approach 2: Transaction-level<ul>
<li>Txns keep track of their old versions so the DBMS does not have to scan tuples to determine visibility.</li>
</ul>
</li>
</ul>
<h4 id="Tuple-level-GC"><a href="#Tuple-level-GC" class="headerlink" title="Tuple-level GC"></a>Tuple-level GC</h4><ul>
<li><strong>Background Vacuuming</strong>: Seperate thread(s) periodically scan the table and look for reclaimable versions. Works with any storage.</li>
<li><strong>Cooperative Cleaning</strong>: Worker threads identify reclaimable versions as they traverse version chain. Only works with <strong>O2N</strong></li>
</ul>
<h4 id="Transaction-level-GC"><a href="#Transaction-level-GC" class="headerlink" title="Transaction-level GC"></a>Transaction-level GC</h4><p>Each txn keeps track of its read/write set.</p>
<p>The DBMS determines when all versions created by a finished txn are no longer visible.</p>
<h3 id="Index-Management"><a href="#Index-Management" class="headerlink" title="Index Management"></a>Index Management</h3><p>PKey index always point to version chain head.</p>
<p>Secondary indexes are moew complicated.</p>
<h4 id="Secondary-Indexes"><a href="#Secondary-Indexes" class="headerlink" title="Secondary Indexes"></a>Secondary Indexes</h4><ul>
<li>Approach 1: Logical Pointers<ul>
<li>Use a fixed identifier per tuple that does not change.</li>
<li>Requires an extra indirection layer.</li>
<li>Primary Key vs. Tuple Id</li>
</ul>
</li>
<li>Approach 2: Physical Pointers<ul>
<li>Use the physical address to ther version chain head</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Review 12</title>
    <url>/2017/11/24/database-system-review12/</url>
    <content><![CDATA[<h2 id="Timestamp-Ordering"><a href="#Timestamp-Ordering" class="headerlink" title=" Timestamp Ordering "></a><center> Timestamp Ordering </center></h2><a id="more"></a>
<h3 id="Concurrency-Control-Approaches"><a href="#Concurrency-Control-Approaches" class="headerlink" title="Concurrency Control Approaches"></a>Concurrency Control Approaches</h3><ul>
<li>Two-Phase Locking(2PL): Determine serializability order of conflicting operations at runtime while txn execute.</li>
<li>Timestamp Ordering(T/O): Determine serializability order of txns before they execute.</li>
</ul>
<h3 id="T-O-concurrency-control"><a href="#T-O-concurrency-control" class="headerlink" title="T/O concurrency control"></a>T/O concurrency control</h3><p>Use timestamps to determine the serializability order of txns. If <font style="color:red;">$TS(T<em>{i})&lt;TS(T</em>{j})$</font>, then the DBMS must ensure taht the execution schedule is equivalent to a serial schedule where <font style="color:red;">$T_{i}$</font> appears before <font style="color:red;">$T_{j}$</font>.</p>
<p>Eache txn <font style="color:red;">$T_{i}$</font> is assigned a unique fixed timestamp that is monotonically increasing.</p>
<h4 id="Recoverable-Schedules"><a href="#Recoverable-Schedules" class="headerlink" title="Recoverable Schedules"></a>Recoverable Schedules</h4><p>A schedule is <u><strong>recoverable</strong></u> if txns commit only after all txns whose changes they read, commit. Otherwise, the DBMS cannot guarantee that txns read data that will be restarted after recovering from a crash.</p>
<h4 id="Basic-Timestamp-Ordering"><a href="#Basic-Timestamp-Ordering" class="headerlink" title="Basic Timestamp Ordering"></a>Basic Timestamp Ordering</h4><p>Txns read and write objects without locks. Every object X is tagged with timestamp of the last txm that successfully did read/write:</p>
<ul>
<li><font style="color:red;">$W-TS(X)$</font>: Write timestamp on X</li>
<li><font style="color:red;">$R-TS(X)$</font>: Read timestamp on X</li>
</ul>
<p>Check timestamps for every operation. If txn tries to access an object “from the future”, it aborts and restarts.</p>
<p>Generates a schedule that is conflict serializable if you do <strong>not</strong> use the Thomas Write Rule.</p>
<ul>
<li>No deadlocks because no txn ever waits</li>
<li>Possibility of starvation for long txns if short txns keep causing conflicts.</li>
<li>Permits schedules that are not <strong>recoverable</strong></li>
</ul>
<h5 id="Basic-T-O-READS"><a href="#Basic-T-O-READS" class="headerlink" title="Basic T/O - READS"></a>Basic T/O - READS</h5><p>If <font style="color:red;">$TS(T_{i})&lt;W-TS(X)$</font>, this violates timestamp order of <font style="color:red;">$T_{i}$</font> with regard to the writer of <font style="color:red;">$X$</font>. Abort <font style="color:red;">$T_{i}$</font> and restart it with same TS. Else allow <font style="color:red;">$T_{i}$</font> to read X. Update <font style="color:red;">$R-TS(X)$</font> to max(<font style="color:red;">$R-TS(X),\ TS(T_{i})$</font>). Have to make a locol copy of X to ensure repeatable reads for <font style="color:red;">$T_{i}$</font>.</p>
<h5 id="Basic-T-O-WRITES"><a href="#Basic-T-O-WRITES" class="headerlink" title="Basic T/O - WRITES"></a>Basic T/O - WRITES</h5><p>If <font style="color:red;">$TS(T_{i})&lt;R-TS(X)$</font> or <font style="color:red;">$TS(T_{i})&lt;W-TS(X)$</font>, abort and restart <font style="color:red;">$T_{i}$</font>, else allow <font style="color:red;">$T_{i}$</font> to write <font style="color:red;">$X$</font> and update <font style="color:red;">$W-TS(X)$</font>, also have to make a local copy of <font style="color:red;">$X$</font> to ensure repeatable reads for <font style="color:red;">$T_{i}$</font>.</p>
<h5 id="Thomas-Write-Rule"><a href="#Thomas-Write-Rule" class="headerlink" title="Thomas Write Rule"></a>Thomas Write Rule</h5><ul>
<li>If <font style="color:red;">$TS(T_{i})&lt;R-TS(X)$</font>: abort and restart <font style="color:red;">$T_{i}$</font></li>
<li>If <font style="color:red;">$TS(T_{i})&lt;W-TS(X)$</font>: <u><strong>Thomas Write Rule</strong></u>: ignore the write and allow the txn to continue. This violates timestamp order of <font style="color:red;">$T_{i}$</font>.</li>
<li>Else, allow <font style="color:red;">$T_{i}$</font> to wrie <font style="color:red;">$X$</font> and update <font style="color:red;">$W-TS(X)$</font></li>
</ul>
<h5 id="Basic-T-O-PERFORMANCE-ISSUES"><a href="#Basic-T-O-PERFORMANCE-ISSUES" class="headerlink" title="Basic T/O - PERFORMANCE ISSUES"></a>Basic T/O - PERFORMANCE ISSUES</h5><ul>
<li>High overhead from copying data to txn’s workspace and from updating timestamps.</li>
<li>Long running txns can get starved.</li>
<li>Suffers from timestamps bottleneck.</li>
</ul>
<h4 id="Optimistic-Concurrency-Control"><a href="#Optimistic-Concurrency-Control" class="headerlink" title="Optimistic Concurrency Control"></a>Optimistic Concurrency Control</h4><p>The DBMS creates a private workspace for each txn. All modifications are applied to workspace. Any object read is copied into workspace.</p>
<p>When a txn commits, the DBMS compares its workspace write set to see whether it conflicts with other txns.</p>
<p>If there are no conflicts, the write set is installed into the “global” database.</p>
<h5 id="OCC-Phase"><a href="#OCC-Phase" class="headerlink" title="OCC Phase"></a>OCC Phase</h5><ul>
<li><strong>Read Phase</strong>: track the read/write sets of txns and start their writes in a private workspace</li>
<li><strong>Validation Phase</strong>: when a txn commits, check whether it conflicts with other txns</li>
<li><strong>Write Phase</strong>: if validation succeeds, apply private changes to database. Otherwise abort and restart the txn.</li>
</ul>
<h5 id="OCC-PERFORMANCE-ISSUES"><a href="#OCC-PERFORMANCE-ISSUES" class="headerlink" title="OCC -  PERFORMANCE ISSUES"></a>OCC -  PERFORMANCE ISSUES</h5><ul>
<li>High overhead for copying data locally</li>
<li>Validation/Write phase bottlenecks</li>
<li>Aborts are more wasteful because they only occur after a txn has already executed.</li>
<li>Suffers from timestamp allocation bottleneck</li>
<li>When a txn commits, all previous T/O schemes check to see whether there is a conflict with concurrent txns. This requires latches. If there are a lot of concurrent txns, then this is slow even if the conflict rate is slow.</li>
</ul>
<h4 id="Partition-Based-T-O"><a href="#Partition-Based-T-O" class="headerlink" title="Partition-Based T/O"></a>Partition-Based T/O</h4><p>Split the datebase up in disjoint subsets called <u><strong>partitions</strong></u>. Only check for conflicts between txns that are running in the same partition.</p>
<p>Txns are assigned timestamps based on when they arrive at the DBMS.</p>
<p>Partitions are protected by a single lock:</p>
<ul>
<li>Each tan is queued at the partitions it needs</li>
<li>The txn acquires a partition’s lock if it has the lowest timestamp in that partition’s queue</li>
</ul>
<h5 id="Partition-Based-T-O-PERFORMANCE-ISSUES"><a href="#Partition-Based-T-O-PERFORMANCE-ISSUES" class="headerlink" title="Partition-Based T/O - PERFORMANCE ISSUES"></a>Partition-Based T/O - PERFORMANCE ISSUES</h5><p>Partition-Based T/O is fast if:</p>
<ul>
<li>The DBMS knows what partitions the txn needs before it starts</li>
<li>Most txns only need to access a single partition</li>
</ul>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Review 11</title>
    <url>/2017/11/09/database-system-review11/</url>
    <content><![CDATA[<h2 id="Index-Concurrency-Control"><a href="#Index-Concurrency-Control" class="headerlink" title=" Index Concurrency Control"></a><center> Index Concurrency Control</center></h2><a id="more"></a>
<h3 id="Isolation-Level"><a href="#Isolation-Level" class="headerlink" title="Isolation Level"></a>Isolation Level</h3><p>Isolation High -&gt; Low</p>
<ul>
<li>serializable: no phantoms, all reads repeatable, no dirty reads; Obtain all locks first + index locks + strict 2PL</li>
<li>repeatable reads: phantoms may happen; Obtain all locks first + strict 2PL</li>
<li>read committed: phantoms and unrepeatable reads may happen; Obtain all locks first + S locks released immediately</li>
<li>read uncommitted: all of them may happen; Obtain all locks first + allows dirty reads(no S locks)</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">…</th>
<th style="text-align:center">Dirty Read</th>
<th style="text-align:center">Unrepeatable Read</th>
<th style="text-align:center">Phantom</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">serializable</td>
<td style="text-align:center">no</td>
<td style="text-align:center">no</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">repeatable read</td>
<td style="text-align:center">no</td>
<td style="text-align:center">no</td>
<td style="text-align:center">maybe</td>
</tr>
<tr>
<td style="text-align:center">read committed</td>
<td style="text-align:center">no</td>
<td style="text-align:center">maybe</td>
<td style="text-align:center">maybe</td>
</tr>
<tr>
<td style="text-align:center">read uncommitted</td>
<td style="text-align:center">maybe</td>
<td style="text-align:center">maybe</td>
<td style="text-align:center">maybe</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Lock-Crabbing"><a href="#Lock-Crabbing" class="headerlink" title="Lock Crabbing"></a>Lock Crabbing</h3><p>Protocol to allow multiple threads to access/modify B+Tree at the same time.</p>
<ul>
<li>get lock for parent</li>
<li>get lock for child</li>
<li>release lock for parent if “safe”</li>
</ul>
<p>A <strong>safe node</strong> is one that will not splict or merge when updated. Not full on insertion and more than half-full on deletion.</p>
<h4 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h4><p>Start at root and go down; repeatedly, acquire S lock on child then unlock parent.</p>
<h4 id="Insert-Delete"><a href="#Insert-Delete" class="headerlink" title="Insert/Delete"></a>Insert/Delete</h4><p>Start at root and go down, obtaining X lock as needed. Once child is locked, check if it is safe. If child is safe, release all locks on ancestors.</p>
<h3 id="Bayer-Schkolnick-algorithm"><a href="#Bayer-Schkolnick-algorithm" class="headerlink" title="Bayer Schkolnick algorithm"></a>Bayer Schkolnick algorithm</h3><p>Assume that the leaf is safe, and use S-locks &amp; crabbing to reach it, and verify. If leaf is not safe, then do previous algorithm.</p>
<h4 id="Search-1"><a href="#Search-1" class="headerlink" title="Search"></a>Search</h4><p>Same as before.</p>
<h4 id="Insert-Delete-1"><a href="#Insert-Delete-1" class="headerlink" title="Insert/Delete:"></a>Insert/Delete:</h4><p>Set locks as if for search, get to leaf and set X lock on leaf. If leaf is not safe, release all locks and restart txn using previous Insert/Delete protocol.</p>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Review 10</title>
    <url>/2017/11/08/database-system-review10/</url>
    <content><![CDATA[<h2 id="Concurrency-Control-Theory"><a href="#Concurrency-Control-Theory" class="headerlink" title=" Concurrency Control Theory"></a><center> Concurrency Control Theory</center></h2><a id="more"></a>
<h3 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h3><p>A <u>transaction</u> is the execution of a sequence of one or more operations on a shared database to perform some higher-level function.</p>
<h4 id="Strawman-System-SQLite"><a href="#Strawman-System-SQLite" class="headerlink" title="Strawman System(SQLite)"></a>Strawman System(SQLite)</h4><p>One and only one txn can be running at the same time in the DBMS. Before a txn starts, copy the entire database to a new file and make all changes to that file.</p>
<h4 id="Formal-Definitions"><a href="#Formal-Definitions" class="headerlink" title="Formal Definitions"></a>Formal Definitions</h4><p>Database: A fixed set of named data objects(A, B, C,…)</p>
<p>Transaction: A sequence of read and write operations(R(A), W(B),…)</p>
<p>In SQL:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">...</span><br><span class="line">COMMIT/ABORT</span><br></pre></td></tr></table></figure>
<h4 id="Atomicity"><a href="#Atomicity" class="headerlink" title="Atomicity"></a>Atomicity</h4><p>Execute all its actions or executes no action at all.</p>
<ul>
<li><p>Approach #1: Logging</p>
<p>  DBMS Logs all actions so that it can undo the actions of aborted txns.</p>
</li>
<li><p>Shadow Paging</p>
<p>  DBMS makes copies of pages and txns make changed to those copies. Only when the txn commits is the page made visible to others.</p>
</li>
</ul>
<h4 id="Consistency"><a href="#Consistency" class="headerlink" title="Consistency"></a>Consistency</h4><ul>
<li>Database Consistency</li>
<li>Transaction Consistency</li>
</ul>
<h4 id="Isolation"><a href="#Isolation" class="headerlink" title="Isolation"></a>Isolation</h4><p>Users submit txns and each txn executes as if it was running by itself.</p>
<p>A <u>concurrency control</u> protocol is how the DBMS decides the proper interleaving of operations from multiple transactions.</p>
<p>Two main categories:</p>
<ul>
<li>Pessimistic: Don’t let problems arise in the first place.</li>
<li>Optimistic: Assume conflicts are rare, deal with them after they happen.</li>
</ul>
<h5 id="Formal-Properties-of-Schedule"><a href="#Formal-Properties-of-Schedule" class="headerlink" title="Formal Properties of Schedule"></a>Formal Properties of Schedule</h5><ul>
<li><strong>Serial Schedule</strong>: A schedule that does not interleave the actions of different txns.</li>
<li><strong>Equivalent Schedules</strong>: The effect of executing the first schedule is identical to the effect of executing the second schedule.</li>
<li><strong>Serializable Schedule</strong>: A schedule that is equivalent to some serial execution of txns.</li>
</ul>
<h5 id="Conflicting-Operations"><a href="#Conflicting-Operations" class="headerlink" title="Conflicting Operations"></a>Conflicting Operations</h5><p>Two operations conflict if:</p>
<ul>
<li>They are by different txns</li>
<li>They are one the same object and at least one of them is a write.</li>
</ul>
<p>Three types:</p>
<ul>
<li>R-W</li>
<li>W-R</li>
<li>W-W</li>
</ul>
<h5 id="Conflict-Serializable-Schedules"><a href="#Conflict-Serializable-Schedules" class="headerlink" title="Conflict Serializable Schedules"></a>Conflict Serializable Schedules</h5><p>Conflict Serializable Schedules S is conflict equivalent to some serial schedule.</p>
<p>Ways to find out a schedule S is conflict serializable:</p>
<ul>
<li>if transform S into a serial schedule by swapping consecutive non-confliting operations of different txns.</li>
<li><p>Dependency Graphs</p>
<p>  <img src="https://github.com/Annashuo/hello-world/blob/master/dependency_graphs.png?raw=true" alt></p>
<ul>
<li>Operation $O<em>{i} \in T</em>{i}$</li>
<li>Operation $O<em>{j} \in T</em>{j}$</li>
<li>Operation $O<em>{i} $ and $ O</em>{j}$ conflicts</li>
<li><p>Operation $O<em>{i} $ early than $ O</em>{j}$ </p>
<p>Schedule S is conflict serializable if dependency graph has <strong>no cycle</strong>.</p>
</li>
</ul>
</li>
</ul>
<h5 id="View-Serializability"><a href="#View-Serializability" class="headerlink" title="View Serializability"></a>View Serializability</h5><p>Schedules $S<em>{1}$ and $S</em>{2}$ are view equivalent:</p>
<ul>
<li>if $T<em>{1}$ reads initial value of A in $S</em>{1}$, then $T<em>{1}$ also reads initial value of A in $S</em>{2}$</li>
<li>if $T<em>{1}$ reads value of A written by $T</em>{2}$ in $S<em>{1}$, then $T</em>{1}$ also reads value of A written by $T<em>{2}$ in $S</em>{2}$</li>
<li>if $T<em>{1}$ writes final value of A in $S</em>{1}$, then $T<em>{1}$ also writes final value of A in $S</em>{2}$</li>
</ul>
<h4 id="Durability"><a href="#Durability" class="headerlink" title="Durability"></a>Durability</h4><p>All of the changes of committed txns ahsould be persistent.</p>
<h3 id="Uses-locks-to-guarantee-serializable"><a href="#Uses-locks-to-guarantee-serializable" class="headerlink" title="Uses locks to guarantee serializable"></a>Uses <font style="color:red;">locks</font> to guarantee serializable</h3><h4 id="Lock-Types"><a href="#Lock-Types" class="headerlink" title="Lock Types"></a>Lock Types</h4><h5 id="Locks-and-Latches"><a href="#Locks-and-Latches" class="headerlink" title="Locks and Latches"></a>Locks and Latches</h5><ul>
<li><p>Locks</p>
<ul>
<li>Protects the index’s logical contents from other txns.</li>
<li>Held for txn duration</li>
<li>Need to be able to rollback changes.</li>
</ul>
</li>
<li><p>Latches</p>
<ul>
<li>Protects the critical sections of the index’s internal data structure from other threads</li>
<li>Held for operation duration</li>
<li>Do not need to be able to rollback changes.</li>
</ul>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">…</th>
<th style="text-align:center">Locks</th>
<th style="text-align:center">Latches</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Seperate…</td>
<td style="text-align:center">User txns</td>
<td style="text-align:center">Threads</td>
</tr>
<tr>
<td style="text-align:center">Protect…</td>
<td style="text-align:center">Database contents</td>
<td style="text-align:center">In-Memory Data Structure</td>
</tr>
<tr>
<td style="text-align:center">During…</td>
<td style="text-align:center">Entire txns</td>
<td style="text-align:center">Critical sections</td>
</tr>
<tr>
<td style="text-align:center">Modes…</td>
<td style="text-align:center">Shared, Exclusive, Update, Intention</td>
<td style="text-align:center">Read, Write</td>
</tr>
<tr>
<td style="text-align:center">Deadlock</td>
<td style="text-align:center">Detection &amp; Resolution</td>
<td style="text-align:center">Avoidance</td>
</tr>
<tr>
<td style="text-align:center">…by…</td>
<td style="text-align:center">Waits-for, Timeout, Aborts</td>
<td style="text-align:center">Coding Discipline</td>
</tr>
<tr>
<td style="text-align:center">Kept in…</td>
<td style="text-align:center">Lock Manager</td>
<td style="text-align:center">Protected Data Structure</td>
</tr>
</tbody>
</table>
</div>
<h5 id="Basic-Lock-Types"><a href="#Basic-Lock-Types" class="headerlink" title="Basic Lock Types"></a>Basic Lock Types</h5><ul>
<li>S-LOCK: Shared locks for reads</li>
<li>X-LOCK: Exclusive locks for writes</li>
</ul>
<p>Compatibility Matrix</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Shared</th>
<th style="text-align:center">Exclusive</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Shared</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">Exclusive</td>
<td style="text-align:center">no</td>
<td style="text-align:center">no</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Two-Phase-Locking"><a href="#Two-Phase-Locking" class="headerlink" title="Two-Phase Locking"></a>Two-Phase Locking</h4><p>Two-Phase Locking(2PL) is a concurrency control protocol that determines whether a txn is allowed to access an object in the database on the fly.</p>
<ul>
<li>Phase 1: Growing<ul>
<li>Each txn requests the locks that it needs from the DBMS’s lock manager</li>
<li>The lock manager grants/denies lock requests</li>
</ul>
</li>
<li>Phase 2: Shrinking<ul>
<li>The txn is allowed to only release locks that it previously acquired. It cannot acquire new locks.</li>
</ul>
</li>
</ul>
<p><strong>Two-Phase Locking on its own is sufficient to guarantee conflic serializability. But it is subject to cascading aborting.</strong></p>
<h5 id="2PL-Cascading-Aborts"><a href="#2PL-Cascading-Aborts" class="headerlink" title="2PL-Cascading Aborts"></a>2PL-Cascading Aborts</h5><p>One aborted txn may cause other txn aborts.</p>
<h5 id="Problems-about-2PL"><a href="#Problems-about-2PL" class="headerlink" title="Problems about 2PL"></a>Problems about 2PL</h5><ul>
<li>There are potential schedules that are serializable but would not be allowed by 2PL. Locking limits concurrency.</li>
<li>May still have “dirty read”-&gt;Solution: <strong>Strict 2PL</strong></li>
<li>May lead to deadlocks-&gt;Solutions: <strong>Detection</strong> of <strong>Prevention</strong></li>
</ul>
<h4 id="Strict-Two-Phase-Locking"><a href="#Strict-Two-Phase-Locking" class="headerlink" title="Strict Two-Phase Locking"></a>Strict Two-Phase Locking</h4><p>A schedule is <u>strict</u> if a value written by a txn is not read or overwritten by other txns until that txn finishes.</p>
<p>Advantages:</p>
<ul>
<li>Does not incur cascading aborts</li>
<li>Aborted txns can be undone by just restoring original values of modified tuples.</li>
</ul>
<h4 id="Deadlock-Detection-Prevention"><a href="#Deadlock-Detection-Prevention" class="headerlink" title="Deadlock Detection + Prevention"></a>Deadlock Detection + Prevention</h4><p>A <u>deadlock</u> is a cycle of transactions waiting for locks to be released by each other.</p>
<h5 id="Deadlock-Detection"><a href="#Deadlock-Detection" class="headerlink" title="Deadlock Detection"></a>Deadlock Detection</h5><p><strong>Wait-for</strong> Graph: Nodes are txns, Edge fro $T<em>{i}$ to $T</em>{j}$ if $T<em>{i}$ is waiting for $T</em>{j}$ to release a lock. Check for cycles and make a decision to break it.</p>
<p><strong>Deadlock Handling</strong>:</p>
<ul>
<li>Victim Selection(by age, by progress, by the # of items already locked, by the # of txns that we have to rollback with it), Also consider the # of times a txn has been restarted in the past.</li>
<li>Rollback Length: Completely or Minimally</li>
</ul>
<h5 id="Deadlock-Prevention"><a href="#Deadlock-Prevention" class="headerlink" title="Deadlock Prevention"></a>Deadlock Prevention</h5><p>Priority: older-&gt; higher priority.</p>
<ul>
<li><strong>Wait-Die</strong>(Old waits for Young): If $T<em>{i}$ has higher priority, $T</em>{i}$ waits for $T<em>{j}$, otherwise $T</em>{i}$ aborts</li>
<li><strong>wound-wait</strong>(Young waits for Old): If $T<em>{i}$ has higher priority, $T</em>{j}$ abort, otherwise $T_{i}$ waits.</li>
</ul>
<p><strong>When a txn restarts, its new priority is original timestamp.</strong></p>
<h4 id="Hierarchical-Locking"><a href="#Hierarchical-Locking" class="headerlink" title="Hierarchical Locking"></a>Hierarchical Locking</h4><h5 id="Intention-Locks"><a href="#Intention-Locks" class="headerlink" title="Intention Locks"></a>Intention Locks</h5><p>A <u>intention lock</u> allows a higher level node to be locked in shared or exclusive mode without having to check all descendent nodes.</p>
<ul>
<li>Intention-Shared(IS): Indicates explicit locking at a lower level with shared locks.</li>
<li>Intention-Exclusive(IX): Indicates locking at lower level with excludive or shared locks.</li>
<li>Shared+Intention-Exclusive(SIX): The subtree rooted by that node is locked explicitly in shared mode and explicit locking is being done at lower level with exclusive-mode locks. Like S and IX at the same time.</li>
</ul>
<p>Compatibility Matrix:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">…</th>
<th style="text-align:center">IS</th>
<th style="text-align:center">IX</th>
<th style="text-align:center">S</th>
<th style="text-align:center">SIX</th>
<th style="text-align:left">X</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">IS</td>
<td style="text-align:center">y</td>
<td style="text-align:center">y</td>
<td style="text-align:center">y</td>
<td style="text-align:center">y</td>
<td style="text-align:left">n  </td>
</tr>
<tr>
<td style="text-align:center">IX</td>
<td style="text-align:center">y</td>
<td style="text-align:center">y</td>
<td style="text-align:center">n</td>
<td style="text-align:center">n</td>
<td style="text-align:left">n</td>
</tr>
<tr>
<td style="text-align:center">S</td>
<td style="text-align:center">y</td>
<td style="text-align:center">n</td>
<td style="text-align:center">y</td>
<td style="text-align:center">n</td>
<td style="text-align:left">n</td>
</tr>
<tr>
<td style="text-align:center">SIX</td>
<td style="text-align:center">y</td>
<td style="text-align:center">n</td>
<td style="text-align:center">n</td>
<td style="text-align:center">n</td>
<td style="text-align:left">n</td>
</tr>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">n</td>
<td style="text-align:center">n</td>
<td style="text-align:center">n</td>
<td style="text-align:center">n</td>
<td style="text-align:left">n</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Review 09</title>
    <url>/2017/11/07/database-system-review09/</url>
    <content><![CDATA[<h2 id="Embedded-Database-Logic"><a href="#Embedded-Database-Logic" class="headerlink" title=" Embedded Database Logic"></a><center> Embedded Database Logic</center></h2><h3 id="User-defined-Functions-UDF"><a href="#User-defined-Functions-UDF" class="headerlink" title="User-defined Functions(UDF)"></a>User-defined Functions(UDF)</h3><ul>
<li>Return Types:<ul>
<li>Scalar Functions: return a single data value.</li>
<li>Table Functions: return a single result table.</li>
</ul>
</li>
<li><p>Computation Definition:</p>
<ul>
<li><p>SQL functions</p>
<p>eg.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION get_foo(int)</span><br><span class="line">					RETURNS foo AS $$</span><br><span class="line">	SELECT * FROM foo WHERE foo.id = $1;</span><br><span class="line">$$ LANGUAGE SQL;</span><br></pre></td></tr></table></figure>
</li>
<li><p>External programming language</p>
</li>
</ul>
</li>
</ul>
<h3 id="Storage-Procesures"><a href="#Storage-Procesures" class="headerlink" title="Storage Procesures"></a>Storage Procesures</h3><p>A <u>storage procedure</u> is a self-contained function that performs more complex logic inside of the DBMS.</p>
<ul>
<li>Can have many input/output parameters</li>
<li>Can modify the database table/structures</li>
<li>Not normally used with a SQL query</li>
</ul>
<h4 id="Storage-proceduce-vs-UDF"><a href="#Storage-proceduce-vs-UDF" class="headerlink" title="Storage proceduce vs. UDF"></a>Storage proceduce vs. UDF</h4><ul>
<li>A UDF is meant to perform a subset ofread-only computation with a query.</li>
<li>A storage proceduce is meant to perform a complete computation that is independent of a query. </li>
</ul>
<h3 id="Triggers"><a href="#Triggers" class="headerlink" title="Triggers"></a>Triggers</h3><p>A <u>trigger</u> instruct the DBMS to invoke a UDF when some event occurs in the database.</p>
<p>It contains:</p>
<ul>
<li><p>What type of event will cause it to fire</p>
<p>  INSERT, UPDATE, DELETE, TRUNCATE, CREATE, ALTER, DROP</p>
</li>
<li><p>The scope of the event</p>
<p>  TABLE, DATABASE, VIEW, SYSTEM</p>
</li>
<li><p>When it fires relative to that event</p>
<ul>
<li>Before the statement executes</li>
<li>After the statement executes</li>
<li>Before each row that the statement affects</li>
<li>After each row that the statement affects</li>
<li>Instead of the statement</li>
</ul>
</li>
</ul>
<h3 id="Change-Notifications"><a href="#Change-Notifications" class="headerlink" title="Change Notifications"></a>Change Notifications</h3><p>A <u>change notification</u> is like a trigger except that the DBMS send a message to an external entity that something notable has happened in the database.</p>
<h3 id="User-defined-Types"><a href="#User-defined-Types" class="headerlink" title="User-defined Types"></a>User-defined Types</h3><p>A <u>user-defined type</u> is a special data type that ts defined by the application developer that the DBMS can stored natively.</p>
<h3 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h3><p>Creates a “virtual” table containing the output from a SELECT query.</p>
<p>Mechanism for hiding data from view of certain users.</p>
<p>Can be used to simplify a complex query that is executed often but won’t make it faster though.</p>
<h4 id="VIEW-vs-SELECT-INTO"><a href="#VIEW-vs-SELECT-INTO" class="headerlink" title="VIEW vs. SELECT INTO"></a>VIEW vs. SELECT INTO</h4><ul>
<li>VIEW: dynamic results are only materialized when needed.</li>
<li>SELECT…INTO: creates static table that does not get updated when original table gets updated.</li>
</ul>
<h4 id="Materialized-View"><a href="#Materialized-View" class="headerlink" title="Materialized View"></a>Materialized View</h4><p>Creates a view containing the output from a SELECT query that is automatically updated when the underlying tables change.</p>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Review 08</title>
    <url>/2017/11/07/database-system-review08/</url>
    <content><![CDATA[<h2 id="Parallel-Execution"><a href="#Parallel-Execution" class="headerlink" title=" Parallel Execution "></a><center> Parallel Execution </center></h2><a id="more"></a>
<h3 id="Parallel-vs-Distributed"><a href="#Parallel-vs-Distributed" class="headerlink" title="Parallel vs. Distributed"></a>Parallel vs. Distributed</h3><ul>
<li>Parallel DBMSs:<ul>
<li>Nodes are physically close to each other.</li>
<li>Nodes connected with high-speed LAN.</li>
<li>Communication cost is assumed to be small</li>
</ul>
</li>
<li>Distributed DBMSs:<ul>
<li>Nodes can be far from each other</li>
<li>Nodes connected using public network</li>
<li>Communication cost and problems cannot be ignored.</li>
</ul>
</li>
</ul>
<h3 id="Inter-vs-Intra-Query-Parallelism"><a href="#Inter-vs-Intra-Query-Parallelism" class="headerlink" title="Inter- vs. Intra-Query Parallelism"></a>Inter- vs. Intra-Query Parallelism</h3><ul>
<li>Inter-Query: different queries are executed concurrently. Increases throughput and reduces latency.</li>
<li>Intra-Query: execute the operations of a single query in parallel. Decreases latency for long-running queries.</li>
</ul>
<h3 id="Process-Model"><a href="#Process-Model" class="headerlink" title="Process Model"></a>Process Model</h3><p>A DBMS’s <u>process model</u> defines how the system is architected to support concurrent requests from a multi-user application.</p>
<p>A <u>worker</u> is the DBMS component that is responsible form executing tacks on behalf of the client and returning the results.</p>
<ul>
<li>Approach #1: Process per DBMSs worker</li>
<li>Approach #2: Process Pool</li>
<li>Approach #3: Thread per DBMS worker</li>
</ul>
<h4 id="Process-per-DBMSs-worker"><a href="#Process-per-DBMSs-worker" class="headerlink" title="Process per DBMSs worker"></a>Process per DBMSs worker</h4><p>Each worker is a seperate OS process.</p>
<ul>
<li>Relies on OS scheduler</li>
<li>Use shared-memory for global data structures</li>
<li>A process crash doesn’t take down entire system</li>
</ul>
<h4 id="Process-Pool"><a href="#Process-Pool" class="headerlink" title="Process Pool"></a>Process Pool</h4><p>A worker use any process that is free in a pool.</p>
<ul>
<li>Relies on OS scheduler</li>
<li>Use shared-memory for global data structures</li>
<li>Bad for CPU cache locality</li>
</ul>
<h4 id="Thread-per-worker"><a href="#Thread-per-worker" class="headerlink" title="Thread per worker"></a>Thread per worker</h4><p>Single process with multiple worker thread.</p>
<ul>
<li>DBMS has to manage its own scheduling</li>
<li>May or may not use a dispatcher thread</li>
<li>Thread crash (may) kill the entire system.</li>
</ul>
<p>Advantages:</p>
<ul>
<li>Less overhead per context switch</li>
<li>Don’t have to manage shared memory</li>
</ul>
<p>Thread per worker process model is not equal to intra-query parallelism</p>
<h3 id="Inter-Query-Parallelism"><a href="#Inter-Query-Parallelism" class="headerlink" title="Inter-Query Parallelism"></a>Inter-Query Parallelism</h3><p>Procide the illusion of isolation through <u>concurrency control</u> scheme.</p>
<h3 id="Intra-Query-Parallelism"><a href="#Intra-Query-Parallelism" class="headerlink" title="Intra-Query Parallelism"></a>Intra-Query Parallelism</h3><p>Execute operators in parallel, improve performance of a single query.</p>
<ul>
<li><p>Approach #1: Intra-Operator: </p>
<p>  Operators are decomposed into independent instances that perform the same function on different subsets of data.</p>
</li>
<li><p>Approach #2: Inter-Operator(pipeline parallelism)</p>
<p>  Operations are overlapped in order to pipeline data from one stage to the next without materialization.</p>
</li>
</ul>
<h3 id="I-O-Parallelism"><a href="#I-O-Parallelism" class="headerlink" title="I/O Parallelism"></a>I/O Parallelism</h3><p>Split the DBMS installation across multiple storage devides.</p>
<ul>
<li>Multiple Disks per Database</li>
<li>One Database per Disk</li>
<li>One Relation per Disk</li>
<li>Split Relation across Multiple Disk</li>
</ul>
<h4 id="Multi-disk-parallelism"><a href="#Multi-disk-parallelism" class="headerlink" title="Multi-disk parallelism"></a>Multi-disk parallelism</h4><p>Configure OS/hardware to staore the DBMS’s files across multiple storage devices.</p>
<ul>
<li>Storage Appliances</li>
<li>RAID Configuration</li>
</ul>
<h4 id="Database-Partitioning"><a href="#Database-Partitioning" class="headerlink" title="Database Partitioning"></a>Database Partitioning</h4><p>Some DBMSs allow you to specify the disk location of each individual database. Using buffer pool manager maps a page to a disk location.</p>
<h4 id="Partitioning"><a href="#Partitioning" class="headerlink" title="Partitioning"></a>Partitioning</h4><p>Split single logical table into disjoint physical segments that are stored/managed separated.</p>
<h5 id="Vertical-Partitioning"><a href="#Vertical-Partitioning" class="headerlink" title="Vertical Partitioning"></a>Vertical Partitioning</h5><p>Store a table’s attributes in a seperate location. Have to store tuple info to recontruct the original record.</p>
<h5 id="Horizontal-Partitioning"><a href="#Horizontal-Partitioning" class="headerlink" title="Horizontal Partitioning"></a>Horizontal Partitioning</h5><p>Divide the tuples of a table up into disjoint segments based on some partitioning key.</p>
<ul>
<li>Hash Partitioning </li>
<li>Range Partitioning </li>
<li>Predicate Partitioning </li>
</ul>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Review 07</title>
    <url>/2017/11/06/database-system-review07/</url>
    <content><![CDATA[<h3 id="Query-Optimization"><a href="#Query-Optimization" class="headerlink" title="Query Optimization"></a>Query Optimization</h3><ul>
<li>Heuristics / Rules<ul>
<li>Rewrite the query to remove stupid / inefficient things</li>
<li>Does not require a cost model</li>
</ul>
</li>
<li>Cose-based search<ul>
<li>Use a cost model to evaluate multiple equivalent plans and pick the one with the lowest cost.</li>
</ul>
</li>
</ul>
<h4 id="Relational-algebra-equivalences-query-rewriting"><a href="#Relational-algebra-equivalences-query-rewriting" class="headerlink" title="Relational algebra equivalences (query rewriting)"></a>Relational algebra equivalences (query rewriting)</h4><ul>
<li>Selections:<ul>
<li>Perform filter as early as possible</li>
<li>Break a complex predicate and push down</li>
</ul>
</li>
<li>Projections:<ul>
<li>Perform them early to create smaller tuples and reduce intermediate results</li>
<li>Project out all attributes except the ones requested or required</li>
</ul>
</li>
</ul>
<h4 id="Cost-Estimation"><a href="#Cost-Estimation" class="headerlink" title="Cost Estimation"></a>Cost Estimation</h4><ul>
<li>$N_{R}$:  # tuples</li>
<li>$V(A,R)$: # of distinct values of attribute A</li>
<li>Selection cardinality $SC(A,R)$: average number of records with a value for an attribute A given $N_{R}/V(A,R)$</li>
<li>selectivity(<font style="color:red">sel</font>) of a predicate P is the fraction of tuples that qualify</li>
</ul>
<h5 id="Complex-Predicates"><a href="#Complex-Predicates" class="headerlink" title="Complex Predicates"></a>Complex Predicates</h5><ul>
<li>Equality Predicate: $A=constant \rightarrow sel(A=constant) = SC(P)\ /\ V(A,R)$</li>
<li>Range: $sel(A&gt;=a) = (A<em>{max}-a)/(A</em>{max}-A_{min})$</li>
<li>Negation Query: $sel(not\ P) = 1\ -\ sel(P)$</li>
<li>Conjunction: $sel(P1\ \wedge \ p2) = sel(P1)\ \cdot \ sel(P2)$</li>
<li>Disjunction: $sel(P1\ \vee \ p2) = sel(P1)+sel(P2)-sel(P1\ \wedge \ p2)$</li>
</ul>
<h5 id="Result-size-estimation-form-joins"><a href="#Result-size-estimation-form-joins" class="headerlink" title="Result size estimation form joins"></a>Result size estimation form joins</h5><p>$R<em>{cols}\cap S</em>{cols}={A}$<br>$estSize \approx N<em>{R} \cdot N</em>{S}\ /\ max({V(A,S), V(A,R)})$</p>
<p>…to be continue…<br>Query Optimization is really hard…</p>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Review 06</title>
    <url>/2017/10/10/database-system-review06/</url>
    <content><![CDATA[<p>This post contains a couple of frequently used relational operators.</p>
<a id="more"></a>
<h3 id="Sorting-algorithms"><a href="#Sorting-algorithms" class="headerlink" title="Sorting algorithms"></a>Sorting algorithms</h3><h4 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h4><ol>
<li>In relational model, tuple in a table have no specific order</li>
<li><p>SELECT … ORDER BY</p>
<ul>
<li>Users often want to retrieve tuples in a specific order</li>
<li>Trivial to support duplicate elimination(DISTINCT)</li>
<li>Bulk loading sorted tuples into B+ tree index is faster</li>
</ul>
</li>
<li><p>SELECT … GROUP BY -&gt; sort-merge join algorithm</p>
</li>
</ol>
<h4 id="Based-on-memory"><a href="#Based-on-memory" class="headerlink" title="Based on memory"></a>Based on memory</h4><p>If data fits in memory, use standard sorting algorithm like <strong>quick sort</strong></p>
<p>If data does not fit in memory, use <strong>external sorting</strong>, <strong>B+ TREE index</strong></p>
<h4 id="External-merge-sort"><a href="#External-merge-sort" class="headerlink" title="External merge sort"></a>External merge sort</h4><p>Frequently used external sorting algorithm</p>
<p>Idea: Hybird <strong>sort-marge</strong> strategy</p>
<ul>
<li>Sorting phase: sort small chunks of data that in main-memory, and then write back the sorted data to a file on disk</li>
<li>Merge phase: combine sorted sub-files into a single larger file</li>
</ul>
<h5 id="2-way-External-Merge-Sort"><a href="#2-way-External-Merge-Sort" class="headerlink" title="2-way External Merge Sort"></a>2-way External Merge Sort</h5><p>Assuming files are broken up into <font style="color:red">N</font> pages. The DBMS has a finite number of <font style="color:red">B</font> fixed-size buffers.</p>
<p>Pass 0: </p>
<ul>
<li>Reads every B pages of the tables into memory</li>
<li>Sort them and write them back to disk</li>
<li>Each sorted set of pages is a <font style="color:red">run</font></li>
</ul>
<p>Pass 1,2,3,…:</p>
<ul>
<li>Recursively merges pairs of runs into runs twice as long</li>
<li>Uses three buffer pages(two for input, one for output)</li>
</ul>
<p>Number of passes = <font style="color:red">$1+\left \lceil log_{2}N \right \rceil$</font></p>
<p>Total I/O cost = <font style="color:red">$2N * (#\ of\ passes)$</font></p>
<p>This algorithm only requeries 3 buffer pages, buffer pages utilization is pretty low.</p>
<h5 id="General-External-Merge-Sort-K-way-external-merge-sort"><a href="#General-External-Merge-Sort-K-way-external-merge-sort" class="headerlink" title="General External Merge Sort(K-way external merge sort)"></a>General External Merge Sort(K-way external merge sort)</h5><p>Pass 0: use <font style="color:red">B</font> buffer pages, produce <font style="color:red">$\left \lceil N/B \right \rceil$</font> sorted runs of size B</p>
<p>Pass 1,2,3,…: merge <font style="color:red">B-1</font> runs(K-way merge)</p>
<p>Number of passes = <font style="color:red">$1+\left \lceil log_{B-1}\left \lceil N/B \right \rceil \right \rceil$</font></p>
<p>Total I/O cost = <font style="color:red">$2N * (#\ of\ passes)$</font></p>
<h6 id="K-way-merge-algorithm"><a href="#K-way-merge-algorithm" class="headerlink" title="K-way merge algorithm"></a>K-way merge algorithm</h6><p>Input: K sorted sub-arrays </p>
<p>Efficiently computes the <strong>minimum element</strong> of K sub-arrays</p>
<p>Repeatedly transfers that element to output array.</p>
<p>Internally maintains a heap to efficiently compute minimum element.</p>
<p>Time Complexity = <font style="color:red">$O(N\ log_{2}K)$</font></p>
<h4 id="Using-B-Tree"><a href="#Using-B-Tree" class="headerlink" title="Using B+ Tree"></a>Using B+ Tree</h4><p>If table that must be sorted already has a B+ tree index on the sorted attribute(s)</p>
<p>Idea: Retrieve tuples in desired sorted order by simply traversing the leaf pages of the tree</p>
<p>Cases to consider:</p>
<ul>
<li>Clustered B+ tree: traverse to the left-most leaf page and then retrieve tuples from all leaf pages. <strong>better than external sorting</strong></li>
<li>Unclustered B+ tree: Chase each pointer to the page that contains the data. Generally one I/O per data record.<strong>Bad!</strong></li>
</ul>
<h4 id="Alternatives-to-sorting"><a href="#Alternatives-to-sorting" class="headerlink" title="Alternatives to sorting"></a>Alternatives to sorting</h4><p>GROUP BY: may no need to be sorted</p>
<p>DISTINCT: use hashing to remove duplicates without ordering, computationally cheaper than sorting.</p>
<h3 id="JOIN-algorithms"><a href="#JOIN-algorithms" class="headerlink" title="JOIN algorithms"></a>JOIN algorithms</h3><h4 id="WHY-1"><a href="#WHY-1" class="headerlink" title="WHY"></a>WHY</h4><ol>
<li><p>In relational model</p>
<ul>
<li>unnecessary repetition of information must be avoided</li>
<li>decompose tables using normalization theory</li>
</ul>
</li>
<li><p>SELECT … JOIN</p>
<ul>
<li>Reconstruct original tables via joins</li>
<li>No information loss</li>
</ul>
</li>
</ol>
<h4 id="Join-algorithms"><a href="#Join-algorithms" class="headerlink" title="Join algorithms"></a>Join algorithms</h4><ul>
<li>Nested Loop Join<ul>
<li>Simple Nested Loop Join</li>
<li>Block Nested Loop Join</li>
<li>Index Nested Loop Join</li>
</ul>
</li>
<li>Sort-Merge Join</li>
<li>Hash Join</li>
</ul>
<h4 id="Join-operator-output"><a href="#Join-operator-output" class="headerlink" title="Join operator output"></a>Join operator output</h4><ul>
<li>data: copy values for the attributes in outer and inner tuples into a new output tuple. subsequent operators in the query plan never need to go back to the base tables to get more data.</li>
<li>record id: only copy the joins keys along with the record ids of the matching tuples. Ideal for column stores because the DBMS does not copy data that is not need for the query(also called <strong>materialization</strong>)</li>
</ul>
<h4 id="I-O-cost-algorithm"><a href="#I-O-cost-algorithm" class="headerlink" title="I/O cost algorithm"></a>I/O cost algorithm</h4><p>Assume</p>
<ul>
<li><font style="color:red">M</font> pages in R, <font style="color:red">$p_{R}$</font> tuples per page, <font style="color:red">m</font> tuples total</li>
<li><font style="color:red">N</font> pages in S, <font style="color:red">$p_{S}$</font> tuples per page, <font style="color:red">n</font> tuples total</li>
</ul>
<p>Ignore output cost: <font style="color:red">Cost metric = # of I/Os</font></p>
<h4 id="Nested-Loop-Join"><a href="#Nested-Loop-Join" class="headerlink" title="Nested Loop Join"></a>Nested Loop Join</h4><h5 id="Simple-Nested-Loop-Join"><a href="#Simple-Nested-Loop-Join" class="headerlink" title="Simple Nested Loop Join"></a>Simple Nested Loop Join</h5><p>2 buffers for steaming the tables and 1 for storing output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foreach tuple of R(outer table)</span><br><span class="line">	foreach tuple of S(inner table)</span><br><span class="line">		output, if r and s match</span><br></pre></td></tr></table></figure>
<font style="color:red">Cost = M + (m*N)</font>

<h5 id="Block-Nested-Loop-Join"><a href="#Block-Nested-Loop-Join" class="headerlink" title="Block Nested Loop Join"></a>Block Nested Loop Join</h5><p>The small table (in terms of # of pages) should be outer.(in this example, M&lt;N)</p>
<ul>
<li><p>if buffer = 3(2 for input, 1 for output),</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">read block from R</span><br><span class="line">	read block from S</span><br><span class="line">		output, if pair of tuples match</span><br></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>&lt;font style=&quot;color:red&quot;&gt;Cost = M + (M*N)&lt;/font&gt;
</code></pre><ul>
<li><p>if buffer B &lt; M + 2,</p>
<p>  Use <font style="color:red">B-2</font> buffers for scaning outer table, 1 buffer to scanning inner table, 1 for storing output</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">read B-2 blocks from R</span><br><span class="line">	read block from S</span><br><span class="line">		output, if a pair of tuples match</span><br></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>&lt;font style=&quot;color:red&quot;&gt;$Cost = M + (\left \lceil M/(B-2) \right \rceil *N)$&lt;/font&gt;
</code></pre><ul>
<li><p>if buffer B &gt;= M + 2</p>
  <font style="color:red">Cost = M + N</font>

</li>
</ul>
<h5 id="Index-Nested-Loop-Join"><a href="#Index-Nested-Loop-Join" class="headerlink" title="Index Nested Loop Join"></a>Index Nested Loop Join</h5><p>Use an index to find <strong>inner table matches</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foreach tuple r of R</span><br><span class="line">	foreach tuple s of S, where ri = sj</span><br><span class="line">		output, if ri and sj match</span><br></pre></td></tr></table></figure>
<font style="color:red">Cost = M + (m*C)</font> (C is index look-up cost)

##### Nested Loop Join SUMMARY

- Pick the small table as outer table
- Buffer as much of outer table in memory as possible
- Loop over the inner table or use an index

#### Sort-Merge Join

- Sort Phase: sort **both** tables on the join attribute
- Merge Phase: scan the two sorted tables in parallel and emit matching tuples.

Useful when one or both tables are already sorted or output must be sorted on join key

<font style="color:red">Cost = [(2M\*logM/logB) + (2N*logN/logB)] + [M+N]</font>

<h4 id="Hash-Join"><a href="#Hash-Join" class="headerlink" title="Hash Join"></a>Hash Join</h4><p>Partitioning Phase:Read and Write both tables. <font style="color:red">Cost = 2(M+N)</font></p>
<p>Probing Phase:Read tables. <font style="color:red">Cost = (M+N)</font></p>
<p>Total: <font style="color:red">Cost = 3(M+N)</font></p>
<h5 id="Basic-hash-join-algorithm"><a href="#Basic-hash-join-algorithm" class="headerlink" title="Basic hash join algorithm"></a>Basic hash join algorithm</h5><ul>
<li><p>Phase #1: Build</p>
<p>  Scan the outer relation and populate a hash table using hash function $h_{1}$ on the join attributes</p>
</li>
<li><p>Phase #2: Probe</p>
<p>  Scan the inner relation and use $h_{1}$ on each tuple to jump to a location in the hash table and find a matching tuple</p>
</li>
</ul>
<p>build hash table H for R&lt;/br&gt;<br>foreach tuple s of S&lt;/br&gt;<br>    output, if $H<em>{1}(s</em>{j}) \in HT(R)$ </p>
<h5 id="Hash-table-values"><a href="#Hash-table-values" class="headerlink" title="Hash table values"></a>Hash table values</h5><ul>
<li><p>Approach 1: Full tuple</p>
<ul>
<li>Avoid having to retrieve the outer relation’s tuple contents on a match</li>
<li>Takes up more space in memory</li>
</ul>
</li>
<li><p>Approach 2: Tuple identifier</p>
<ul>
<li>Ideal for column stores because the DBMS doesn’t fetch no need data from disk </li>
<li>Better if join selectivity is slow</li>
</ul>
</li>
</ul>
<h5 id="Grace-Hash-Join"><a href="#Grace-Hash-Join" class="headerlink" title="Grace Hash Join"></a>Grace Hash Join</h5><p>When no enough memory to fit the entire hash table</p>
<ul>
<li><p>Phase #1: Build</p>
<p>  Hash both tables on the join attribute into partitions</p>
</li>
<li><p>Phase #2: Probe</p>
<p>  Compares tuples in corresponding partitions for each table</p>
</li>
</ul>
<p>If buckets don’t fit in memory, use <strong>recursive partitioning</strong>, build another hash table for buckets using hash function $h<em>{2}$($h</em>{1}\not= h_{2}$)</p>
<h4 id="JOIN-SUMMARY"><a href="#JOIN-SUMMARY" class="headerlink" title="JOIN SUMMARY"></a>JOIN SUMMARY</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Join algorithm</th>
<th style="text-align:center">I/O cost </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Simple Nested Loop Join</td>
<td style="text-align:center">M+(m*N)</td>
</tr>
<tr>
<td style="text-align:center">Block Nested Loop Join</td>
<td style="text-align:center">M+(M*N)</td>
</tr>
<tr>
<td style="text-align:center">Index Nested Loop Join</td>
<td style="text-align:center">M+(m*logN)</td>
</tr>
<tr>
<td style="text-align:center">Sort Merge Join</td>
<td style="text-align:center">M+N+(sort cost)</td>
</tr>
<tr>
<td style="text-align:center">Hash Join</td>
<td style="text-align:center">3(M+N)</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Review 05</title>
    <url>/2017/10/10/database-system-review05/</url>
    <content><![CDATA[<p>Query processing includes processing models, access models and expression evaluation</p>
<a id="more"></a>
<h3 id="Query-plan"><a href="#Query-plan" class="headerlink" title="Query plan"></a>Query plan</h3><p>The operators are arranged in a tree. Data flows from the leaves toward the root.</p>
<h3 id="Processing-Methods"><a href="#Processing-Methods" class="headerlink" title="Processing Methods"></a>Processing Methods</h3><p>A DBMS’s processing model defines how the system executes a query plan.</p>
<p>Three approaches:</p>
<ul>
<li>Iterator Model</li>
<li>Materialization Model</li>
<li>Vectorized / Batch Model</li>
</ul>
<h4 id="Iterator-Model-Volcano-Model-—-Top-down-plan-processing"><a href="#Iterator-Model-Volcano-Model-—-Top-down-plan-processing" class="headerlink" title="Iterator Model(Volcano Model) — Top-down plan processing"></a>Iterator Model(Volcano Model) — Top-down plan processing</h4><p>Each query plan operator implements a next function.</p>
<ul>
<li>On each invocation, the operator returns either a singke tuple or a null marker if there are no more tuples</li>
<li>The operator implements a loop that calls next on its children to retrieve their tuples and then process them.</li>
</ul>
<p>This allows for tuple pipelining. Some operators will block until children emit all of their tuples.</p>
<h4 id="Materialization-Model-—-Bottom-up-plan-processing"><a href="#Materialization-Model-—-Bottom-up-plan-processing" class="headerlink" title="Materialization Model — Bottom-up plan processing"></a>Materialization Model — Bottom-up plan processing</h4><p>Each operator processes its input all at once and tehn emits its output all at once.</p>
<ul>
<li>The operator “materializes” it output as a single result.</li>
<li>The DBMS can push down hints into avoid scanning too many tuples.</li>
</ul>
<p>Better for PLTP workloads because queries typically only access a small number of tuples at a time.</p>
<ul>
<li>Lower execution / coordination overhead.</li>
<li>More difficult to parallelize.</li>
</ul>
<p>No good for OLAP queries with large intermediate result.</p>
<h4 id="Vectorization-Model"><a href="#Vectorization-Model" class="headerlink" title="Vectorization Model"></a>Vectorization Model</h4><p>Like Interator Model, each operator implements a next function</p>
<p>Each operator emits a <u>batch</u> of tuples instead of a single tuple.</p>
<ul>
<li>The operator’s internal loop processes multiole tuples at a time.</li>
<li>The size of batch can vary based on hardware or query properties.</li>
</ul>
<p>Ideal for OLAP queries</p>
<ul>
<li>Greatly reduces the number of invocations per operator</li>
<li>Allows dor operators to use vectorized(SIMD) instructions to process batches of tuples.</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Processing Model</th>
<th style="text-align:center">Iterator</th>
<th style="text-align:center">Materialization</th>
<th style="text-align:left">Vectorized</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Direction</td>
<td style="text-align:center">Top-Down</td>
<td style="text-align:center">Bottom-Top</td>
<td style="text-align:left">Top-Down</td>
</tr>
<tr>
<td style="text-align:center">Emits</td>
<td style="text-align:center">Single Tuple</td>
<td style="text-align:center">Entire Tuple Set</td>
<td style="text-align:left">Tuple Batch</td>
</tr>
<tr>
<td style="text-align:center">Target</td>
<td style="text-align:center">General Purpose</td>
<td style="text-align:center">OLTP</td>
<td style="text-align:left">OLAP</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Acess-Method"><a href="#Acess-Method" class="headerlink" title="Acess Method"></a>Acess Method</h3><p>A access method is a way that the DBMS can access the data stored in a table.(Not defined in relational algebra)</p>
<p>Three basic approaches:</p>
<ul>
<li>Sequential Scan</li>
<li>Index Scan</li>
<li>Multi-Index / “Bitmap” Scan</li>
</ul>
<h4 id="Sequential-Scan"><a href="#Sequential-Scan" class="headerlink" title="Sequential Scan"></a>Sequential Scan</h4><p>For each page in the table:</p>
<ul>
<li>Retrive it from the buffer pool.</li>
<li>Iterate over each tuple and check whether to include it</li>
</ul>
<p>The DBMS maintain an internal <strong>cursor</strong> that tracks the last page / slot it examined.</p>
<p>Sequential Scan Optimizations:</p>
<ul>
<li>Prefetching</li>
<li>Paralleization</li>
<li>Zone Maps</li>
<li>Buffer POll Bypass</li>
<li>Heap Clustering</li>
</ul>
<h5 id="Zone-Maps"><a href="#Zone-Maps" class="headerlink" title="Zone Maps"></a>Zone Maps</h5><p>Pre-computed aggregates(like min, max, avg, sum, count) for the attribute values in a page.</p>
<p>DBMS can check the zone map first to decide whether it wants to access the page.</p>
<h5 id="Buffer-Pool-Bypass-Light-Scan"><a href="#Buffer-Pool-Bypass-Light-Scan" class="headerlink" title="Buffer Pool Bypass(Light Scan)"></a>Buffer Pool Bypass(Light Scan)</h5><p>The sequential scan operator will not store fetched pages in the buffer pool to avoid overhead.</p>
<ul>
<li>Memory is local to running query.</li>
<li>Works well if operator need to read a large sequence of pages that are contiguous on disk.</li>
</ul>
<h5 id="Heap-Clustering"><a href="#Heap-Clustering" class="headerlink" title="Heap Clustering"></a>Heap Clustering</h5><p>Tuple are sorted in the heap’s pages using the order specified by a clustering index.</p>
<p>If the query accesses tuples using the clustering index’s attributes, then the DBMS can jump directly to the pages that it needs.</p>
<h4 id="Index-Scan"><a href="#Index-Scan" class="headerlink" title="Index Scan"></a>Index Scan</h4><p>The DBMS picks an index to find the tuples that the query needs.</p>
<p>Which index to use depends on:</p>
<ul>
<li>What attributes the index contains</li>
<li>What attributes the query references</li>
<li>The attributes’s value domains</li>
<li>Predicate composition</li>
<li>Whether the index has unique or non-uninque keys</li>
</ul>
<h4 id="Multi-index-Scan-Bitmap-Scan-in-PostgreSQL"><a href="#Multi-index-Scan-Bitmap-Scan-in-PostgreSQL" class="headerlink" title="Multi-index Scan(Bitmap Scan in PostgreSQL)"></a>Multi-index Scan(Bitmap Scan in PostgreSQL)</h4><p>If there are multiple indexs that the DBMS can use for a query:</p>
<ul>
<li>Compute sets of record ids using each matching index</li>
<li>Combine these sets bases on the query’s predicates(union vs. intersect)</li>
<li>Retrieve the record and apply any remaining terms</li>
</ul>
<h5 id="Index-Scan-Page-Sorting"><a href="#Index-Scan-Page-Sorting" class="headerlink" title="Index Scan Page Sorting"></a>Index Scan Page Sorting</h5><p>Retrieve tuples in the order that appear in an unclustered index is inefficient.</p>
<p>The DBMS can first figure out all the tuples that it needs and then sort them based on their page id.</p>
<h3 id="Expression-Evaluation"><a href="#Expression-Evaluation" class="headerlink" title="Expression Evaluation"></a>Expression Evaluation</h3><p>The DBMS represents a WHERE clause as an expression tree.</p>
<p>The nodes in the tree represent different expression types:</p>
<ul>
<li>Comparisons(=,&lt;,&gt;,!=)</li>
<li>Conjunction(AND), Disjunction(OR)</li>
<li>Arithmetic Operators(+,-,*,/,%)</li>
<li>Constant Values</li>
<li>Tuple Attribute References</li>
</ul>
<p>Expression Tree is slow because the DBMS traverses the tree and for each node that it visits it has to figure out what the operator needs to do.</p>
<p>Better approach is to just evaluate the expression directlt(JIT compilation)</p>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Review 04</title>
    <url>/2017/09/26/database-system-review04/</url>
    <content><![CDATA[<p>We are now going to talk about how to support the DBMS’s execution engine to read/write data from pages.</p>
<p>Two types of data structures:</p>
<ul>
<li>Hash tables</li>
<li>Trees</li>
</ul>
<a id="more"></a>
<h3 id="Data-structures"><a href="#Data-structures" class="headerlink" title="Data structures"></a>Data structures</h3><ul>
<li>Internal meta-data</li>
<li>Core data storage</li>
<li>Temporary data structures</li>
<li>Table indexes</li>
</ul>
<h4 id="Table-index"><a href="#Table-index" class="headerlink" title="Table index"></a>Table index</h4><p>A <u>table index</u> is a replica of a subset of a table’s columns that are organized and/or sorted for efficient access using a subset of those columns.</p>
<p>Trade-off on the number of indexes to create per database</p>
<ul>
<li>Storage Overhead</li>
<li>Maintenance Overhead</li>
</ul>
<h3 id="Design-decisions"><a href="#Design-decisions" class="headerlink" title="Design decisions"></a>Design decisions</h3><ul>
<li>Data Organization: how to layout memory and what information to store inside of the data structure to support efficient access.</li>
<li>Concurrency: how to enable multiple threads to access the data structure at the same time without causing problems.</li>
</ul>
<h3 id="Hash-Tables"><a href="#Hash-Tables" class="headerlink" title="Hash Tables"></a>Hash Tables</h3><p>A <u>hash table</u> implements an associative array abstract data type that maps keys to values.</p>
<h4 id="Static-hash-table"><a href="#Static-hash-table" class="headerlink" title="Static hash table"></a>Static hash table</h4><p>Allocate a giant array that has one slot for <u>every</u> element that you need to record.</p>
<p>Requirement:</p>
<ul>
<li>know the number of elemts ahead of time</li>
<li>each key is unique</li>
<li>perfect hash function: $key1 \neq  key2 \Rightarrow hash(key1) \neq hash(key2)$ </li>
</ul>
<h5 id="Chained-hashing"><a href="#Chained-hashing" class="headerlink" title="Chained hashing"></a>Chained hashing</h5><p>Maintain a linked list of <u>buckets</u> for each slot in the hash table.</p>
<p>Resolve collisions by placing all elements with the same hash key into the same bucket</p>
<font style="color:red">Insertion, deletion and lookup are all hash to its bucket and scan for it, depending on the bucket size.</font>

<p><img src="https://github.com/Annashuo/hello-world/blob/master/chained-hash.png?raw=true" alt></p>
<p>The hash table can grow infinitely because you just keep adding new buckets to the linked list.</p>
<p>When store a new entry or extend the linked list, just take a latch on the bucket.</p>
<h6 id="Non-unique-keys"><a href="#Non-unique-keys" class="headerlink" title="Non-unique keys"></a>Non-unique keys</h6><ul>
<li>Choice #1: <strong>Seperate Linked List</strong>, store values in seperate storage area for each key.</li>
<li>Choice #2: <strong>Store in Bucket</strong>, store dulicate keys entries in the same bucket.</li>
</ul>
<p><img src="https://github.com/Annashuo/hello-world/blob/master/non-unique-keys.png?raw=true" alt></p>
<h5 id="Open-addressing-Hashing"><a href="#Open-addressing-Hashing" class="headerlink" title="Open-addressing Hashing"></a>Open-addressing Hashing</h5><p>Single gaint table of slots.</p>
<p>Resolve collisions by linearly searching for the next free slot in the table.</p>
<font style="color:red">Insertion, deletion and lookup are all hash to its bucket and scan for it, depending on the bucket size. But has to store the key in the index to know when to stop scanning.</font>

<p><img src="https://github.com/Annashuo/hello-world/blob/master/open-address-hash.png?raw=true" alt></p>
<p>Always requires a hasg table with ~2x the number of slots as the number of elements in order to avoid collisions of hashed keys.</p>
<h5 id="Cuckoo-Hashing"><a href="#Cuckoo-Hashing" class="headerlink" title="Cuckoo Hashing"></a>Cuckoo Hashing</h5><p>Use multiple hash tables with different hash functions </p>
<font style="color:red">Deletion and lookup are always O(1) because only one location per hash table is checked

On insert, check every table and pick anyone that has a free slot. If no table has a free slot, evict the element from one of them and then re-hash it find a new location</font>

<p>Make sure that we don’t get stuck in an infinite loop when moving keys.</p>
<p>If there is a circle, rebuild the entire hash tables with new hash functions</p>
<h4 id="Dynamic-Hash-Tables"><a href="#Dynamic-Hash-Tables" class="headerlink" title="Dynamic Hash Tables"></a>Dynamic Hash Tables</h4><h5 id="Extendible-Hashing"><a href="#Extendible-Hashing" class="headerlink" title="Extendible Hashing"></a>Extendible Hashing</h5><p>Chained hashing approach when we split buckets instead of letting the linked list grow forever.</p>
<p>This requires reshuffling the entries on split, but the change is localized.</p>
<h5 id="Linear-Hashing"><a href="#Linear-Hashing" class="headerlink" title="Linear Hashing"></a>Linear Hashing</h5><p>Maintain a <u>pointer</u> that tracks the next bucket to split.</p>
<p>When <u>any</u> bucket overflows, split the bucket at the pointer location.</p>
<h3 id="B-TREE-family"><a href="#B-TREE-family" class="headerlink" title="B-TREE family"></a>B-TREE family</h3><ul>
<li>B-Tree</li>
<li>B+Tree</li>
<li>B$^{link}$-Tree</li>
<li>B*Tree</li>
</ul>
<h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>A <strong>B+Tree</strong> is a self-balancing tree data structure that keeps data <font style="color: red;">sorted</font> and allows searches, sequential access, insertions and deletions in <font style="color: red;">O(log n)</font></p>
<ul>
<li>Generalization of a binary search tree in that a node can have more than tw children</li>
<li>Optimized for systems that read and write large blocks of data</li>
</ul>
<h5 id="B-Tree-properties"><a href="#B-Tree-properties" class="headerlink" title="B+Tree properties"></a>B+Tree properties</h5><p>A B+Tree is an M-way search tree with the following properties:</p>
<ul>
<li>perfectly balanced(every leaf node is at the same depth)</li>
<li>Every inner node other than the root is at least half-full(M/2-1 &lt;= #KEYS &lt; M-1)</li>
<li>Every inner node with k keys has k+1 non-null children</li>
</ul>
<h5 id="B-Tree-nodes"><a href="#B-Tree-nodes" class="headerlink" title="B+Tree nodes"></a>B+Tree nodes</h5><p>Every node in the B+Tree contains an array of key/value pairs</p>
<ul>
<li>The keys will always be the column or columns that you built your index on</li>
<li>The values will diff based on whether the node is classified as <u><strong>inner nodes</strong></u> or <u><strong>leaf nodes</strong></u></li>
</ul>
<h5 id="B-Tree-leaf-node-values"><a href="#B-Tree-leaf-node-values" class="headerlink" title="B+Tree: leaf node values"></a>B+Tree: leaf node values</h5><ul>
<li>Approach #1 <strong>Record ids</strong>: a pointer to the location of the tuple that the index entry corresponds to.</li>
<li>Approach #2 <strong>Tuple Data</strong>: the actual contents of the tuple is stored in the leaf node; secondary indexes have to store the record id as their values</li>
</ul>
<h5 id="B-Tree-vs-B-Tree"><a href="#B-Tree-vs-B-Tree" class="headerlink" title="B-Tree vs. B+Tree"></a>B-Tree vs. B+Tree</h5><p>B-Tree stored keys+values in all nodes on the tree. It’s more space efficient since each key only appears once in the tree.</p>
<p>A B+Tree only stores values in leaf node. Inner nodes only guide the search process.</p>
<h5 id="B-Tree-INSERT"><a href="#B-Tree-INSERT" class="headerlink" title="B+Tree: INSERT"></a>B+Tree: INSERT</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Find correct lead L</span><br><span class="line">Put data entry into L in sorted order.</span><br><span class="line">&#123;</span><br><span class="line">	If L has enough space, done!</span><br><span class="line">	Else must split L into L and a new node L2</span><br><span class="line">	&#123;	</span><br><span class="line">		Redistribute entries evenly, a copy up middle key</span><br><span class="line">		Inser index entry pointing to L2 into parent of L</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">To split inner node, redistribute entries evenly but push up middle key.</span><br></pre></td></tr></table></figure>
<h5 id="B-Tree-DELETE"><a href="#B-Tree-DELETE" class="headerlink" title="B+Tree: DELETE"></a>B+Tree: DELETE</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Start at root, find lead L where entry belongs</span><br><span class="line">Remove the entry</span><br><span class="line">&#123;</span><br><span class="line">	If L is at least half-full, done!</span><br><span class="line">	If L has only M/2-1 entries</span><br><span class="line">	&#123;</span><br><span class="line">		Try to redistribute, borrowing from sibling(adjacent node with same parent as L)</span><br><span class="line">		If redistribute fails, merge L and sibling.</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">If merge occurred, must delete entry(pointing to L or sibling) from parent of L.</span><br></pre></td></tr></table></figure>
<h5 id="B-Tree-design-choices"><a href="#B-Tree-design-choices" class="headerlink" title="B+Tree design choices"></a>B+Tree design choices</h5><ul>
<li>Merge Threshold</li>
<li>Non-unique Indexes</li>
<li>Variable Length Keys</li>
<li>Prefix Compression</li>
</ul>
<h5 id="B-Tree-Merge-threshold"><a href="#B-Tree-Merge-threshold" class="headerlink" title="B+Tree: Merge threshold"></a>B+Tree: Merge threshold</h5><p>Some DBMSs don’t always merge nodes when it is half full.</p>
<p>Delaying a merge operation may reduce the amount of reorganization.</p>
<h5 id="B-Tree-Non-unique-Indexes"><a href="#B-Tree-Non-unique-Indexes" class="headerlink" title="B+Tree: Non-unique Indexes"></a>B+Tree: Non-unique Indexes</h5><ul>
<li>Approach #1 Duplicate Keys: Use the same leaf node layout but store duplicate keys multiple times</li>
<li>Approach #2 Value Lists: Store each key only once and maintain a linked list of unique values.</li>
</ul>
<h5 id="B-Tree-Variable-Length-Keys"><a href="#B-Tree-Variable-Length-Keys" class="headerlink" title="B+Tree: Variable Length Keys"></a>B+Tree: Variable Length Keys</h5><ul>
<li>Approach #1 Pointers: store the keys as pointers to the tuple’s attribute</li>
<li>Approach #2 Variable length nodes: the size of each  node in the B+Tree can vary; requires careful memory management</li>
<li>Approach #3 Key Map: embed an array of pointers that map to the key+value list within the node.</li>
</ul>
<h5 id="B-Tree-Prefix-compression"><a href="#B-Tree-Prefix-compression" class="headerlink" title="B+Tree: Prefix compression"></a>B+Tree: Prefix compression</h5><p>Since the keys in the inner nodes are only used to direct traffic, we store a minimum prefix that is needed to correctly route probes into the index other than the entire key.</p>
<h5 id="B-Tree-Bulk-Insert"><a href="#B-Tree-Bulk-Insert" class="headerlink" title="B+Tree: Bulk Insert"></a>B+Tree: Bulk Insert</h5><p>The fastest/best way to build a B+Tree is to first sort the keys and then build the index from the bottom up.</p>
<h3 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h3><p>The easiest way to implement a <strong>dynamic</strong> order-preserving index is to use a sorted linked list</p>
<p>All operations have to linear search. Average Cost: O(N)</p>
<h3 id="Skip-Lists"><a href="#Skip-Lists" class="headerlink" title="Skip Lists"></a>Skip Lists</h3><p>A collection of lists at different levels</p>
<ul>
<li>Lowest level is a sorted, singly linked list of all keys</li>
<li>2nd level links every other key</li>
<li>3rd level links every fourth key</li>
<li>In general, a level has half the keys of one below it.</li>
</ul>
<p>To insert a new key, flip a coin to decide how many levels to add the new key into. Provides approximate <font style="color:red;">O(log n)</font> search times.</p>
<h4 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages:"></a>Advantages:</h4><ul>
<li>Uses less memory than a typical B+Tree id you don’t include reverse pointers</li>
<li>Insertions and deletions do not require rebalancing</li>
</ul>
<h4 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages:"></a>Disadvantages:</h4><ul>
<li>Not disk/cache friendly because they do not optimize locality references</li>
<li>Invoking random number generator multiple times per insert is slow</li>
<li>Reverse search is non-trivial</li>
</ul>
<h3 id="Radix-Tree"><a href="#Radix-Tree" class="headerlink" title="Radix Tree"></a>Radix Tree</h3><p>Uses digital representation of keys to examine prefixes one-by-one instead of comparing entire key</p>
<ul>
<li>The height of the tree depend on the length of keys</li>
<li>Does not require rebalancing</li>
<li>The path to a leaf node represents the key of the leaf</li>
<li>Keys are stored implicitly and can be reconstructed from paths</li>
</ul>
<h4 id="Radix-Tree-Binary-comparable-keys"><a href="#Radix-Tree-Binary-comparable-keys" class="headerlink" title="Radix Tree: Binary comparable keys"></a>Radix Tree: Binary comparable keys</h4><p>not all attribute types can be decomposed into binary comparable digits for a radix tree</p>
<ul>
<li><strong>Unsigned integers</strong>: Byte order must be flipped for little endian machines</li>
<li><strong>Signed Integers</strong>: Flip two’s-complement so that negative numbers are smaller than positive</li>
<li><strong>Floats</strong>: Classify into group(neg vs. pos, normalized vs. denormalized), then store as unsigned interger</li>
<li><strong>Compound</strong>: Transform each attribute seperately.</li>
</ul>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Review 03</title>
    <url>/2017/09/21/database-system-review03/</url>
    <content><![CDATA[<p>Introduction to database storage.</p>
<a id="more"></a>
<h3 id="Why-not-use-OS"><a href="#Why-not-use-OS" class="headerlink" title="Why not use OS?"></a>Why not use OS?</h3><p>If you rely on the operating system, then you have less choise in your design space inside the database system.</p>
<p>If using the operating system, when the process hit a page fault and it need to hold locks to some tuples or other latches to other data structures. It will be blocking for a long time and all other threads that are running other queries and other transactions could not be doing useful work but they can because all the locks.</p>
<h3 id="What-DBMS-can-do-for-storage"><a href="#What-DBMS-can-do-for-storage" class="headerlink" title="What DBMS can do for storage?"></a>What DBMS can do for storage?</h3><ul>
<li>Specialized prefetching</li>
<li>Buffer replacement policy</li>
<li>Thread/process scheduling</li>
<li>Flushing data to disk</li>
</ul>
<h3 id="File-Storage-how-pages-stored-in-file"><a href="#File-Storage-how-pages-stored-in-file" class="headerlink" title="File Storage(how pages stored in file)"></a>File Storage(how pages stored in file)</h3><p>Storage manager organized the files as a collection of pages.</p>
<ul>
<li>Tracks data read/written to pages</li>
<li>Tracks the available space</li>
</ul>
<h4 id="Four-types-of-page-storage-architecture"><a href="#Four-types-of-page-storage-architecture" class="headerlink" title="Four types of page storage architecture"></a>Four types of page storage architecture</h4><p><strong>Different DBMS manage pages in files on disk in different ways</strong></p>
<ul>
<li>Heap File Organization</li>
<li>Sequential/ Sorted File Organization</li>
<li>Hashing File Organization</li>
<li>Log-Structured File Organization</li>
</ul>
<h4 id="HEAP-file-Organization"><a href="#HEAP-file-Organization" class="headerlink" title="HEAP file Organization"></a>HEAP file Organization</h4><p>A heap file is an unordered collection of pages where tuples that are stored in random order.</p>
<p>Two ways to represent a heap file:</p>
<ul>
<li>Linked list</li>
<li>Page directory</li>
</ul>
<h5 id="Linked-list"><a href="#Linked-list" class="headerlink" title="Linked list"></a>Linked list</h5><p>Maintain a <u>header page</u> at the beginning of the file that stores two pointers:</p>
<ul>
<li>Head of the <u> free gage list</u></li>
<li>Head of the <u> data page list</u></li>
</ul>
<p><img src="https://github.com/Annashuo/hello-world/blob/master/linked-list.png?raw=true" alt></p>
<h5 id="Page-directory"><a href="#Page-directory" class="headerlink" title="Page directory"></a>Page directory</h5><p>Maintain special pages that tracks the location of the data pages in the database files. The directory also records the number of free slot per page.</p>
<p>The DBMS has to make sure that the directory pages are in sync with the data pages.</p>
<p><img src="https://github.com/Annashuo/hello-world/blob/master/page-directory.png?raw=true" alt></p>
<h4 id="Log-Structured-file-organization"><a href="#Log-Structured-file-organization" class="headerlink" title="Log-Structured file organization"></a>Log-Structured file organization</h4><p>The DBMS only stores log recoreds instead of tuples in pages.</p>
<p>The system appends log records to the file of how the database was modified:</p>
<ul>
<li>Inserts store the entire tuple</li>
<li>Deletes mark the tuple as deleted</li>
<li>Updates contain the delta of just the attributes that were modified</li>
</ul>
<p>To read a record, the DBMS scans the log backwards and “recreates” the tuple.</p>
<p>Build indexes to allow it to jump to locations in the log.</p>
<p>Periodically compact the log.</p>
<p><img src="https://github.com/Annashuo/hello-world/blob/master/log-structured.png?raw=true" alt></p>
<h3 id="Page-Layout-how-tuples-stored-in-page"><a href="#Page-Layout-how-tuples-stored-in-page" class="headerlink" title="Page Layout(how tuples stored in page)"></a>Page Layout(how tuples stored in page)</h3><p>A <font color="red">page</font> is a fixed-size block of data</p>
<ul>
<li>It can contain tuples, meta-data, indexes, log records(database page can be 1KB~16KB, but hardware page and OS page are always 4KB)</li>
<li>Most systems do not mix page types</li>
<li>Some systems require a page to be self-contained.</li>
</ul>
<p>Each page is given a unique identifier. The DBMS uses an indirection layer to map page ids to pysical locations.</p>
<h4 id="Page-header"><a href="#Page-header" class="headerlink" title="Page header"></a>Page header</h4><p>Each page contains a <u>header</u> that records meta-data about the page’s contents.</p>
<ul>
<li>Page size</li>
<li>Checksum</li>
<li>DBMS Version</li>
<li>Transaction Visibility</li>
</ul>
<h4 id="Slotted-Pages-most-common-layout"><a href="#Slotted-Pages-most-common-layout" class="headerlink" title="Slotted Pages(most common layout)"></a>Slotted Pages(most common layout)</h4><p>The page maps “slots” to offsets. The length of tuples can be fixed or variable.</p>
<p>The header keeps track of:</p>
<ul>
<li>The # of used slots</li>
<li>The offset of the starting location of the last slot used</li>
</ul>
<p><img src="https://github.com/Annashuo/hello-world/blob/master/slotted-page.png?raw=true" alt></p>
<h3 id="Tuple-Layout"><a href="#Tuple-Layout" class="headerlink" title="Tuple Layout"></a>Tuple Layout</h3><p>A tuple is essentially a sequence of bytes. DBMS interpret those bytes into attribute type and values.</p>
<p>Each tuple is assigned a unique record identifier</p>
<ul>
<li>Most common: $page_id + offset/slot$</li>
<li>Can also contain file location info</li>
</ul>
<h4 id="Tuple-header"><a href="#Tuple-header" class="headerlink" title="Tuple header"></a>Tuple header</h4><p>Header of each tuple contains meta-data:</p>
<ul>
<li>visibility(concurrency control)</li>
<li>Bit map for NULL values</li>
</ul>
<h4 id="Data-representation"><a href="#Data-representation" class="headerlink" title="Data representation"></a>Data representation</h4><ul>
<li>INTEGER/BIGINT/SMALLINT/TINYINT: C/C++ representation</li>
<li>FLOAT/REAL vs. NUMERIC/DECIMAL: IEEE-754 Standard/ Fixed-point Decimals</li>
<li>VARCHAR/VARBINARY/TEXT/BLOB: Header with length, followed by data bytes</li>
<li>TIME/DATA/TIMESTAMP: 32/64-bit integer of seconds</li>
</ul>
<h3 id="Locks-vs-Latches"><a href="#Locks-vs-Latches" class="headerlink" title="Locks vs. Latches"></a>Locks vs. Latches</h3><h4 id="Locks"><a href="#Locks" class="headerlink" title="Locks"></a>Locks</h4><ul>
<li>Protects the database’s logical contents from other transactions</li>
<li>Held for transaction duration</li>
<li>Need to be able to rollback changes</li>
</ul>
<h4 id="Latches"><a href="#Latches" class="headerlink" title="Latches:"></a>Latches:</h4><ul>
<li>Protects the critical sections of the DBMS’s internal data structure from other threads</li>
<li>Held for operation duration</li>
<li>Do not need to be able to rollback changes</li>
</ul>
<h3 id="Buffer-Pool"><a href="#Buffer-Pool" class="headerlink" title="Buffer Pool"></a>Buffer Pool</h3><p>The <u>buffer pool</u> is an in-memory cache of pages read from disk.</p>
<h4 id="Buffer-pool-organization"><a href="#Buffer-pool-organization" class="headerlink" title="Buffer pool organization"></a>Buffer pool organization</h4><p>Memory region organized as an array of fixed-size pages.</p>
<p>An array entry is called a <font color="red">frame</font></p>
<p>When DBMS requests a page, an exact copy is placed into one of these frames.</p>
<h4 id="Buffer-pool-page-table"><a href="#Buffer-pool-page-table" class="headerlink" title="Buffer pool page table"></a>Buffer pool page table</h4><p>The page table keeps track of pages that are currently in memory and also maintains additional meta-data per page.</p>
<p>meta-data:</p>
<ul>
<li>dirty flag</li>
<li>pin counter</li>
</ul>
<p><u>Pin counter</u> do not equals to the <u>latches</u>. If DBMS want to modify a page, it should put a latch on that page. If DBMS want to add a new entry, it needs to put a latch on the page table.</p>
<p><img src="https://github.com/Annashuo/hello-world/blob/master/buffer-pool.png?raw=true" alt></p>
<h4 id="Multiple-Buffer-Pools"><a href="#Multiple-Buffer-Pools" class="headerlink" title="Multiple Buffer Pools"></a>Multiple Buffer Pools</h4><p>Helps reduce latch contention and improve locality.</p>
<ul>
<li>Multiple buffer pool instances</li>
<li>Per-database buffer pool</li>
<li>Per-page type buffer pool</li>
</ul>
<h4 id="Pre-fetching"><a href="#Pre-fetching" class="headerlink" title="Pre-fetching"></a>Pre-fetching</h4><ol>
<li>Different query plan has different pre-fetching result.<ul>
<li>sequential scans</li>
<li>index scans</li>
</ul>
</li>
<li>scan sharing(queries reuse data retrieved from storage or operator computations)<ul>
<li>queries do not have to be exactly the same</li>
<li>Can also share intermediate results.</li>
</ul>
</li>
</ol>
<h4 id="Buffer-replacement-policies"><a href="#Buffer-replacement-policies" class="headerlink" title="Buffer replacement policies"></a>Buffer replacement policies</h4><h5 id="Goals"><a href="#Goals" class="headerlink" title="Goals:"></a>Goals:</h5><ul>
<li>correctness</li>
<li>accuracy</li>
<li>speed</li>
<li>meta-data overhead</li>
</ul>
<h5 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h5><p>Maintain a timestamp of when each page was last accessed</p>
<p>Keep the pages in sorted order to reduce the search time on eviction</p>
<h5 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h5><ol>
<li>Approximation of LRU without needing a seperate timestamp per page<ul>
<li>Each page has a reference bit</li>
<li>When a page is accessed, set to 1</li>
</ul>
</li>
<li>Organize the pages in a circular buffer with a “clock hand”:<ul>
<li>Upon sweeping, check if a page’s bit is set to 1</li>
<li>If yes, set to 0. If no, then evict.</li>
</ul>
</li>
</ol>
<h4 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h4><p>Both LRU and CLOCK are susceptible to sequential flooding. Th most recently used page is actually the most unneeded page.</p>
<h4 id="Better-solutions"><a href="#Better-solutions" class="headerlink" title="Better solutions"></a>Better solutions</h4><ul>
<li>LRU-K: take into account historyof lats K references</li>
<li>Priority Hints: allow txns to tell the buffer pool whether a page is important or not.</li>
<li>Localization: choose pages to evict on a per txn/query basis</li>
</ul>
<h4 id="Allocation-policies"><a href="#Allocation-policies" class="headerlink" title="Allocation policies"></a>Allocation policies</h4><ol>
<li>Global policies: make decisions for all active txns</li>
<li>Local policies:<ul>
<li>allocate frams to a specific txn without considering the behavior of concurrent txns</li>
<li>still need to support sharing pages</li>
</ul>
</li>
</ol>
<h3 id="Other-memory-pools"><a href="#Other-memory-pools" class="headerlink" title="Other memory pools"></a>Other memory pools</h3><p>Not for just tuples and indexes, not always backed by disk</p>
<ul>
<li>sorting + join buffers</li>
<li>query caches</li>
<li>maintenance buffers</li>
<li>log buffers</li>
<li>dictionary caches</li>
</ul>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>web_knowledge</title>
    <url>/2017/09/19/web-knowledge/</url>
    <content><![CDATA[<p>Some basic knowledge of web application.<br><a id="more"></a></p>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><h4 id="Version-control-system"><a href="#Version-control-system" class="headerlink" title="Version control system"></a>Version control system</h4><p>the basic idea of version control system is that as you work on a large project and you often want to commit change to your project while still being able to access and possibly to go back to older version of the project. It’s also useful for teams of programmers to coordinate their work by each of the programmer work on their static copy of their own and only commit her changes of the project possibly resolve conflict with other programmer’s work with her changes complete.</p>
<h4 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h4><p>GIT is a distributed version control system because when you clone, it make a copy of a repository. You get a full complete copy of that repository. Essentially a collections of all collaborate repository.</p>
<h4 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h4><p>Branch is a full copy of a version of the repository so you have multiple version of your repository.</p>
<h3 id="HTTP-Hypertext-Transfer-Protocol"><a href="#HTTP-Hypertext-Transfer-Protocol" class="headerlink" title="HTTP: Hypertext Transfer Protocol"></a>HTTP: Hypertext Transfer Protocol</h3><p>HTTP is a protocol that is used for tranfering data on the web.</p>
<p>If the brouser doesn’t have the address of the www….com, the browser might have to start when it initiate the connection by connecting the domain name system(DNS) server and convert the www.com to IP address.</p>
<p>After the browser gets the IP address of the remote server, it may initiate a TCP/IP connection with the remote server. TCP is the transfer control protocol. It how most traffic internet work. To initiate a TCP/IP connection, the browser first send a SYN message to the web server and the server reply with a SYN-ACK package message to acknowledge the web server has receive the SYN. The browser send a ACK package to the server to acknowledge it has receive the SYN-ACK package. At this point, the browser can begin sending HTTP traffic by sending a HTTP request to the web server. The web server receive the HTTP request and send back the HTTP response.</p>
<h4 id="Port"><a href="#Port" class="headerlink" title="Port"></a>Port</h4><p>Ports for common web services:</p>
<ul>
<li>Telnet(23), SMTP(25), mysql(3306)</li>
<li>For web servers:<ul>
<li>Deployment: HTTP(80), HTTPS(443)</li>
<li>Development: HTTP(8000 or 8080), HTTPS(8443)</li>
</ul>
</li>
</ul>
<h4 id="Request-and-Response"><a href="#Request-and-Response" class="headerlink" title="Request and Response"></a>Request and Response</h4><p>HTTP Request(first line is the request line):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;METHOD&gt; &lt;URI&gt; &lt;VERSION&gt;</span><br><span class="line">&lt;HEADER LINE&gt;</span><br><span class="line">&lt;HEADER LINE&gt;</span><br><span class="line">...</span><br><span class="line">&lt;HEADER LINE&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;OPTIONAL MESSAGE BODY&gt;</span><br></pre></td></tr></table></figure>
<p>HTTP Response(first line is the resopnse line):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;VERSION&gt; &lt;STATUS CODE&gt; &lt;STATUS MESSAGE&gt;</span><br><span class="line">&lt;HEADER LINE&gt;</span><br><span class="line">&lt;HEADER LINE&gt;</span><br><span class="line">...</span><br><span class="line">&lt;HEADER LINE&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;OPTIONAL MESSAGE BODY&gt;</span><br></pre></td></tr></table></figure>
<h4 id="HTTP-Request-Method"><a href="#HTTP-Request-Method" class="headerlink" title="HTTP Request Method"></a>HTTP Request Method</h4><ul>
<li>Safe methods are not supposed to have side effect:<ul>
<li>GET, HEAD(much like GET, but the response without message body), TRACE(the response will contain the whole request in the message body) and OPTIONS（请求http的方法）</li>
</ul>
</li>
<li>Idempotent（幂等性：调用一次和调用n次结果相同） methods can have side effect<ul>
<li>PUT（更新会指明某个资源，做多次更新和1次更新结果一样） and DELETE（删除会指明某个资源，做一次删除和多次删除结果一样）,GET, HEAD</li>
</ul>
</li>
<li>Update method<ul>
<li>POST（创建不会致命某个资源，一次调用创建一个，没有幂等性）</li>
</ul>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">method</th>
<th style="text-align:center">safe</th>
<th style="text-align:center">idempotent</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">GET</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">HEAD</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">OPTIONS</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">DELETE</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">PUT</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">POST</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
</tbody>
</table>
</div>
<h4 id="POST-vs-GET"><a href="#POST-vs-GET" class="headerlink" title="POST vs. GET:"></a>POST vs. GET:</h4><ul>
<li><p>What data is contained in a typical request line? a header line? a message body?</p>
<p>  Get: the query string in the url, like</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/test/demo_form.php?name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>Post: the query string is sent in the HTTP request body

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST /test/demo_form.php HTTP/1.1</span><br><span class="line">Host: w3schools.com</span><br><span class="line">name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure>
</code></pre><ul>
<li><p>What are GET and POST typically used for?</p>
<p>  Use GET for safe and idempotent requests</p>
<p>  Use POST for neither safe nor idempotent requests</p>
<p>  Use POST for destructive actions such as creation (I’m aware of the irony), editing, and deletion, because you can’t hit a POST action in the address bar of your browser. Use GET when it’s safe to allow a person to call an action.</p>
</li>
<li><p>How do browsers treats GET and POST request differently?</p>
<p>  Web browsers typically treat GET and POST differently since GET is safe and POST is unsafe. It’s OK to refresh a web page retrieved by a GET request – the web browser will just re-issue the last GET request and render whatever the server sends back. However, if the page we are looking at in a browser is the response to a POST request, the browser will warn us if we try to refresh the page.</p>
</li>
</ul>
<h3 id="HTML-Hypertext-Markup-Language"><a href="#HTML-Hypertext-Markup-Language" class="headerlink" title="HTML(Hypertext Markup Language)"></a>HTML(Hypertext Markup Language)</h3><h3 id="CSS-Cascading-Style-Sheets"><a href="#CSS-Cascading-Style-Sheets" class="headerlink" title="CSS(Cascading Style Sheets)"></a>CSS(Cascading Style Sheets)</h3><p>It a mean to seperate the style from the content and the structure.</p>
<h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><p>Bootstrap is a popular CSS library that allows you to easily create sophisticated web page designs. You don’t need to know any less or Java script or any of the other libraries like jquery that bootstrap uses you can just download precompiled CSS and Java script bootstrap files and include them in the header of your HTML file and then use the bootstrap CSS rules as you would use any CSS.</p>
<p>LESS is a CSS scripting language implemented in Java script.</p>
<p>you don’t need to hand write any of the CSS or the Java script that makes that interactive, you can just use the appropriate bootstrap specific classes here and then your page will be interactive.</p>
<h4 id="How-bootstrap-work"><a href="#How-bootstrap-work" class="headerlink" title="How bootstrap work"></a>How bootstrap work</h4><p>It ‘s a lot less style sheets better compiled to CSS and javascript and it use jquery library.</p>
<h3 id="Hidden-Field"><a href="#Hidden-Field" class="headerlink" title="Hidden Field"></a>Hidden Field</h3><h4 id="How-to-use-hidden-field"><a href="#How-to-use-hidden-field" class="headerlink" title="How to use hidden field"></a>How to use hidden field</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot;...&gt;</span><br></pre></td></tr></table></figure>
<h4 id="The-limitation-of-hidden-field"><a href="#The-limitation-of-hidden-field" class="headerlink" title="The limitation of hidden field"></a>The limitation of hidden field</h4><ul>
<li>They aren’t secret, they just aren’t displayed.</li>
<li>The user can control the value sent back to the server</li>
</ul>
<h3 id="CSRF-Cross-Site-Request-Forgery"><a href="#CSRF-Cross-Site-Request-Forgery" class="headerlink" title="CSRF(Cross Site Request Forgery)"></a>CSRF(Cross Site Request Forgery)</h3><h4 id="CSRF-basic-problem"><a href="#CSRF-basic-problem" class="headerlink" title="CSRF basic problem"></a>CSRF basic problem</h4><p>One site could potentially send authenticated requests to another site if you are simultaneously logged in in a single browser session</p>
<h4 id="The-solution-to-CSRF"><a href="#The-solution-to-CSRF" class="headerlink" title="The solution to CSRF"></a>The solution to CSRF</h4><p>Require each request to contain some secret information that is not automatically added by the browser. One way to do that is to include a parameter in every request and have the value of that parameter be some big randomly generated secret value that only the site and possibly the user knows if they want.</p>
<h3 id="MVC-Model-View-Controller"><a href="#MVC-Model-View-Controller" class="headerlink" title="MVC(Model View Controller)"></a>MVC(Model View Controller)</h3><h4 id="The-basic-components-of-a-typical-MVC-framework"><a href="#The-basic-components-of-a-typical-MVC-framework" class="headerlink" title="The basic components of a typical MVC framework"></a>The basic components of a typical MVC framework</h4><ul>
<li>Web browser</li>
<li>Web servser<ul>
<li>Controller application: a single point of control for the common features such as authentication, and mapping urls to the model and the views managing user session data and so on.</li>
<li>Model<ul>
<li>Data model: store data</li>
<li>Actions: the core logic of the application</li>
</ul>
</li>
<li>Views: justifies how information is presented back to the user after authenticating a request and performing some other basic processing</li>
</ul>
</li>
</ul>
<h4 id="The-flow-of-information-in-MVC-to-process-a-request"><a href="#The-flow-of-information-in-MVC-to-process-a-request" class="headerlink" title="The flow of information in MVC to process a request"></a>The flow of information in MVC to process a request</h4><p>The controller typically determines which action in the application is responsible for processing this particular request and it forward the request to the model to be executed by the appropriate action. The action typically interacts with the data model getting and changing data as needed. When the action is done processing the request typically it forwards the request to some particular view it chooses which view is the right view for displaying the data for this request. The information from the model will help the view generate the actual response. The view itself is just responsible for formatting the data that was presented to it and generating some sort of response to the web browser</p>
<h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><h4 id="Django-components-correspond-to-MVC"><a href="#Django-components-correspond-to-MVC" class="headerlink" title="Django components correspond to MVC"></a>Django components correspond to MVC</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">MVC</th>
<th style="text-align:center">Django</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">controller</td>
<td style="text-align:center">Django framework itself with Django URL configuration</td>
</tr>
<tr>
<td style="text-align:center">view</td>
<td style="text-align:center">template</td>
</tr>
<tr>
<td style="text-align:center">data model</td>
<td style="text-align:center">model</td>
</tr>
<tr>
<td style="text-align:center">actions</td>
<td style="text-align:center">view</td>
</tr>
</tbody>
</table>
</div>
<h4 id="Standard-details-of-a-basic-Django-application"><a href="#Standard-details-of-a-basic-Django-application" class="headerlink" title="Standard details of a basic Django application"></a>Standard details of a basic Django application</h4><ul>
<li>Project configuration in setting.py</li>
<li>Request route configuration in urls.py</li>
<li>Action in views.py</li>
<li>View templates</li>
</ul>
<h3 id="Relational-Model"><a href="#Relational-Model" class="headerlink" title="Relational Model"></a>Relational Model</h3><h4 id="Relational-model-itself"><a href="#Relational-model-itself" class="headerlink" title="Relational model itself"></a>Relational model itself</h4><ul>
<li>primary key: the column that can identify the record in the relation</li>
<li>foreign key: when one table refers to another table using that table’s primary key. This is called the foreign key.</li>
</ul>
<h4 id="The-goals-of-the-relational-model"><a href="#The-goals-of-the-relational-model" class="headerlink" title="The goals of the relational model"></a>The goals of the relational model</h4><p>Abstract away the physical data layout. User doesn’t need to understand the physical data layout.</p>
<h3 id="ORM-Object-Relational-Mapping-Tools"><a href="#ORM-Object-Relational-Mapping-Tools" class="headerlink" title="ORM(Object Relational Mapping Tools)"></a>ORM(Object Relational Mapping Tools)</h3><h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><p>ORM is to provide an additional layer of abstraction between the web application and the storage system. User the ORM to retrieve or save data in the database, the web app never needs to write an y direct database or cloud service specific code itself. Web app just plays objects and the ORM generate an execute whatever code is needed to interact with the storage system.</p>
<h4 id="Advantage-vs-Disadvantage"><a href="#Advantage-vs-Disadvantage" class="headerlink" title="Advantage vs. Disadvantage"></a>Advantage vs. Disadvantage</h4><p>AD. This makes the web application much easier to write and it also allows you to easily change on back end store system without needing to rewrite your web app.</p>
<p>Dis. 1. lose the full power when interact directly with the storage system. 2. The web app need features provided by the ORM but some high performance apps might need special feature that just not provided by the ORM.</p>
<h3 id="Django’s-URL-dispatcher"><a href="#Django’s-URL-dispatcher" class="headerlink" title="Django’s URL dispatcher"></a>Django’s URL dispatcher</h3><h4 id="Basic-regular-expressions"><a href="#Basic-regular-expressions" class="headerlink" title="Basic regular expressions"></a>Basic regular expressions</h4><p>regular-expression groups is (?P<name>pattern)</name></p>
<h3 id="Django-data-model"><a href="#Django-data-model" class="headerlink" title="Django data model"></a>Django data model</h3><h4 id="How-to-use-Django’s-ORM"><a href="#How-to-use-Django’s-ORM" class="headerlink" title="How to use Django’s ORM"></a>How to use Django’s ORM</h4><ul>
<li>Edit configuration in settings.py</li>
<li>Create data models in your application’s models.py</li>
<li>Run python manage.py makemigrations and python manage.py migrate</li>
<li>Use your data models in your actions</li>
</ul>
<h4 id="Basic-Django-ORM-features"><a href="#Basic-Django-ORM-features" class="headerlink" title="Basic Django ORM features"></a>Basic Django ORM features</h4><ul>
<li>The id primary key</li>
<li>.objects.all()</li>
<li>.objects.get()</li>
<li>.save()</li>
<li>.delete()</li>
<li>.filter()</li>
</ul>
<h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><p>Cookies is just a small piece of data provided by the web server in http response. The cookies are actually sent back to the server in the header and stored in the header. Cookies transmitted between web client and web server.</p>
<p>when the web client sends a subsequent request it will store the cookie and then send the cookie along with every subsequent http request to the same server.</p>
<h4 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h4><ul>
<li>4KB limit enforsed by most browsers</li>
<li>the user can see and forge cookie data</li>
<li>the user can disable cookies</li>
</ul>
<h3 id="Sessions"><a href="#Sessions" class="headerlink" title="Sessions"></a>Sessions</h3><h4 id="Sessions-1"><a href="#Sessions-1" class="headerlink" title="Sessions"></a>Sessions</h4><ul>
<li><p>HOW: When the user first access the site and the server is not yet storing data for the user, the server creates a server side session and a sign that session some id and then stores some data as session data for the session and sends the session id back to the user and response usually as a cookie. </p>
</li>
<li><p>WHAT(for web application): The session data is typically stored on the server as a big dictionary of name value pairs for each session so that the server of the web application can maintain arbitrary data for each user.</p>
</li>
</ul>
<h4 id="Limitations-1"><a href="#Limitations-1" class="headerlink" title="Limitations"></a>Limitations</h4><ul>
<li>Session ID must be transmitted with each subsequent request</li>
<li>Server must maintain session data for each active user</li>
</ul>
<p><strong>The session id transmitted in cookie</strong></p>
<h3 id="Django’s-built-in-authentication-module"><a href="#Django’s-built-in-authentication-module" class="headerlink" title="Django’s built-in authentication module"></a>Django’s built-in authentication module</h3><h4 id="HOW"><a href="#HOW" class="headerlink" title="HOW:"></a>HOW:</h4><ul>
<li>configuration in settings.py</li>
<li>URLs that route to Django’s authentication actions</li>
<li>How to use the Django’s authentication form</li>
<li>Automatic authentication using <code>@login_required</code></li>
<li>Manual authentication using <code>authenticate</code> and <code>login</code></li>
</ul>
<h3 id="Race-condition"><a href="#Race-condition" class="headerlink" title="Race condition"></a>Race condition</h3><ul>
<li><p>Thread: a sequence of instruction that is scheduled and executed by the operating system and shared resources such as memory and programs</p>
</li>
<li><p>Thread safe: Thread-safe code only manipulates shared data structures in a manner that ensures that all threads behave properly and fulfil their design specifications without unintended interaction.</p>
</li>
<li><p>Race condition: it was check in one thread and then check in the second thread and then act in the first thread and the action the second threat so that the action in the second thread didn’t get to see the effect of the first threats execution.</p>
</li>
</ul>
<h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><h4 id="ACID-properties"><a href="#ACID-properties" class="headerlink" title="ACID properties"></a>ACID properties</h4><ul>
<li>Atomicity: All or nothing</li>
<li>Consistency: Won’t violate programmer-defined integrity constraints</li>
<li>Isolation: Each transaction runs as if it is alone</li>
<li>Durability: After successful commit, database won’t undo transaction</li>
</ul>
<h4 id="Typical-transaction-operations"><a href="#Typical-transaction-operations" class="headerlink" title="Typical transaction operations"></a>Typical transaction operations</h4><ul>
<li><code>begin</code> or <code>start</code>: Starts a transaction</li>
<li><code>commit</code>: Attempts to successfully complete the transaction</li>
<li><code>rollback</code> or <code>abort</code>: Undoes the work of an uncommitted transaction</li>
<li><code>checkpoint</code> or <code>savepoint</code>: Marks partial work of an uncommitted transaction as a version that can be rolled-back to</li>
</ul>
<h3 id="Reverse-URL-Resolution-in-Django"><a href="#Reverse-URL-Resolution-in-Django" class="headerlink" title="Reverse URL Resolution in Django"></a>Reverse URL Resolution in Django</h3><h4 id="Django-url-template-tag"><a href="#Django-url-template-tag" class="headerlink" title="Django url template tag"></a>Django url template tag</h4><ul>
<li>Four routes:<ul>
<li>hard coding with static url</li>
<li>hard coding with django url</li>
<li>url template tag with url action</li>
<li>url template tag with url name</li>
</ul>
</li>
</ul>
<h3 id="Django-Form"><a href="#Django-Form" class="headerlink" title="Django Form"></a>Django Form</h3><h4 id="What-problems-Forms-are-solving"><a href="#What-problems-Forms-are-solving" class="headerlink" title="What problems Forms are solving"></a>What problems Forms are solving</h4><ul>
<li>validates the user input and checks to make sure that all the expected parametsers are present in the request and the parameters are in the right format.</li>
<li>execuet some core logic. This varies from application to appliction depending on the purpose of the app and once the core logic is executed the application finally renders the view.</li>
</ul>
<h4 id="How-to-define-a-Django-Form"><a href="#How-to-define-a-Django-Form" class="headerlink" title="How to define a Django Form"></a>How to define a Django Form</h4><ul>
<li>Define and use basic field types</li>
<li>How to write custom overall validation code</li>
<li>How to write custom field-specific validation code</li>
</ul>
<h4 id="Using-a-Django-Form-in-your-action"><a href="#Using-a-Django-Form-in-your-action" class="headerlink" title="Using a Django Form in your action"></a>Using a Django Form in your action</h4><ul>
<li>How to create and use an unbound Form</li>
<li>How t create a bound Form from request parameters</li>
<li>How to validate a bound form</li>
<li>How to use a Form’s cleaned_data</li>
</ul>
<h4 id="Using-a-Django-Form-in-your-view"><a href="#Using-a-Django-Form-in-your-view" class="headerlink" title="Using a Django Form in your view"></a>Using a Django Form in your view</h4><ul>
<li>How to use a Form’s non-field-specific errors</li>
<li>How to use the default Form view</li>
<li>How to use the Form’s fields individually<ul>
<li>How to access each field</li>
<li>How to print labels, input widget, errors</li>
</ul>
</li>
</ul>
<h4 id="MIME-Multipurpose-Internet-Mail-Extensions"><a href="#MIME-Multipurpose-Internet-Mail-Extensions" class="headerlink" title="MIME: Multipurpose Internet Mail Extensions"></a>MIME: Multipurpose Internet Mail Extensions</h4><p>MIME: describe the data format on purpose</p>
<p>Common MIME-related header fields</p>
<ul>
<li>MIME-Version</li>
<li>Content-Type: the type of content being sent</li>
<li>Content-transfer-encoding: Encoding format for how the binary data s representing non-binary information</li>
<li>Accept: specifies content-types a client is willing to accept </li>
</ul>
<h4 id="Multipart-form"><a href="#Multipart-form" class="headerlink" title="Multipart form"></a>Multipart form</h4><p>Normal <form> the content-type is “application/x-www-form-urlencoded”. It only accept text type request</form></p>
<p>Multipart form accept both text type and binary data type</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form enctype=&quot;multipart/form-data&quot; action=&quot;...&quot; method=&quot;post&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;file&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Sending-email"><a href="#Sending-email" class="headerlink" title="Sending email"></a>Sending email</h4><p>SMTP: Simple Mail Transfer Protocol</p>
<ul>
<li>The standard, text-based protocol for sending mail on the internet<ul>
<li>You can run your own SMTP server</li>
<li>or you can use smtp.andrew.cmu.edu but you will need to authenticate yourself</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.core.mail import send_mail</span><br><span class="line"></span><br><span class="line">send_mail(subject=&quot;Verify your email address&quot;,</span><br><span class="line">			meddage = email_body,</span><br><span class="line">			from_email=&quot;XXX@cs.cmu.edu&quot;,</span><br><span class="line">			recipient_list=[new_user,email])</span><br></pre></td></tr></table></figure>
<h4 id="DOM-The-Document-Object-Model"><a href="#DOM-The-Document-Object-Model" class="headerlink" title="DOM: The Document Object Model"></a>DOM: The Document Object Model</h4><p>A tree of nodes that represent the HTML documents</p>
<h4 id="Client-side-Web-Programming"><a href="#Client-side-Web-Programming" class="headerlink" title="Client-side Web Programming"></a>Client-side Web Programming</h4><p>JavaScript: A client-side scripting language that runs in the web browser</p>
<ul>
<li>Interpreted, dynamically typed, garbage-collected</li>
<li>Object-oriented, C-like syntax</li>
<li>Functions are objects</li>
</ul>
<h5 id="two-ways"><a href="#two-ways" class="headerlink" title="two ways:"></a>two ways:</h5><ul>
<li>Write it drectly in HTML page:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>Include it from an external source file</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;foo.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h5 id="Using-javascript"><a href="#Using-javascript" class="headerlink" title="Using javascript"></a>Using javascript</h5><ul>
<li>Write javascript functions</li>
<li><p>Respond to in-browser events:</p>
<ul>
<li><p>onload, onclick, onfocus, onblur,onmouseover…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img onclick=&quot;foo()&quot;&gt;</span><br><span class="line">&lt;bodu onload=&quot;document.forms[0].elements[0].focus()&quot;&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Generate asynchronous HTTP requests</p>
</li>
<li>Navigate and update the DOM</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Database System Review 02</title>
    <url>/2017/09/14/database-system-review02/</url>
    <content><![CDATA[<p>This contains functional dependencies and normal form.</p>
<a id="more"></a>
<h3 id="Functional-Dependencies-FD"><a href="#Functional-Dependencies-FD" class="headerlink" title="Functional Dependencies (FD)"></a>Functional Dependencies (FD)</h3><h4 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h4><p>A Functional Dependency (FD) is a form of a constraint, part of a relation’s schema to define a valid instance.</p>
<script type="math/tex; mode=display">X \rightarrow Y</script><p>The value of X functionally defines the value of Y. For example, if two tuples$(t<em>{1},t</em>{2})$ agree on the X attribute, then they must agree on the Y attribute too.</p>
<script type="math/tex; mode=display">(X \rightarrow Y) \, + \, (X \rightarrow Z) \, \Rightarrow \, (X \rightarrow YZ)</script><script type="math/tex; mode=display">(XY \rightarrow Z) \, \not\Rightarrow \, (X \rightarrow Z) \, + \, (Y \rightarrow Z)</script><h4 id="Definning-FDs-in-SQL"><a href="#Definning-FDs-in-SQL" class="headerlink" title="Definning FDs in SQL"></a>Definning FDs in SQL</h4><p>eg.</p>
<script type="math/tex; mode=display">FD_{1}: sid \rightarrow name</script><script type="math/tex; mode=display">FD_{2}: sid \rightarrow address</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE ASSERTION student-name-addr </span><br><span class="line">  CHECK (NOT EXISTS</span><br><span class="line">    (SELECT * FROM students AS s1, </span><br><span class="line">                   students AS s2</span><br><span class="line">      WHERE s1.sid = s2.sid</span><br><span class="line">        AND((s1.name &lt;&gt; s2.name</span><br><span class="line">        	OR (s1.address &lt;&gt; s2.address)));</span><br></pre></td></tr></table></figure>
<h4 id="Armstrong’s-Axioms"><a href="#Armstrong’s-Axioms" class="headerlink" title="Armstrong’s Axioms"></a>Armstrong’s Axioms</h4><ul>
<li>Reflexivity: $X \supseteq Y \Rightarrow X \rightarrow Y$</li>
<li>Augmentation: $X \rightarrow Y \Rightarrow XZ \rightarrow YZ$</li>
<li>Transitivity: $(X \rightarrow Y) \wedge (Y \rightarrow Z) \Rightarrow (X \rightarrow Z)$</li>
<li>Union: $(X \rightarrow Y) \wedge (X \rightarrow Z) \Rightarrow (X \rightarrow YZ)$</li>
<li>Decomposition: $(X \rightarrow YZ) \Rightarrow (X \rightarrow Y) \wedge (X \rightarrow Z)  $</li>
<li>Pseudo-transitivity: $(X \rightarrow Y) \wedge (YW \rightarrow Z) \Rightarrow (XW \rightarrow YZ)$</li>
</ul>
<h4 id="Closure-F"><a href="#Closure-F" class="headerlink" title="Closure (F+)"></a>Closure (F+)</h4><p>Given a set F of FDs, closure F+ is the set of all implied FDs.</p>
<p>To check $X \rightarrow A$:</p>
<ol>
<li>compute X+</li>
<li>check if $A \in X+$</li>
</ol>
<h4 id="Canonical-Cover-F-c"><a href="#Canonical-Cover-F-c" class="headerlink" title="Canonical Cover ($F_{c}$)"></a>Canonical Cover ($F_{c}$)</h4><p>Given a set F of FDs, canonical cover $F_{c}$ is the minimal set of all FDs.</p>
<p>$F_{c}$ properties:</p>
<ol>
<li>The right-hand side(RHS) of every FD is a single attribute</li>
<li>$F_{c}$ is identical to the closure F+</li>
<li>$F_{c}$ is minimal(we cannot eliminate any attribute from the LHS or RHS of a FD)</li>
<li>$F_{c}$ LHS usually unique</li>
</ol>
<h3 id="Relational-Model-Keys"><a href="#Relational-Model-Keys" class="headerlink" title="Relational Model Keys"></a>Relational Model Keys</h3><ul>
<li>Super key: any set of attributes in a relation that functionally determines all attributes in the relation (随意组合attribute，只要组合出来的结果可以决定其他所有attribute，这个组合就是super key)</li>
<li>Candidate key: any super key such that the removal of any attribute leaves a set that does not functionally determine all attributes (super key里面元素最少的一个是candidate key)</li>
<li>primary key = candidate key</li>
</ul>
<h3 id="Decomposition-Goals"><a href="#Decomposition-Goals" class="headerlink" title="Decomposition Goals"></a>Decomposition Goals</h3><ul>
<li>Lossless Joins (<strong>mandatory</strong>): 要保证lossless joins，找出最有决定性的LHS的attribute，以它作为跨越多个表的attribute进行拆分</li>
<li>Dependency Preservation: 最好同一个FD里的attribute在拆分后的同一个表内</li>
<li>Redundancy Avoidance</li>
</ul>
<h4 id="Lossless-Joins"><a href="#Lossless-Joins" class="headerlink" title="Lossless Joins"></a>Lossless Joins</h4><p>For the decomposition $R={R<em>{1}\cup R</em>{n}}$, check whether $(R<em>{1} \cap R</em>{2})\rightarrow R<em>{1}$ <strong>or</strong> $(R</em>{1} \cap R<em>{2})\rightarrow R</em>{2}$</p>
<h4 id="Dependency-Preservation"><a href="#Dependency-Preservation" class="headerlink" title="Dependency Preservation"></a>Dependency Preservation</h4><p>To test whether the decomposition $R={R<em>{1},..R</em>{n}}$ preserves the FD set F:</p>
<ol>
<li>Compute F+</li>
<li>Divide F+ into sets of only covered by ${R<em>{1},..,R</em>{n}}$</li>
<li>Compute G as union of those sets</li>
<li>Compute G+</li>
<li>If F+=G+, then ${R<em>{1},..,R</em>{n}}$ is dependency preserving</li>
</ol>
<h4 id="Redundancy-Avoidance"><a href="#Redundancy-Avoidance" class="headerlink" title="Redundancy Avoidance"></a>Redundancy Avoidance</h4><p>For an $X \rightarrow Y$ covered by$R<em>{n}$, X should be a super key of $R</em>{n}$</p>
<h3 id="Normal-Forms"><a href="#Normal-Forms" class="headerlink" title="Normal Forms"></a>Normal Forms</h3><p>A Normal Form is a characterization of a decomposition in terms of the properties that satisfies when putting the relations back together.</p>
<h4 id="First-Normal-Form-1NF"><a href="#First-Normal-Form-1NF" class="headerlink" title="First Normal Form(1NF)"></a>First Normal Form(1NF)</h4><ol>
<li>All value must be atomic</li>
<li>No repeating groups</li>
</ol>
<h4 id="Second-Normal-Form-2NF"><a href="#Second-Normal-Form-2NF" class="headerlink" title="Second Normal Form(2NF)"></a>Second Normal Form(2NF)</h4><ol>
<li>1NF</li>
<li>Non-key attributes fully depend on the candidate key</li>
</ol>
<p>Decomposition后，如果一个表里除了一个FD的LHS和RHS以外还有其他的attribute，就提出LHS和RHS成立一个新的表</p>
<h4 id="Boyce-codd-Normal-Form-BCNF"><a href="#Boyce-codd-Normal-Form-BCNF" class="headerlink" title="Boyce-codd Normal Form(BCNF)"></a>Boyce-codd Normal Form(BCNF)</h4><ul>
<li>+no lossless joins</li>
<li>+no redundancies</li>
<li>-dependency perserving</li>
</ul>
<p><strong>for every FD in a relation R, LHS must be super key</strong></p>
<p>A relation R with FD set F is in BCNF if for every $X \rightarrow Y$ in F+:</p>
<ul>
<li>$X \rightarrow Y$ is trivial (that is, $Y \subseteq X$), or</li>
<li>X is a super key</li>
</ul>
<h5 id="BCNF-decomposition-algorithem-Given-a-relation-R-and-a-FD-set-F"><a href="#BCNF-decomposition-algorithem-Given-a-relation-R-and-a-FD-set-F" class="headerlink" title="BCNF decomposition algorithem(Given a relation R and a FD set F):"></a>BCNF decomposition algorithem(Given a relation R and a FD set F):</h5><ul>
<li>Compute F+</li>
<li>$Result \leftarrow {R}$</li>
<li>While $R_{i} \in Result$ not in BCNF, do:<ul>
<li>Choose$(X \rightarrow Y)\in F+$ such that $(X \rightarrow Y)$ is covered by $R<em>{i}$ and $X \not\rightarrow R</em>{i}$ </li>
<li>Decompose $R<em>{i}$ on $(X \rightarrow Y)$ into $R</em>{i,1} \leftarrow X \cup Y$ and $R<em>{i,2} \leftarrow R</em>{i}-Y$</li>
</ul>
</li>
</ul>
<h5 id="Problem-with-BCNF"><a href="#Problem-with-BCNF" class="headerlink" title="Problem with BCNF"></a>Problem with BCNF</h5><p>After decomposed R into BCNF relations ${R<em>{1},…,R</em>{n}}$ with their own ${FD<em>{1},….FD</em>{n}}$, we can reconstruct R from ${R<em>{1},…,R</em>{n}}$ but cannot reconstruct FD from ${FD<em>{1},….FD</em>{n}}$.</p>
<h4 id="Third-Normal-Form-3NF"><a href="#Third-Normal-Form-3NF" class="headerlink" title="Third Normal Form(3NF)"></a>Third Normal Form(3NF)</h4><ul>
<li>+no lossless joins</li>
<li>no redundancies</li>
<li>dependency perserving</li>
</ul>
<p>A relation R with FD set F is in 3NF if for every $X \rightarrow Y$ in F+:</p>
<ul>
<li>$X \rightarrow Y$ is trivial, or</li>
<li>X is a super key, or</li>
<li>Y is part of a candidate key</li>
</ul>
<h5 id="3NF-decomposition-algorithem-Given-a-relation-R-and-a-FD-set-F"><a href="#3NF-decomposition-algorithem-Given-a-relation-R-and-a-FD-set-F" class="headerlink" title="3NF decomposition algorithem(Given a relation R and a FD set F):"></a>3NF decomposition algorithem(Given a relation R and a FD set F):</h5><ul>
<li>Compute $F_{c}$</li>
<li>$Result \leftarrow \phi$</li>
<li>For $(X \rightarrow Y)\in F<em>{c}$, add a relation $R</em>{i}(X,Y)$ to Result</li>
<li>If result is not lossless, add a relation with an appropriate key</li>
</ul>
<h5 id="3NF-and-BCNF"><a href="#3NF-and-BCNF" class="headerlink" title="3NF and BCNF"></a>3NF and BCNF</h5><ul>
<li>both lossless</li>
<li>BCNF lose dependency preservation</li>
<li>3NF lose redanduncy avoidance</li>
</ul>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Review 01</title>
    <url>/2017/09/14/database-system-review01/</url>
    <content><![CDATA[<p>This is the introduction of database, relational database and SQL.</p>
<a id="more"></a>
<h3 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h3><h4 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h4><p>Organized collection of interelated data that models some aspect of the real-world.</p>
<ul>
<li>data integrity</li>
<li>implementation</li>
<li>durability</li>
</ul>
<h4 id="Database-Management-System"><a href="#Database-Management-System" class="headerlink" title="Database Management System"></a>Database Management System</h4><p>A DBMS is software that allows applications to store and analyse information in a database</p>
<h5 id="DBMS-types-by-Target-Workloads"><a href="#DBMS-types-by-Target-Workloads" class="headerlink" title="DBMS types by Target Workloads:"></a>DBMS types by Target Workloads:</h5><ul>
<li>On-line Transaction Processing(OLTP): Fast operations that only read/update a small amount of data each time</li>
<li>On-line Analytical Processing(OLAP): Complex queries that read a lot of data to compute aggregates</li>
<li>Hybrid Transaction + Analytical Processing: OLTP + OLAP</li>
</ul>
<h5 id="DBMS-types-by-Data-Model"><a href="#DBMS-types-by-Data-Model" class="headerlink" title="DBMS types by Data Model"></a>DBMS types by Data Model</h5><p><strong>Data model</strong>: collection of concepts form describing the data in a database.</p>
<p><strong>Schema</strong>: a description of a particular collection of data, using a given data model.</p>
<ul>
<li>Most DBMSs data model<ul>
<li>Relational  </li>
</ul>
</li>
<li>NoSQL data model<ul>
<li>Key/Value</li>
<li>Graph</li>
<li>Document</li>
<li>Column-family</li>
</ul>
</li>
<li>Machine Learning data model<ul>
<li>Array/Matrix</li>
</ul>
</li>
<li>Obsolete / Rare<ul>
<li>Hierarchical</li>
<li>Network</li>
</ul>
</li>
</ul>
<h3 id="Relational-Model"><a href="#Relational-Model" class="headerlink" title="Relational Model"></a>Relational Model</h3><ol>
<li><p>Structure</p>
<p> <strong>Relation</strong>: unordered set that contain the relationship of attributes that represent entities.</p>
<p> <strong>Tuple</strong>: a set of attribute values(domain) in the relation</p>
<ul>
<li>values are (normally) atomic/scalar</li>
<li>The special value <font color="red">NULL</font> is a member of every domain</li>
</ul>
</li>
<li><p>Integrity Constraints:</p>
<ul>
<li>Primary Keys: Uniquely identifies a single tuple</li>
<li>Foreign Keys: Specifies that an attribute from one relation has to map to <strong>a</strong> tuple in another relation</li>
</ul>
</li>
<li><p>Manipulation</p>
<p> Data Manipulation Language(DML)</p>
<ul>
<li>Procedural(<strong>Relational Algebra</strong>): The query specifies the strategy the DBMS should use to find the desired result</li>
<li>Non-Procedural(<strong>Relational Calulus</strong>): The query specifies only what data is wanted and not how to find it.</li>
</ul>
</li>
</ol>
<h4 id="Relational-Algebra"><a href="#Relational-Algebra" class="headerlink" title="Relational Algebra"></a>Relational Algebra</h4><ol>
<li><p>$\sigma$</p>
<p> $\sigma _{predicate}(R)$</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM R</span><br><span class="line">WHERE predicate;</span><br></pre></td></tr></table></figure>
</li>
<li><p>$\pi$</p>
<p> $ \pi <em>{A</em>{1},A<em>{2},…,A</em>{n}} (R) $</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT A1, A2, ... An</span><br><span class="line">FROM R;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>$U$</p>
<p> $(R\, U \, S)$</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM R</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM S;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>$\cap$</p>
<p> $(R\, \cap \, S)$</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM R</span><br><span class="line">INTERSECT</span><br><span class="line">SELECT * FROM S;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>$-$</p>
<p> $(R\, - \, S)$</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM R</span><br><span class="line">EXCEPT</span><br><span class="line">SELECT * FROM S;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>$\times$</p>
<p> $(R\, \times \, S)$</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM R</span><br><span class="line">CROSS JOIN</span><br><span class="line">SELECT * FROM S;</span><br><span class="line"></span><br><span class="line">SELECT * FROM R, S;</span><br></pre></td></tr></table></figure>
</li>
<li><p>$\bowtie$</p>
<p> $(R\, \bowtie \, S)$</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM R</span><br><span class="line">NATURAL JOIN</span><br><span class="line">SELECT * FROM S;</span><br></pre></td></tr></table></figure>
<p> <em>Join type</em>:</p>
<ul>
<li>Cross join</li>
<li><p>Inner join (<font color="red">!! NATURAL JOIN AND INNER JOIN have different result</font>)</p>
<ul>
<li><p>Natural join$(R\, \bowtie \, S)$</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM R NATURAL JOIN S;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Theta join$(R\, \bowtie_{\theta} \, S)$</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM R INNER JOIN S ON R.C1 = S.C1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Semi join$(R\, \ltimes \, S)$</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM R WHERE EXISTS (SELECT * FROM S WHERE R.C1 = S.C1);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Anti join$(R\, \triangleright \, S)$</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM R WHERE NOT EXISTS (SELECT * FROM S WHERE R.C1 = S.C1);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Outer join</p>
<ul>
<li><p>Left outer join $(R\, ⟕ \, S)$</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM R LEFT OUTER JOIN S ON R.C1 = S.C1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Right outer join $(R\, ⟖ \, S)$</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM R RIGHT OUTER JOIN S ON R.C1 = S.C1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Full outer join (Union)</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>extra operators</p>
<ul>
<li>Rename $\rho$</li>
<li>Assignment $R\leftarrow S$</li>
<li>Duplicate Elimination $\delta$</li>
<li>Agregation $\gamma$</li>
<li>Sorting $\tau$</li>
<li>Division $R\div S$ </li>
</ul>
</li>
</ol>
<h4 id="Relational-Language"><a href="#Relational-Language" class="headerlink" title="Relational Language"></a>Relational Language</h4><ul>
<li>Data Manipulation Language(DML)</li>
<li>Data Definition Language(DDL) </li>
</ul>
<h4 id="Aggregation"><a href="#Aggregation" class="headerlink" title="Aggregation"></a>Aggregation</h4><ul>
<li>AVG</li>
<li>MIN</li>
<li>MAX</li>
<li>SUM</li>
<li>COUNT</li>
</ul>
<p>COUNT, SUM, AVG support DISTINCT.</p>
<p>Output of other columns outside pf an aggregate is undefined.</p>
<h4 id="Group-by"><a href="#Group-by" class="headerlink" title="Group by"></a>Group by</h4><p>Non-aggreagated values in SELECT output clause must appear in GROUP BY clause.</p>
<h4 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h4><p>Filters output results for GROUP BY.</p>
<h4 id="String-operations"><a href="#String-operations" class="headerlink" title="String operations"></a>String operations</h4><ul>
<li>LIKE: string matching<ul>
<li>“%”: matches any substring(including empty)</li>
<li>“_”: match any one character</li>
</ul>
</li>
<li>SUBSTRING(STRING, BEGIN, END)</li>
<li>UPPER</li>
<li>LOWER</li>
<li>||</li>
</ul>
<h4 id="Output-control"><a href="#Output-control" class="headerlink" title="Output control"></a>Output control</h4><ul>
<li>Order by</li>
<li>LIMIT OFFSET</li>
</ul>
<h4 id="Nested-query"><a href="#Nested-query" class="headerlink" title="Nested query"></a>Nested query</h4><ul>
<li>ALL</li>
<li>ANY</li>
<li>IN</li>
<li>EXISTS</li>
</ul>
<h4 id="Window-function"><a href="#Window-function" class="headerlink" title="Window function"></a>Window function</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT ... FUNC-NAME(...) OVER (...)</span><br><span class="line">FROM table</span><br></pre></td></tr></table></figure>
<p>FUNC-NAME:</p>
<ul>
<li>ROW_NUMBER(): number of the current row</li>
<li>RANK(): order position of the current row</li>
</ul>
<p>OVER: </p>
<ul>
<li>PARTITION BY: to specify group</li>
<li>ORDER BY</li>
</ul>
<h4 id="Common-Table-Expressions"><a href="#Common-Table-Expressions" class="headerlink" title="Common Table Expressions"></a>Common Table Expressions</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eg. print the sequence of numbers from 1 to 10</span><br><span class="line"></span><br><span class="line">with recursive cteSource(counter) as(</span><br><span class="line">	(select 1)</span><br><span class="line">	union all</span><br><span class="line">	(select counter+1 from cteSource</span><br><span class="line">	where counter &lt; 10)</span><br><span class="line">)</span><br><span class="line">select * from cteSource;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL_for_beginners</title>
    <url>/2017/08/25/postgreSQL-for-beginners/</url>
    <content><![CDATA[<p>PostgreSQL for Beginners<br><a id="more"></a></p>
<h4 id="Server-Service"><a href="#Server-Service" class="headerlink" title="Server Service"></a>Server Service</h4><p>You can install multiple servers in a physical server using different ports and also have different locations to store data. </p>
<h4 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h4><p>A database is container of all the objects such as tables, functions, sequences and trigger.</p>
<ul>
<li>Table</li>
<li><p>Schema: </p>
<ul>
<li><p>A logical container of the tables and other database objects.</p>
</li>
<li><p>It is possible to assign permission to schemas, so you can restrict who can access the objects.</p>
</li>
<li><p>You can have multiple schemas in a database.</p>
</li>
</ul>
</li>
<li><p>Tablespace: </p>
<ul>
<li><p>Storage location where data is stored.</p>
</li>
<li><p>By default, PostgreSQL provides two tablespaces: <em>pg_default</em> and <em>pg_global</em></p>
<p>  <em>pg_default</em> is used for storing user data.</p>
<p>  <em>pg_global</em> is used for storing system data.</p>
</li>
</ul>
</li>
<li><p>Views</p>
<ul>
<li><p>Virtual tables that are used to basically simplify complex queries.</p>
</li>
<li><p>Used to apply security for a set of records. You can use view to hide information or protect certain parts of a table from others to see, so you can create a view from a table.</p>
</li>
</ul>
</li>
<li><p>Functions</p>
<ul>
<li><p>Block of reuseable SQL Code.</p>
</li>
<li><p>Returns acalar value of a list of records.</p>
</li>
<li>Return composite objects.</li>
</ul>
</li>
<li><p>Cast </p>
<ul>
<li>Convert one data type into another data type. </li>
<li>It is used with functions to perform conversion.</li>
<li>You can create custom casts to overide the default.</li>
</ul>
</li>
<li><p>Operator</p>
<ul>
<li>A symbolic function</li>
<li>You can define your own custom operators</li>
</ul>
</li>
<li><p>Sequences</p>
<ul>
<li>Used to manage auto-increment columns</li>
</ul>
</li>
<li><p>Extension</p>
<ul>
<li>Used to wrap other objects such as casts, indexes, functions and others into a single unit</li>
</ul>
</li>
</ul>
<h4 id="PostreSQL-Fundamentals"><a href="#PostreSQL-Fundamentals" class="headerlink" title="PostreSQL Fundamentals"></a>PostreSQL Fundamentals</h4><h5 id="DATA-Types"><a href="#DATA-Types" class="headerlink" title="DATA Types"></a>DATA Types</h5><ul>
<li>Boolean: True, False, NULL</li>
<li>Character: Char(n), Varchar(n), text</li>
<li>Number: small integer(smallint), integer(int), serial(autoincrementing integer), float(n), real or float8, numeric or numeric(p,s)</li>
</ul>
<p><img src="https://github.com/Annashuo/hello-world/blob/master/numerial_data_type.png?raw=true" alt></p>
<ul>
<li><p>Temporal: </p>
<ul>
<li><strong>date</strong> store date values only</li>
<li><strong>time</strong> store time of the day values</li>
<li><strong>timestamp</strong> store data and time</li>
<li><strong>interval</strong> store periods of time</li>
<li><strong>timestamptz</strong> store both timestamp and time zone data</li>
</ul>
</li>
<li><p>Array</p>
</li>
<li><p>Special types</p>
<ul>
<li><strong>box</strong>: a rectangular box</li>
<li><strong>line</strong>: a set of points</li>
<li><strong>point</strong>: a geometric pair of numbers</li>
<li><strong>lseg</strong>: a line segment</li>
<li><strong>polygon</strong>: a closed geometric</li>
<li><strong>inet</strong>: an IP4 address</li>
<li><strong>macaddr</strong>: a MAC address</li>
</ul>
</li>
</ul>
<h5 id="UNIQUE-constraints"><a href="#UNIQUE-constraints" class="headerlink" title="UNIQUE constraints"></a>UNIQUE constraints</h5><p>Ensures values in a column or group of columns are unique in a table.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE person(</span><br><span class="line">	id serial PRIMARY KEY,</span><br><span class="line">	first_name VARCHAR(50),</span><br><span class="line">	last_name VARCHAR(50),</span><br><span class="line">	email VARCHAR(50) UNIQUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h5 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h5><p>Filtering rows returned from SELECT query<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE conditions;</span><br></pre></td></tr></table></figure></p>
<h5 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h5><p>Query data from all columns</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM table_name;</span><br><span class="line"></span><br><span class="line">SELECT column1, column2</span><br><span class="line">FROM table_name;</span><br></pre></td></tr></table></figure>
<h5 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h5><p>Removing duplicate records</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT column1, column2</span><br><span class="line">FROM table_name</span><br><span class="line">ORDER BY</span><br><span class="line">column1 ASC,</span><br><span class="line">column2 DESC;</span><br></pre></td></tr></table></figure>
<h5 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h5><p>Sort data returned by SELECT statement, default is ASC.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT column1, column2</span><br><span class="line">FROM table_name</span><br><span class="line">ORDER BY</span><br><span class="line">column1 ASC,</span><br><span class="line">column2 DESC;</span><br></pre></td></tr></table></figure>
<h5 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h5><p>Used to divide rows return ed from a SELECT statement into groups.</p>
<p>You can apply aggregate function e.g SUM and COUNT</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column1, aggregate_function(column2)</span><br><span class="line">FROM table1</span><br><span class="line">GROUP BY column1;</span><br></pre></td></tr></table></figure>
<h5 id="AGGREGATE-FUNCTION"><a href="#AGGREGATE-FUNCTION" class="headerlink" title="AGGREGATE FUNCTION"></a>AGGREGATE FUNCTION</h5><p>Used to perform calculations on data</p>
<p>They return a single value calculated from values in a column</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">FUNCTION</th>
<th style="text-align:center">DESCRIPTION </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AVG()</td>
<td style="text-align:center">Return average value</td>
</tr>
<tr>
<td style="text-align:center">COUNT()</td>
<td style="text-align:center">Return number of rows</td>
</tr>
<tr>
<td style="text-align:center">MAX()</td>
<td style="text-align:center">Return the largest value</td>
</tr>
<tr>
<td style="text-align:center">MIN()</td>
<td style="text-align:center">Return smallest value</td>
</tr>
<tr>
<td style="text-align:center">SUM()</td>
<td style="text-align:center">Return the sum</td>
</tr>
<tr>
<td style="text-align:center">FIRST() and LAST()</td>
<td style="text-align:center">Return first and last value</td>
</tr>
</tbody>
</table>
</div>
<h5 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h5><p>Used to in conjunction with GROUP BY clause</p>
<p>Used filter group rows that do not satisfy a specified condition.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column1, aggregate_function(column2)</span><br><span class="line">FROM table_name</span><br><span class="line">GROUP BY column1</span><br><span class="line">HAVING condition;</span><br></pre></td></tr></table></figure>
<h4 id="TRUNCATE-and-DROP"><a href="#TRUNCATE-and-DROP" class="headerlink" title="TRUNCATE and DROP"></a>TRUNCATE and DROP</h4><p>TRUNCATE removes all data from a table</p>
<p>DROP delete the table from the database</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TRUNCATE TABLE table_name;</span><br><span class="line">DROP TABLE table_name;</span><br></pre></td></tr></table></figure>
<h4 id="Postgres-CRUD-Operations"><a href="#Postgres-CRUD-Operations" class="headerlink" title="Postgres CRUD Operations"></a>Postgres CRUD Operations</h4><h5 id="Create-database-and-table"><a href="#Create-database-and-table" class="headerlink" title="Create database and table"></a>Create database and table</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name(</span><br><span class="line">	column1_name datatype column_constraint,</span><br><span class="line">	column2_name datatype column_constraint,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h5 id="Read-table"><a href="#Read-table" class="headerlink" title="Read table"></a>Read table</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT columns</span><br><span class="line">FROM table_name;</span><br></pre></td></tr></table></figure>
<h5 id="Subquery"><a href="#Subquery" class="headerlink" title="Subquery"></a>Subquery</h5><p>Allows you to construct complex queries.</p>
<p>Query nested inside another query such as SELECT.</p>
<p>To construct a subquery the second query is placed in brackets.</p>
<p>The WHERE clause is used as expression in the subquery.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &quot;column_name1&quot;</span><br><span class="line">FROM &quot;table_name1&quot;</span><br><span class="line">WHERE &quot;column_name2&quot;[Comparison Operator]</span><br><span class="line">(SELECT &quot;column_name3&quot;</span><br><span class="line">FROM &quot;table_name2&quot;</span><br><span class="line">WHERE &quot;condition&quot;);</span><br></pre></td></tr></table></figure>
<h5 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE table_name</span><br><span class="line">SET column1=value1,</span><br><span class="line">    column2=value2</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure>
<h5 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELECT FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure>
<h5 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name(column1, column2)</span><br><span class="line">VALUES(value1, value2);</span><br></pre></td></tr></table></figure>
<h4 id="OPERATOR"><a href="#OPERATOR" class="headerlink" title="OPERATOR"></a>OPERATOR</h4><h5 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h5><p><img src="https://github.com/Annashuo/hello-world/blob/master/postgres_operator.png?raw=true" alt></p>
<h5 id="BETWEEN-OR-NOT-BETWEEN"><a href="#BETWEEN-OR-NOT-BETWEEN" class="headerlink" title="BETWEEN OR NOT BETWEEN"></a>BETWEEN OR NOT BETWEEN</h5><p>Values can be numbers, text or dates</p>
<p>Included in the WHERE clause</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column_names</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name (NOT) BETWEEN value1 AND value2;</span><br></pre></td></tr></table></figure>
<h5 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a>NOT</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT coloumn_names</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE NOT condition</span><br></pre></td></tr></table></figure>
<h5 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h5><p>Match patten in a column.</p>
<p>% wildcard allows you to match string of any length characters including zero.</p>
<p>_ wildcard allows you to match a single character</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column LIKE patten;</span><br></pre></td></tr></table></figure>
<h5 id="OR-amp-AND"><a href="#OR-amp-AND" class="headerlink" title="OR &amp; AND"></a>OR &amp; AND</h5><p>AND operator and OP operator can be used in SELECT, INSERT, UPDATE, DELECT.</p>
<p>Use parenthesis () when combining conditions.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition AND/OR condition</span><br></pre></td></tr></table></figure>
<h5 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h5><p>Gets a subset of row returned by a query</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM table_name</span><br><span class="line">LIMIT n;</span><br></pre></td></tr></table></figure>
<h5 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h5><p>In a <strong>list</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column_name</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name IN (value1, value2)</span><br></pre></td></tr></table></figure>
<h5 id="UNION-amp-UNION-ALL"><a href="#UNION-amp-UNION-ALL" class="headerlink" title="UNION &amp; UNION ALL"></a>UNION &amp; UNION ALL</h5><p>Used to combine result sets of multiple queries into a single result.</p>
<p>Without <strong>ALL</strong>, removes all duplicate rows. With <strong>ALL</strong>, does not remove duplicate rows.</p>
<p>Both queries must return same number of columns.</p>
<p>The corresponding columns in the queries must have compatible data type.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2</span><br><span class="line">FROM table1</span><br><span class="line">UNION</span><br><span class="line">SELECT column1, column2</span><br><span class="line">FROM table2;</span><br></pre></td></tr></table></figure>
<h5 id="INTERSECT"><a href="#INTERSECT" class="headerlink" title="INTERSECT"></a>INTERSECT</h5><p>Used to combine result set of two or more SELECT statements into a single result.</p>
<p>The INTERSECT operator returns all rows in both result sets.</p>
<p>The number of columns that appear in the SELECT statement must be the same.</p>
<p>The data types of the columns must be compatible.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2</span><br><span class="line">FROM table1</span><br><span class="line">INTERSECT</span><br><span class="line">SELECT column1, column2</span><br><span class="line">FROM table2;</span><br></pre></td></tr></table></figure>
<h5 id="EXCEPT"><a href="#EXCEPT" class="headerlink" title="EXCEPT"></a>EXCEPT</h5><p>Retuen rows by comparing the result sets of two or more queries.</p>
<p>Return rows in the firdt query not present in output of the second query.</p>
<p>Returns distinct rows from the first(left) query not in out of the second(right) query.</p>
<p>The number of colums and their orders must be the same in both queries.</p>
<p>The data types of the respective columns must be compatible.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2</span><br><span class="line">FROM table1</span><br><span class="line">WHERE conditionA</span><br><span class="line">EXCEPT</span><br><span class="line">SELECT column1, column2</span><br><span class="line">FROM table2</span><br><span class="line">WHERE conditionB;</span><br></pre></td></tr></table></figure>
<h4 id="JOINS"><a href="#JOINS" class="headerlink" title="JOINS"></a>JOINS</h4><p>Used to retrieve data from multiple tables.</p>
<p>Joins is performed when two or more tables are joined in a SQL statement.</p>
<p>Tables participating in the join should have related columns between them.</p>
<p>Types of Joins</p>
<ul>
<li>INNER JOIN</li>
<li>LEFT JOIN</li>
<li>OUTER JOIN</li>
<li>CROSS JOIN: produce cartesian product of rows from combind joined table. Tables can have no matching columns</li>
<li>NATURAL JOIN: create an implicit join based on matching column names in the tables. It can be INNER JOIN, LEFT JOIN, RIGHT JOIN. Default is INNER JOIN.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM tableA</span><br><span class="line">(INNER/LEFT/OURTER) JOIN tableB ON tableA.column = tableB.column;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM table1 </span><br><span class="line">(CROSS/NATURAL) JOIN table2;</span><br></pre></td></tr></table></figure>
<p>INNER JOIN:<br><img src="https://github.com/Annashuo/hello-world/blob/master/INNER_JOIN.png?raw=true" alt></p>
<p>LEFT JOIN:<br><img src="https://github.com/Annashuo/hello-world/blob/master/LEFT_JOIN.png?raw=true" alt></p>
<p>OURTER JOIN:<br><img src="https://github.com/Annashuo/hello-world/blob/master/OUTER_JOIN.png?raw=true" alt></p>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>postgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>llvm和jit</title>
    <url>/2017/08/24/llvm%E5%92%8Cjit/</url>
    <content><![CDATA[<p>此文介绍编译器，llvm和jit</p>
<a id="more"></a>
<h3 id="传统三段式编译器"><a href="#传统三段式编译器" class="headerlink" title="传统三段式编译器"></a>传统三段式编译器</h3><p><img src="https://github.com/Annashuo/hello-world/blob/master/%E4%BC%A0%E7%BB%9F%E7%BC%96%E8%AF%91%E5%99%A8.png?raw=true" alt="传统编译器"></p>
<p>详细版：</p>
<p><img src="https://github.com/Annashuo/hello-world/blob/master/%E8%AF%A6%E7%BB%86%E7%89%88%E4%BC%A0%E7%BB%9F%E7%BC%96%E8%AF%91%E5%99%A8.png?raw=true" alt="详细版传统编译器"></p>
<ul>
<li>前端解析源代码，检查错误，并构建语言特定的抽象语法树(AST)</li>
<li>优化器负责进行各种转换，尝试改进代码的运行时间，例如消除冗余计算</li>
<li>后端将代码映射到目标指令集上，包括指令选择，寄存器分配和指令调度</li>
</ul>
<h3 id="LLVM三阶段设计"><a href="#LLVM三阶段设计" class="headerlink" title="LLVM三阶段设计"></a>LLVM三阶段设计</h3><p><img src="https://github.com/Annashuo/hello-world/blob/master/LLVM三阶段.png?raw=true" alt></p>
<p>任何一种前端，只要生成LLVM IR文件，都可以复用LLVM的优化器和后端。默认的LLVM的c语言前端是clang。</p>
<h3 id="LLVM几种格式的文件转换"><a href="#LLVM几种格式的文件转换" class="headerlink" title="LLVM几种格式的文件转换"></a>LLVM几种格式的文件转换</h3><p><img src="https://github.com/Annashuo/hello-world/blob/master/LLVM文件转换.png?raw=true" alt="LLVM文件转换"></p>
<ul>
<li>a.c：c语言源码</li>
<li>a.bc：llvm字节码二进制表示</li>
<li>a.ll：llvm字节码文本形式</li>
<li>a.s：机器汇编码</li>
<li>a.out：可执行的二进制文件</li>
</ul>
<p><strong>.bc 和 .ll文件就是LLVM IR文件，两者是同一内容的不同表示方式。</strong></p>
<h4 id="c源码，IR的比较"><a href="#c源码，IR的比较" class="headerlink" title="c源码，IR的比较"></a>c源码，IR的比较</h4><p>add.c</p>
<pre><code>unsigned add(unsigned a, unsigned b){
    return a + b;
}
</code></pre><p>clang编译不优化</p>
<pre><code>编译命令：clang -S -emit-llvm add.c -o add.ll
</code></pre><p>LLVM IR表示<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">define i32 @add(i32 %a, i32 %b) #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"> 		%a.addr = alloca i32, align 4</span><br><span class="line"> 		%b.addr = alloca i32, align 4</span><br><span class="line"> 		store i32 %a, i32* %a.addr, align 4</span><br><span class="line"> 		store i32 %b, i32* %b.addr, align 4</span><br><span class="line"> 		%0 = load i32, i32* %a.addr, align 4</span><br><span class="line"> 		%1 = load i32, i32* %b.addr, align 4</span><br><span class="line"> 		%add = add i32 %0, %1</span><br><span class="line"> 		ret i32 %add</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>clang编译O3优化</p>
<pre><code>编译命令：clang -O3 -S -emit-llvm add.c -o add.ll
</code></pre><p>LLVM IR表示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">define i32 @add(i32 %a, i32 %b) #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"> 		%add = add i32 %b, %a</span><br><span class="line"> 		ret i32 %add</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>除此之外，llvm支持O4优化，即多个.bc文件进行link的时候进行优化。而且llvm支持在优化器加入自定义的pass来优化字节码，从而根据具体场景生成更优的机器码。这些都是gcc不具备的功能。</p>
<h3 id="动态编译与即时编译器"><a href="#动态编译与即时编译器" class="headerlink" title="动态编译与即时编译器"></a>动态编译与即时编译器</h3><h4 id="静态编译和动态编译"><a href="#静态编译和动态编译" class="headerlink" title="静态编译和动态编译"></a>静态编译和动态编译</h4><ul>
<li><p>静态编译</p>
<p><img src="https://github.com/Annashuo/hello-world/blob/master/静态编译.png?raw=true" alt></p>
<p>逐行编译执行。</p>
</li>
<li><p>动态编译</p>
<p><img src="https://github.com/Annashuo/hello-world/blob/master/动态编译.png?raw=true" alt></p>
<p>预编译至字节码格式，即时编译器根据执行的过程的信息一次性编译成最优的二进制机器码执行。</p>
</li>
</ul>
<h4 id="即时编译器JIT"><a href="#即时编译器JIT" class="headerlink" title="即时编译器JIT"></a>即时编译器JIT</h4><p>JIT最早出现于java中，现以JIT 编译器在 JVM 中的运作原理为主介绍JIT，在llvm中过程类似。</p>
<p><img src="https://github.com/Annashuo/hello-world/blob/master/jit.png?raw=true" alt></p>
<p>字节码的执行模式一般有三种：</p>
<ul>
<li>完全采用解释器模式执行</li>
<li>完全采用即时编译器模式执行</li>
<li>采用解释器+即时编译器混合模式执行</li>
</ul>
<p>完全采用即时编译器并不是一种高效的做法。即时编译器的开销大，如果编译的代码仅仅只执行一次，采用解释器逐行进行解释执行的效率会比采用即时编译器一次全部编译后执行更高。但如果一段代码被多次调用，即时编译器会做类型特化。比如重复调用add(x,y)函数，解释器解释执行时需要判断x和y的类型，即使实际代码中x和y始终是int型，解释器也不能忽略这些操作。但是即时编译器可以根据调用时的情况，将函数编译成add_int(x:int, y:int)，减少了类型判断的操作。</p>
<p>解释器+即时编译器混合模式本质是一种静态编译，但是解释器在逐行执行时，若发现某段代码是要求即时编译的，则启动即时编译器编译这段代码，然后嵌入到内存中，在逐行执行的过程中，会根据地址到内存中取出即时编译器编译的结果，当成一条指令运行。</p>
<p>LLVM中采用解释器+即时编译器混合模式。LLVM3.6以上执行引擎库称为MC库，其中MCJIT基于核心MC库。LLVM默认使用MC库解释执行字节码，但开发人员可以通过c或c++的接口函数编写和修改LLVM的IR代码，定义某一部分代码的执行引擎为MCJIT，从而调用JIT执行该部分代码。</p>
<h3 id="LLVM-IR"><a href="#LLVM-IR" class="headerlink" title="LLVM IR"></a>LLVM IR</h3><p>LLVM支持c++和C api编写和修改LLVM IR文件。通过这两种api编写的LLVM代码，不需要再经过编译器前端的解析就可以直接生成LLVM IR文件。因为LLVM IR接近于汇编语言的代码逻辑，所以写起来会比较繁琐。</p>
<h4 id="LLVM-IR框架"><a href="#LLVM-IR框架" class="headerlink" title="LLVM IR框架"></a>LLVM IR框架</h4><p><img src="https://github.com/Annashuo/hello-world/blob/master/api.png?raw=true" alt></p>
<p>module是多个function的集合，它对应一个执行引擎engine，engine可以是纯MC类型的也可以是MCJIT类型的，这决定了这个module采用何种执行方式。Target指明了这个engine是执行在什么目标机器上。</p>
<p>每个function内部由多个basic block构成。譬如一个条件语句包含三个basic block：判断，iftrue，iffalse。判断块负责执行判断指令，iftrue块执行条件成立时的代码，iffalse块执行条件不成立时的代码。</p>
<p>每一个basic block包含多条指令，这里的指令主要是load，store，add，minus，leal等类似于汇编逻辑的指令。</p>
<p>LLVM C API随着LLVM版本一直在变，目前还没有稳定下来，目前已知LLVM3.6版本和3.7版本API不可通用，3.7和4.0以上版本不可通用。</p>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>llvm</tag>
      </tags>
  </entry>
  <entry>
    <title>llvm安装</title>
    <url>/2017/08/24/llvm%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>mac下安装xcode自带llvm</p>
<p>以下为在linux系统下的安装</p>
<p>以下操作目录均为/data/home/llvm</p>
<a id="more"></a>
<h3 id="安装autoconf和automake"><a href="#安装autoconf和automake" class="headerlink" title="安装autoconf和automake"></a>安装autoconf和automake</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载autoconf-2.65.tar.bz2和automake-1.14.1.tar.gz</span><br><span class="line">tar -jxvf autoconf-2.65.tar.bz2</span><br><span class="line">tar -zxvf automake-1.14.1.tar.gz</span><br><span class="line"></span><br><span class="line">cd autoconf-2.65</span><br><span class="line">./configure; make; make install</span><br><span class="line">cd ../automake-1.14.1</span><br><span class="line">./configure; make; make install</span><br></pre></td></tr></table></figure>
<h3 id="安装gcc4-8以上版本"><a href="#安装gcc4-8以上版本" class="headerlink" title="安装gcc4.8以上版本"></a>安装gcc4.8以上版本</h3><p>一般电脑都安装了gcc，具体安装过程不再此详述。</p>
<h3 id="安装python2-7-5"><a href="#安装python2-7-5" class="headerlink" title="安装python2.7.5"></a>安装python2.7.5</h3><p>安装python可以直接用yum或者下载安装包进行安装，过程再此也不再详述。</p>
<h3 id="安装cmake"><a href="#安装cmake" class="headerlink" title="安装cmake"></a>安装cmake</h3><pre><code>下载cmake-3.8.2.tar.gz
tar -zxvf cmake-3.8.2.tar.gz  
cd cmake-3.8.2  
./configure --prefix=/data/home/llvm/cmake  
make  
make install  
添加环境变量export PATH=/data/home/llvm/cmake/bin:$PATH
</code></pre><h4 id="安装完成后"><a href="#安装完成后" class="headerlink" title="安装完成后"></a>安装完成后</h4><p><img src="https://github.com/Annashuo/hello-world/blob/master/cmake.png?raw=true" alt="cmake--version"></p>
<h4 id="可能出现的一些坑："><a href="#可能出现的一些坑：" class="headerlink" title="可能出现的一些坑："></a>可能出现的一些坑：</h4><ol>
<li>报错/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21’ not found：</li>
</ol>
<p>解决方法: <a href="http://blog.csdn.net/rznice/article/details/51090966" target="_blank" rel="noopener">http://blog.csdn.net/rznice/article/details/51090966</a></p>
<ol>
<li>找不到sys/acl.h等文件</li>
</ol>
<p>解决方法： sudo yum list libacl* 把列出来的所有包都安装上</p>
<ol>
<li>找不到xml/…等文件</li>
</ol>
<p>解决方法： sudo yum list libxml* 把列出来的所有包都安装上</p>
<h3 id="安装llvm和clang3-7-1"><a href="#安装llvm和clang3-7-1" class="headerlink" title="安装llvm和clang3.7.1"></a>安装llvm和clang3.7.1</h3><pre><code>下载：
llvm-3.7.1.src.tar.xz
cfe-3.7.1.src.tar.xz
compiler-rt-3.7.1.src.tar.xz
clang-tools-extra-3.7.1.src.tar.xz 
libcxx-3.7.1.src.tar.xz

tar -xvf llvm-3.7.1.src.tar.xz  
tar -xvf cfe-3.7.1.src.tar.xz  
tar -xvf compiler-rt-3.7.1.src.tar.xz  
tar -xvf clang-tools-extra-3.7.1.src.tar.xz  
tar -xvf libcxx-3.7.1.src.tar.xz 

mv cfe-3.7.1.src clang  
mv clang/ llvm-3.7.1.src/tools/

mv clang-tools-extra-3.7.1.src extra  
mv extra/ llvm-3.7.1.src/tools/clang/

mv compiler-rt-3.7.1.src compiler-rt  
mv compiler-rt llvm-3.7.1.src/projects/

mkdir build-3.7.1
cd build-3.7.1

cmake -DCMAKE_BUILD_TYPE=Debug /data/home/llvm/llvm-3.7.1.src
make -j32
cmake -DCMAKE_INSTALL_PREFIX=/data/home/llvm/llvm37 -P cmake_install.cmake
添加环境变量：
export PATH=/data/home/llvm/llvm37/bin:$PATH
export LD_LIBRARY_PATH=/data/home/llvm/llvm37/lib:$LD_LIBRARY_PATH
</code></pre><h4 id="安装完成后-1"><a href="#安装完成后-1" class="headerlink" title="安装完成后"></a>安装完成后</h4><p><img src="https://github.com/Annashuo/hello-world/blob/master/lli.png?raw=true" alt></p>
<h3 id="安装一些依赖库（根据gcc版本可选）"><a href="#安装一些依赖库（根据gcc版本可选）" class="headerlink" title="安装一些依赖库（根据gcc版本可选）"></a>安装一些依赖库（根据gcc版本可选）</h3><pre><code>cd libcxx-3.7.1.src/lib
./buildit
sudo cp ./libc++.so.1.0 /usr/lib
cd /usr/lib
sudo ln -sf libc++.so.1.0 usr/lib/libc++.so
sudo ln -sf libc++.so.1.0 usr/lib/libc++.so.1
cd ~
</code></pre><h4 id="安装完成后-2"><a href="#安装完成后-2" class="headerlink" title="安装完成后"></a>安装完成后</h4><p><img src="https://github.com/Annashuo/hello-world/blob/master/libcpp.png?raw=true" alt></p>
<h3 id="测试clang和llvm和gdb是否可用"><a href="#测试clang和llvm和gdb是否可用" class="headerlink" title="测试clang和llvm和gdb是否可用"></a>测试clang和llvm和gdb是否可用</h3><h4 id="test-c文件"><a href="#test-c文件" class="headerlink" title="test.c文件"></a>test.c文件</h4><pre><code>#include &lt;stdio.h&gt;  
int main(){
    printf(&quot;hello world\n&quot;);
return 0;
}
</code></pre><p>编译命令：</p>
<ul>
<li><p>c文件直接产生可执行文件(a.out)</p>
<p>  <code>clang test.c</code></p>
</li>
<li><p>c文件产生IR文件(.ll)</p>
<p>  <code>clang -S -emit-llvm -c test.c -o test.ll</code></p>
</li>
<li><p>c文件产生字节码文件(.bc)</p>
<p>  <code>clang -emit-llvm -c test.c -o test.bc</code></p>
</li>
<li><p>c文件生成汇编文件(.s)</p>
<p>  <code>clang -S test.c -o test.s</code></p>
</li>
<li><p>c文件生成目标文件(.o)</p>
<p>  <code>clang -c test.c -o test.o</code></p>
</li>
<li><p>目标文件生成可执行文件</p>
<p>  <code>clang test.o -o test</code></p>
</li>
<li><p>字节码文件生成cpp文件</p>
<p>  <code>llc -march=cpp test.bc</code></p>
</li>
<li><p>字节码文件生成汇编文件(.s)</p>
<p>  <code>llc test.bc</code></p>
</li>
</ul>
<h4 id="new-feature-cpp文件"><a href="#new-feature-cpp文件" class="headerlink" title="new_feature.cpp文件"></a>new_feature.cpp文件</h4><pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
class myClass
{
public:
    std::string s=&quot;Hello CPP\n&quot;;
};
int main(){
    std::cout&lt;&lt;myClass().s;
}
</code></pre><ul>
<li><p>生成可执行a.out文件</p>
<p>  <code>clang++ --std=c++0x  new_feature.cpp</code></p>
<h4 id="gdb的使用"><a href="#gdb的使用" class="headerlink" title="gdb的使用"></a>gdb的使用</h4><p>showdebug.c文件</p>
</li>
</ul>
<pre><code>1   int compute_factorial(int n)
2   {
3       if (n &lt;= 1)
4           return 1;
5
6       int f = n;
7       while (--n &gt; 1)
8           f \*= n;
9       return f;
10  }
11
12
13  int main(int argc, char** argv)
14  {
15      if (argc &lt; 2)
16          return -1;
17      char firstletter = argv[1][0];
18      int result = compute_factorial(firstletter - &#39;0&#39;);
19
20      // Returned result is clipped at 255...
21      return result;
22  }
</code></pre><p>gdb调试过程：</p>
<pre><code>$ clang -cc1 -O0 -g -emit-llvm showdebug.c
$ gdb --quiet --args lli showdebug.ll 5
Reading symbols from lli...done.
(gdb) b showdebug.c:6
No source file named showdebug.c.
Make breakpoint pending on future shared library load? (y or [n]) y
Breakpoint 1 (showdebug.c:6) pending.
(gdb) r
Starting program: lli -use-mcjit showdebug.ll 5
[Thread debugging using libthread_db enabled]

Breakpoint 1, compute_factorial (n=5) at showdebug.c:6
6        int f = n;
(gdb) p n
$1 = 5
(gdb) p f
$2 = 0
(gdb) n
7        while (--n &gt; 1)
(gdb) p f
$3 = 5
(gdb) b showdebug.c:9
Breakpoint 2 at 0x7ffff7ed404c: file showdebug.c, line 9.
(gdb) c
Continuing.

Breakpoint 2, compute_factorial (n=1) at showdebug.c:9
9        return f;
(gdb) p f
$4 = 120
(gdb) bt
#0  compute_factorial (n=1) at showdebug.c:9
#1  0x00007ffff7ed40a9 in main (argc=2, argv=0x16677e0) at showdebug.c:18
#2  0x3500000001652748 in ?? ()
#3  0x00000000016677e0 in ?? ()
#4  0x0000000000000002 in ?? ()
#5  0x0000000000d953b3 in llvm::MCJIT::runFunction (this=0x16151f0, F=0x1603020, ArgValues=...) at /home/ebenders_test/llvm_svn_rw/lib/ExecutionEngine/MCJIT/MCJIT.cpp:161
#6  0x0000000000dc8872 in llvm::ExecutionEngine::runFunctionAsMain (this=0x16151f0, Fn=0x1603020, argv=..., envp=0x7fffffffe040)
at /home/ebenders_test/llvm_svn_rw/lib/ExecutionEngine/ExecutionEngine.cpp:397
#7  0x000000000059c583 in main (argc=4, argv=0x7fffffffe018, envp=0x7fffffffe040) at /home/ebenders_test/llvm_svn_rw/tools/lli/lli.cpp:324
(gdb) finish
Run till exit from #0  compute_factorial (n=1) at showdebug.c:9
0x00007ffff7ed40a9 in main (argc=2, argv=0x16677e0) at showdebug.c:18
18       int result = compute_factorial(firstletter - &#39;0&#39;);
Value returned is $5 = 120
(gdb) p result
$6 = 23406408
(gdb) n
21       return result;
(gdb) p result
$7 = 120
(gdb) c
Continuing.

Program exited with code 0170.
(gdb)
</code></pre><p>可能出现的坑：</p>
<ol>
<li><p>Reading symbols from lli…(no debugging symbols found)…done</p>
<p> 解决方法：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">退出gdb</span><br><span class="line">lli --version</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Annashuo/hello-world/blob/master/lli.png?raw=true" alt></p>
<pre><code>如果里面没有一句DEBUG build with assertions.

重装llvm，注意重装时要先make clean
</code></pre><ol>
<li><p>Missing separate debuginfos, use: debuginfo-install ncurses-libs-5.9-13.20130511.el7.x86_64</p>
<p> 不影响gdb使用，忽略</p>
</li>
<li><p>[Inferior 1 (process 15958) exited with code 0170]</p>
<p> 不影响gdb使用，忽略</p>
</li>
</ol>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>llvm</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用指令</title>
    <url>/2017/08/24/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>查看端口号占用   <code>lsof -i:5432</code></p>
<p>查看io   <code>iostat -x -k 1</code></p>
<p>修改用户usr1的默认目录  <code>usermod -u uid -d newdirectory -m usr1</code></p>
<p>拷贝文件夹  <code>cp -R 旧 新</code></p>
<p>软连接 <code>ln -s 有内容的  没有内容的</code></p>
<p>去除 <code>rm -r -i 没有内容的</code></p>
<p>kill掉某个进程  <code>kill -s 9 pid</code></p>
<p>查看用户uid  <code>id username</code></p>
<p>对比不同 <code>diff -Unarq  文件夹1  文件夹2 &gt;diff.log</code></p>
<p>查找文件夹下含有字符串的文件 <code>grep -rn &quot;字符串&quot; *</code></p>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>recommendation-sequential</title>
    <url>/2017/05/02/recommendation-sequential/</url>
    <content><![CDATA[<p>本文主要介绍“集体智慧编程”第二章的内容，python环境为2.7,所有代码都在<a href="https://github.com/Annashuo/hadoop_project/blob/master/recommendations.py" target="_blank" rel="noopener">这里</a></p>
<a id="more"></a>
<h3 id="数据介绍"><a href="#数据介绍" class="headerlink" title="数据介绍"></a>数据介绍</h3><h4 id="简单自建critics数据集"><a href="#简单自建critics数据集" class="headerlink" title="简单自建critics数据集"></a>简单自建critics数据集</h4><p>格式为 ‘人名’:{‘电影一’:评分一,’电影二’:评分二,…}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">critics=&#123;&apos;Lisa Rose&apos;: &#123;&apos;Lady in the Water&apos;: 2.5, &apos;Snakes on a Plane&apos;: 3.5,</span><br><span class="line"> &apos;Just My Luck&apos;: 3.0, &apos;Superman Returns&apos;: 3.5, &apos;You, Me and Dupree&apos;: 2.5, </span><br><span class="line"> &apos;The Night Listener&apos;: 3.0&#125;,</span><br><span class="line">&apos;Gene Seymour&apos;: &#123;&apos;Lady in the Water&apos;: 3.0, &apos;Snakes on a Plane&apos;: 3.5, </span><br><span class="line"> &apos;Just My Luck&apos;: 1.5, &apos;Superman Returns&apos;: 5.0, &apos;The Night Listener&apos;: 3.0, </span><br><span class="line"> &apos;You, Me and Dupree&apos;: 3.5&#125;, </span><br><span class="line">&apos;Michael Phillips&apos;: &#123;&apos;Lady in the Water&apos;: 2.5, &apos;Snakes on a Plane&apos;: 3.0,</span><br><span class="line"> &apos;Superman Returns&apos;: 3.5, &apos;The Night Listener&apos;: 4.0&#125;,</span><br><span class="line">&apos;Claudia Puig&apos;: &#123;&apos;Snakes on a Plane&apos;: 3.5, &apos;Just My Luck&apos;: 3.0,</span><br><span class="line"> &apos;The Night Listener&apos;: 4.5, &apos;Superman Returns&apos;: 4.0, </span><br><span class="line"> &apos;You, Me and Dupree&apos;: 2.5&#125;,</span><br><span class="line">&apos;Mick LaSalle&apos;: &#123;&apos;Lady in the Water&apos;: 3.0, &apos;Snakes on a Plane&apos;: 4.0, </span><br><span class="line"> &apos;Just My Luck&apos;: 2.0, &apos;Superman Returns&apos;: 3.0, &apos;The Night Listener&apos;: 3.0,</span><br><span class="line"> &apos;You, Me and Dupree&apos;: 2.0&#125;, </span><br><span class="line">&apos;Jack Matthews&apos;: &#123;&apos;Lady in the Water&apos;: 3.0, &apos;Snakes on a Plane&apos;: 4.0,</span><br><span class="line"> &apos;The Night Listener&apos;: 3.0, &apos;Superman Returns&apos;: 5.0, &apos;You, Me and Dupree&apos;: 3.5&#125;,</span><br><span class="line">&apos;Toby&apos;: &#123;&apos;Snakes on a Plane&apos;:4.5,&apos;You, Me and Dupree&apos;:1.0,&apos;Superman Returns&apos;:4.0&#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="MoviesLens数据集"><a href="#MoviesLens数据集" class="headerlink" title="MoviesLens数据集"></a>MoviesLens数据集</h4><p><a href="https://grouplens.org/datasets/movielens/" target="_blank" rel="noopener">官方下载链接</a><br>下载下来的文件解压后主要有两个文件比较有用，一个是u.data，内容大概如下</p>
<p><img src="https://github.com/Annashuo/hello-world/blob/master/u_data_head10.png?raw=true" alt="u.data"></p>
<p>四列分别为usrID, movieID, rating, timestamp，每一行分别对应一个用户对一个影片的评分</p>
<p>第二个文件是u.item，大概内容如下</p>
<p><img src="https://github.com/Annashuo/hello-world/blob/master/u_item_head10.png?raw=true" alt="u.item"></p>
<p>新建loadMovieLens方法用于加载数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#注意将数据文件放在当前文件夹里的data文件夹下的movielens文件夹里</span><br><span class="line">def loadMovieLens(path=&apos;./data/movielens&apos;):</span><br><span class="line">  # Get movie titles</span><br><span class="line">  movies=&#123;&#125;</span><br><span class="line">  for line in open(path+&apos;/u.item&apos;):</span><br><span class="line">    (id,title)=line.split(&apos;|&apos;)[0:2]</span><br><span class="line">    movies[id]=title</span><br><span class="line">  </span><br><span class="line">  # Load data</span><br><span class="line">  prefs=&#123;&#125;</span><br><span class="line">  for line in open(path+&apos;/u.data&apos;):</span><br><span class="line">    (user,movieid,rating,ts)=line.split(&apos;\t&apos;)</span><br><span class="line">    prefs.setdefault(user,&#123;&#125;)</span><br><span class="line">    prefs[user][movies[movieid]]=float(rating)</span><br><span class="line">  return prefs</span><br></pre></td></tr></table></figure>
<h3 id="基于用户的协作型过滤（user-based-collabarative-filtering）"><a href="#基于用户的协作型过滤（user-based-collabarative-filtering）" class="headerlink" title="基于用户的协作型过滤（user-based collabarative filtering）"></a>基于用户的协作型过滤（user-based collabarative filtering）</h3><h4 id="相似度评价体系"><a href="#相似度评价体系" class="headerlink" title="相似度评价体系"></a>相似度评价体系</h4><h5 id="欧几里得距离评价"><a href="#欧几里得距离评价" class="headerlink" title="欧几里得距离评价"></a>欧几里得距离评价</h5><p>用属性构造偏好空间，两者在偏好空间中距离越近，说明两者的相似度越高。</p>
<p>比如对于以下的数据，计算Lisa Rose和Gene Seymour的欧几里得距离为<br>$Eu = sqrt((2.5-3.0)^2+(3.5-3.5)^2+(3.0-1.5)^2+(3.5-5.0)^2+(2.5-3.5)^2)$</p>
<p>欧几里得距离越小，说明两者相似度越高。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;Lisa Rose&apos;: &#123;&apos;Lady in the Water&apos;: 2.5, &apos;Snakes on a Plane&apos;: 3.5,</span><br><span class="line"> &apos;Just My Luck&apos;: 3.0, &apos;Superman Returns&apos;: 3.5, &apos;You, Me and Dupree&apos;: 2.5, </span><br><span class="line"> &apos;The Night Listener&apos;: 3.0&#125;,</span><br><span class="line">&apos;Gene Seymour&apos;: &#123;&apos;Lady in the Water&apos;: 3.0, &apos;Snakes on a Plane&apos;: 3.5, </span><br><span class="line"> &apos;Just My Luck&apos;: 1.5, &apos;Superman Returns&apos;: 5.0, &apos;The Night Listener&apos;: 3.0, </span><br><span class="line"> &apos;You, Me and Dupree&apos;: 3.5&#125;,</span><br></pre></td></tr></table></figure>
<p>现在我们人为构建一个公式，$1/(1+sqrt(Eu))$，这一函数返回值介于0到1，返回1说明两者有完全一样的偏好</p>
<p>欧几里得距离评价函数sim_distance(prefs, person1, person2)如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from math import sqrt</span><br><span class="line"></span><br><span class="line"># Returns a distance-based similarity score for person1 and person2</span><br><span class="line">def sim_distance(prefs,person1,person2):</span><br><span class="line">  # Get the list of shared_items</span><br><span class="line">  si=&#123;&#125;</span><br><span class="line">  for item in prefs[person1]: </span><br><span class="line">    if item in prefs[person2]: </span><br><span class="line">      si[item]=1</span><br><span class="line"></span><br><span class="line">  # if they have no ratings in common, return 0</span><br><span class="line">  if len(si)==0: return 0</span><br><span class="line"></span><br><span class="line">  # Add up the squares of all the differences</span><br><span class="line">  sum_of_squares=sum([pow(prefs[person1][item]-prefs[person2][item],2) </span><br><span class="line">                      for item in prefs[person1] if item in prefs[person2]])</span><br><span class="line"></span><br><span class="line">  return 1/(1+sum_of_squares)</span><br></pre></td></tr></table></figure>
<h5 id="皮尔逊相关度评价"><a href="#皮尔逊相关度评价" class="headerlink" title="皮尔逊相关度评价"></a>皮尔逊相关度评价</h5><p>对于随机变量X和Y，皮尔森相关系数的就是：(x和y的协方差) / (x的标准差∗y的标准差)，用于判断两组数的线性关系程度。相对于欧几里得距离评价法，皮尔逊相关度评价有一个明显的优点是，假如两个用户对相同的电影的评价是正相关的，但是始终有一个用户的评价比另一个偏高很多，运用欧氏距离，两个用户在偏好空间里可能距离是很远的，求得得相似度并不高，但是运用皮尔逊相关度评价，就可以得到两者相关性很高的结果，即相似度很高的结论。</p>
<p>皮尔逊相关度函数sim_pearson(prefs, p1, p2)如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Returns the Pearson correlation coefficient for p1 and p2</span><br><span class="line">def sim_pearson(prefs,p1,p2):</span><br><span class="line">  # Get the list of mutually rated items</span><br><span class="line">  si=&#123;&#125;</span><br><span class="line">  for item in prefs[p1]: </span><br><span class="line">    if item in prefs[p2]: si[item]=1</span><br><span class="line"></span><br><span class="line">  # if they are no ratings in common, return 0</span><br><span class="line">  if len(si)==0: return 0</span><br><span class="line"></span><br><span class="line">  # Sum calculations</span><br><span class="line">  n=len(si)</span><br><span class="line">  </span><br><span class="line">  # Sums of all the preferences</span><br><span class="line">  sum1=sum([prefs[p1][it] for it in si])</span><br><span class="line">  sum2=sum([prefs[p2][it] for it in si])</span><br><span class="line">  </span><br><span class="line">  # Sums of the squares</span><br><span class="line">  sum1Sq=sum([pow(prefs[p1][it],2) for it in si])</span><br><span class="line">  sum2Sq=sum([pow(prefs[p2][it],2) for it in si])	</span><br><span class="line">  </span><br><span class="line">  # Sum of the products</span><br><span class="line">  pSum=sum([prefs[p1][it]*prefs[p2][it] for it in si])</span><br><span class="line">  </span><br><span class="line">  # Calculate r (Pearson score)</span><br><span class="line">  num=pSum-(sum1*sum2/n)</span><br><span class="line">  den=sqrt((sum1Sq-pow(sum1,2)/n)*(sum2Sq-pow(sum2,2)/n))</span><br><span class="line">  if den==0: return 0</span><br><span class="line"></span><br><span class="line">  r=num/den</span><br><span class="line"></span><br><span class="line">  return r</span><br></pre></td></tr></table></figure>
<h4 id="求相似用户"><a href="#求相似用户" class="headerlink" title="求相似用户"></a>求相似用户</h4><p>topMatches(prefs, person, n=5, similarity=sim_pearson)函数求得person和其他用户的similarity，规则是pearson相关度或欧几里得距离评价，返回前n个最相似的用户。</p>
<h4 id="推荐电影"><a href="#推荐电影" class="headerlink" title="推荐电影"></a>推荐电影</h4><p>基于用户的协作型过滤推荐电影的基本思路如下：</p>
<p>假如我们现在要给一个特定用户p1推荐电影，首先运用欧几里得距离规则或者皮尔逊相关度评价求p1和其他所有用户的相似度，用每一个相似度来对每一个用户对其看过的电影的评分进行加权，然后对于用户p1没看过的每一部电影，将评分加权值求和，对所有电影并进行排序得到电影的推荐排名。</p>
<p>该函数为getRecommendations(prefs, person, similarity=sim_pearson)</p>
<p>这里有一个可以降低准确度来提高运行速度的方法，就是得到p1和其他所有用户的相似度后，可以只选取相似度高的部分用户进行后面的加权求和操作。</p>
<h3 id="基于物品的协作型过滤（item-based-collaborative-filtering）"><a href="#基于物品的协作型过滤（item-based-collaborative-filtering）" class="headerlink" title="基于物品的协作型过滤（item-based collaborative filtering）"></a>基于物品的协作型过滤（item-based collaborative filtering）</h3><p>在上面基于用户的协作型过滤过程中，用topMatches函数可以求出每两个用户之间的相似度，那么相同的道理我们也可以求出每两部电影之间的相似度。只需要把原用户电影数据矩阵进行转置，就可以调用相同的topMatches函数。</p>
<p>求出所有电影之间两两相似度矩阵的函数为calculateSimilarItems(prefs,n)</p>
<p>基于物品的协作型过滤推荐电影的基本思路如下：</p>
<p>假如我们现在要给用户p1推荐电影，首先求出所有电影之间两两的相似度，对于用户p1他自己看过的每一部电影，用p1对该电影的评分和该电影与p1没看过的其他所有电影的相似度一一相乘，然后对于p1没看过的其他所有电影的加权评分值进行求和，并排序得到推荐电影排名。</p>
<p>该函数为getRecommendedItems(prefs,itemMatch,user)</p>
<p>这里同样有一个可以提高速度的地方，即只求出用户p1看过的电影和其他电影之间的相似度，不需要求所有电影两两之间的相似度。</p>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>recommendation</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop Ecosystem</title>
    <url>/2017/04/27/Ecosystem/</url>
    <content><![CDATA[<p><img src="https://github.com/Annashuo/hadoop_project/blob/master/hadoop_ecosystem.png?raw=true" alt="Hadoop_Ecosystem"></p>
<a id="more"></a>
<h4 id="HDFS-Hadoop-Distributed-File-System"><a href="#HDFS-Hadoop-Distributed-File-System" class="headerlink" title="HDFS: Hadoop Distributed File System"></a>HDFS: Hadoop Distributed File System</h4><p>It allows to distribute the storage to big data across all clusters of computer. It also maintain the redundant copy of that data. If one of computer breaks down, it can recover from that backup.</p>
<h4 id="YARN-Yet-Another-Resource-Negotiator"><a href="#YARN-Yet-Another-Resource-Negotiator" class="headerlink" title="YARN: Yet Another Resource Negotiator"></a>YARN: Yet Another Resource Negotiator</h4><p>It is the data storage part of hadoop and also the data manage part of hadoop. It is a system that manage the storage of the data on your computing clusters</p>
<h4 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h4><p>A programming model that allows to process your data across the data clusters. Mapper has been builted to transfer your data in parallel across different computing cluster and map; Reducer is to aggregate data together.</p>
<h4 id="Pig"><a href="#Pig" class="headerlink" title="Pig"></a>Pig</h4><p>A high level API allows you to write scripts like SQL to request complex result without writing java or python.</p>
<h4 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h4><p>It is more directly to use SQL, making your storage system more look like a SQL database. </p>
<h4 id="Apache-Ambari"><a href="#Apache-Ambari" class="headerlink" title="Apache Ambari"></a>Apache Ambari</h4><p>It is a tool for you to have a view on have data moved through clusters or how application functioning on the data.</p>
<h4 id="MESOS"><a href="#MESOS" class="headerlink" title="MESOS"></a>MESOS</h4><p>It is also a resources negotiator like YARN.</p>
<h4 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h4><p>Run query on your data. You need to write Spark script using either python or java. Spark is really fast technology. It runs efficiently and reliabily on your clusters.</p>
<h4 id="TEZ"><a href="#TEZ" class="headerlink" title="TEZ"></a>TEZ</h4><p>It often use with hive to accelerate the programing running. </p>
<h4 id="HBASE"><a href="#HBASE" class="headerlink" title="HBASE"></a>HBASE</h4><p>A No-SQL database. It exposes your data to transfer from an platform. It is a very fast database technology to transfer data from different clusters or platforms.</p>
<h4 id="STORM"><a href="#STORM" class="headerlink" title="STORM"></a>STORM</h4><p>A way for processing streaming data quickly.</p>
<h4 id="OOZIE"><a href="#OOZIE" class="headerlink" title="OOZIE"></a>OOZIE</h4><p>A way as scheduling jobs on your clusters. There may be different steps and using different system in hadoop. OOZIE is a way to schedule all these things as jobs.</p>
<h4 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h4><p>It is basically a technology to coordinate all these technologies as nodes. It can track which node is up and which node is down.</p>
<h4 id="Data-Ingestion"><a href="#Data-Ingestion" class="headerlink" title="Data Ingestion"></a>Data Ingestion</h4><p>transform your own database or web server data into a HDFS.</p>
]]></content>
      <categories>
        <category>Hadoop Project</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>csapp-chapter8</title>
    <url>/2017/04/10/csapp-chapter8/</url>
    <content><![CDATA[<p>chapter 8 REVIEW</p>
<a id="more"></a>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常(exception):控制流中的突变</p>
<p>事件(event):状态变化</p>
<p>当处理器检测到有事件发生时，他就会通过一张叫做异常表(exception table)的跳转表，进行到一个间接的过程调用（异常），到一个专门设计用来处理这类事件的操作系统子程序（异常处理程序(exception handler)）</p>
<h4 id="异常和过程调用"><a href="#异常和过程调用" class="headerlink" title="异常和过程调用"></a>异常和过程调用</h4><ul>
<li>过程调用时，处理器将返回地址压入栈，一般为下一条指令的地址，但是根据异常的类型， 处理器有可能压入当前指令的地址，也有可能压入下一条指令的地址</li>
<li>异常的时候，处理器会把额外的一些状态压入栈</li>
<li>如果控制从一个用户程序转到内核，所有项目都被压入内核栈中，而不是压入用户栈</li>
<li>异常处理程序运行在<strong>内核模式</strong>，他们对所有系统资源都有完全的访问模式</li>
</ul>
<h4 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h4><ul>
<li>中断（interrupt）:异步，来自I/O设备。除了它，其他所有异常统称故障指令（faulting instruction），且都是同步的</li>
<li>陷阱（trap）:同步，有意的异常，最重要的用途是在用户程序和内核之间提供一个像过程一样的接口，叫做<strong>系统调用</strong></li>
<li>故障（fault）:处理程序若能修复这个错误情况，就返回引起故障的指令，否则abort</li>
<li>终止（abort）:通常为硬件错误导致的不可恢复的致命错误</li>
</ul>
<h3 id="进程（process）"><a href="#进程（process）" class="headerlink" title="进程（process）"></a>进程（process）</h3><p>用户通过向shell输入一个可执行目标文件的名字，并运行一个程序时，shell会创建一个新的进程，然后在这个新进程的上下文中运行这个可执行目标文件。<br>进程提供给应用程序的关键抽象：</p>
<ul>
<li>一个独立的逻辑控制流，它提供一个假象，好像程序独占使用处理器</li>
<li>一个私有的地址空间，它提供一个假象，好像程序独占使用存储器系统</li>
</ul>
<h4 id="并行和并发"><a href="#并行和并发" class="headerlink" title="并行和并发"></a>并行和并发</h4><p>多个流并发的执行成为并发（concurrency）。一个进程和其他进程轮流云从称谓多任务（multitasking）。如果两个流并发的运行在不同处理器核或者计算机上，我们称它为并行流（parallel flow）。</p>
<h4 id="用户模式和内核模式"><a href="#用户模式和内核模式" class="headerlink" title="用户模式和内核模式"></a>用户模式和内核模式</h4><p>处理器用控制寄存器中一个模式位（mode bit）描述进程的运行模式，如果设置了模式位，进程运行在内核模式中，否则运行在用户模式中。运行应用程序代码的进程初始是在用户模式中。进程从用户模式转变为内核模式的方法是通过诸如中断，故障或者陷阱这样的异常。<br>Linux下，用户模式进程可以通过／proc文件系统访问内核数据结构的内容。</p>
<h4 id="上下文切换（context-switch）"><a href="#上下文切换（context-switch）" class="headerlink" title="上下文切换（context switch）"></a>上下文切换（context switch）</h4><p>操作系统内核使用上下文切换的方式来实现多任务。内核为每个进程维持一个上下文，包括各种寄存器和页表，进程表和文件表。内核可以通过调度器（scheduler）调度进程。</p>
<h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><p>to be continue…</p>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>csapp-chapter7</title>
    <url>/2017/04/10/csapp-chapter7/</url>
    <content><![CDATA[<p>chapter 7 REVIEW</p>
<a id="more"></a>
<h3 id="目标文件"><a href="#目标文件" class="headerlink" title="目标文件"></a>目标文件</h3><ul>
<li>可重定位的目标文件：编译器产生，可与其他可重定位目标文件合并</li>
<li>可执行目标文件：链接器产生，多个可重定位目标文件链接产生</li>
<li>共享目标文件</li>
</ul>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>csapp-chapter6</title>
    <url>/2017/04/08/csapp-chapter6/</url>
    <content><![CDATA[<p>chapter 6 REVIEW</p>
<a id="more"></a>
<h3 id="DRAM-vs-SRAM"><a href="#DRAM-vs-SRAM" class="headerlink" title="DRAM vs. SRAM"></a>DRAM vs. SRAM</h3><p>SRAM is faster and significantly more expensive than DRAM. SRAM is used for cache memories, both on and off the CPU chip. DRAM is used for the main memory plus the frame buffer of a graphics system.</p>
<h3 id="Memory-Capacity-amp-Access-Time"><a href="#Memory-Capacity-amp-Access-Time" class="headerlink" title="Memory Capacity &amp; Access Time"></a>Memory Capacity &amp; Access Time</h3><span>$Capacity = \frac{\#bytes}{sector} \times \frac{average\#sectors}{track} \times \frac{\#tracks}{surface} \times \frac{\#surface}{platter} \times \frac{\#platter}{disk}$</span><!-- Has MathJax -->
<span>$access\ time=seek\ time+rotation\ latency+transfer\ time$</span><!-- Has MathJax -->
<span>$T_{ave\ rotation}(ms)=\frac{1}{2}T_{max\ rotation}=\frac{1}{RPM}\times \frac{60000ms}{1min}$</span><!-- Has MathJax -->
<span>$T_{ave\ transfer}(ms)=\frac{1}{RPM}\times \frac{1}{average\#sectors/track}\times \frac{60000ms}{1min}$</span><!-- Has MathJax -->
<h3 id="Locality"><a href="#Locality" class="headerlink" title="Locality"></a>Locality</h3><p>Programs tend to use data and insructions with address near(spatial) or equal(temporal) to those they have used recently.</p>
<h3 id="Memory-Hierarchy"><a href="#Memory-Hierarchy" class="headerlink" title="Memory Hierarchy"></a>Memory Hierarchy</h3><p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/memory_hierarchy.png" alt="memory hierarchy"></p>
<ul>
<li>cache hit</li>
<li>cahce miss(cold misses, comflict misses, capacity misses)</li>
</ul>
<p>Each memory address has m bits that form $M=2^{m}$ unique addresses. A cache is organized as an array of $S=2^{s}$ cache sets. Each set consist of E cache lines. Each line consists of a data block of $B=2^{b}$ bytes, a valid bit that indicates whether or not the line contain meaningful information, and $t=m-(b+s)$ tag bits that uniquely identify the block stored in the cache line.</p>
<h4 id="Type-of-Cache"><a href="#Type-of-Cache" class="headerlink" title="Type of Cache:"></a>Type of Cache:</h4><ul>
<li>Direct-Mapped Cache(E=1)</li>
<li>Set Associative Cache(E!=1)</li>
<li>Fully Associative Cache(E=C/B, S=1)</li>
</ul>
<h4 id="Issue-with-Writes"><a href="#Issue-with-Writes" class="headerlink" title="Issue with Writes:"></a>Issue with Writes:</h4><ul>
<li><p>After the cache updates its copy of w, what does it do about updating the copy of w in the next lower level of the hierarchy?</p>
<ul>
<li>write-through: immediately write w’s cahce back to the next lower level.</li>
<li>write-back: writing the update block to the next lower level only when it is evicted from the cache by the replacement algrithm</li>
</ul>
</li>
<li><p>How to deal with write miss?</p>
<ul>
<li>write-allocate: loads the corresponding block from the next lower level into the cache and then updates the cache block.</li>
<li>no-write-allocate: bypasses the cache and writes the word directly to the next lower level.</li>
</ul>
</li>
</ul>
<p>write-through + no-write-allocate  vs. write-back + write-allocate</p>
<h4 id="Cache-Blocking"><a href="#Cache-Blocking" class="headerlink" title="Cache Blocking"></a>Cache Blocking</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//non-blocking,total miss: (9n/8)*n^2=9/8*n^3</span><br><span class="line">for(i=0;i&lt;n;i++)&#123;</span><br><span class="line">	for(j=0;j&lt;n;j++)&#123;</span><br><span class="line">		for(k=0;k&lt;n;k++)&#123;</span><br><span class="line">			c[i*n+j]=a[i*n+k]*b[k*n+j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//blocking, total misses: nB/4*(n/B)^2=n^3/(4B)</span><br><span class="line">for(i=0;i&lt;n;i+=B)&#123;</span><br><span class="line">	for(j=0;j&lt;n;j+=B)&#123;</span><br><span class="line">		for(k=0;k&lt;n;k+=B)&#123;</span><br><span class="line">			for(i1=i;i1&lt;i+B;i1++)&#123;</span><br><span class="line">				for(j1=j;j1&lt;j+B;j1++)&#123;</span><br><span class="line">					for(k1=k;k1&lt;k+B;k1++)&#123;</span><br><span class="line">						c[i1*n+j1]=a[i1*n+k1]*b[k1*n+j1];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>csapp-chapter5</title>
    <url>/2017/04/08/csapp-chapter5/</url>
    <content><![CDATA[<p>chapter 5 REVIEW</p>
<h3 id="程序优化"><a href="#程序优化" class="headerlink" title="程序优化"></a>程序优化</h3><ul>
<li>代码移动（code motion）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//before</span><br><span class="line">for(i=0;i&lt;s.length();i++)</span><br><span class="line">//after</span><br><span class="line">int size=s.length();</span><br><span class="line">for(i=0;i&lt;size;i++)</span><br></pre></td></tr></table></figure>
<ul>
<li>减少过程调用</li>
<li>消除不必要的存储器引用</li>
<li>循环展开（loop unrolling）</li>
<li>多路并行</li>
</ul>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>指令级并行：同时对多条指令求值</li>
<li>延迟界限（latency bound）：一系列操作必须严格顺序执行</li>
<li>超标量（superscalar）：每个时钟周期执行多个操作，并且是乱序的（out-of-order）</li>
<li>分支预测（branch prediction）：处理器会猜测是否会选择分支，同时预测分支的目标地址</li>
<li>寄存器重名（register renaming）</li>
</ul>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>csapp-chapter4</title>
    <url>/2017/04/08/csapp-chapter4/</url>
    <content><![CDATA[<p>Chapter 4 REVIEW</p>
<h3 id="SEQ处理器"><a href="#SEQ处理器" class="headerlink" title="SEQ处理器"></a>SEQ处理器</h3><ul>
<li>取指（fetch）</li>
<li>译码（decode）</li>
<li>执行（execute）</li>
<li>访存（memory）</li>
<li>写回（write back）</li>
<li>更新PC（PC update）</li>
</ul>
<h3 id="SEQ-处理器"><a href="#SEQ-处理器" class="headerlink" title="SEQ+处理器"></a>SEQ+处理器</h3><p>pipeline hazard:</p>
<ul>
<li>data hazard</li>
<li>control hazard</li>
</ul>
<p>dealing with pipeline hazard:</p>
<ul>
<li>stalling</li>
<li>data forwarding </li>
<li>load interlock</li>
</ul>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>how to write fast code - Module 4</title>
    <url>/2017/04/06/%E7%AC%94%E8%AE%B04/</url>
    <content><![CDATA[<h3 id="M4-1"><a href="#M4-1" class="headerlink" title="M4-1"></a>M4-1</h3><h4 id="Why-Distrivuted-Computing"><a href="#Why-Distrivuted-Computing" class="headerlink" title="Why Distrivuted Computing?"></a>Why Distrivuted Computing?</h4><a id="more"></a>
<p>Using distributed systems to solve computational problems on Big Data. Vast repositories of data exist and are growing daily. Problem is divided onto many tasks, each of which is solved by one or more computers. </p>
<h4 id="How-common-are-failures-in-Large-Scale-Distributed-Computing"><a href="#How-common-are-failures-in-Large-Scale-Distributed-Computing" class="headerlink" title="How common are failures in Large Scale Distributed Computing?"></a>How common are failures in Large Scale Distributed Computing?</h4><p>In large-scale distributed computing, faliure is ensured.</p>
<h4 id="How-are-failures-handled-in-HADOOP"><a href="#How-are-failures-handled-in-HADOOP" class="headerlink" title="How are failures handled in HADOOP?"></a>How are failures handled in HADOOP?</h4><ul>
<li>Fail-safe Storage: By default stores 3 separate copies of each block</li>
<li>Fail-safe Task Management: Failed tasks re-scheduled up to 4 times.</li>
</ul>
<h4 id="What-is-MapReduce"><a href="#What-is-MapReduce" class="headerlink" title="What is MapReduce?"></a>What is MapReduce?</h4><ul>
<li>A programming model<ul>
<li>Inspired by functional programming</li>
<li>Model to express distributed computations on massive amounts of data</li>
</ul>
</li>
<li>An execution framework<ul>
<li>Designed for large-scale data processiong</li>
<li>Designed to run on clusters of commodity hardware</li>
</ul>
</li>
</ul>
<h4 id="When-developing-a-MapReduce-application-what-components-and-functions-need-to-be-defined"><a href="#When-developing-a-MapReduce-application-what-components-and-functions-need-to-be-defined" class="headerlink" title="When developing a MapReduce application what components and functions need to be defined?"></a>When developing a MapReduce application what components and functions need to be defined?</h4><ul>
<li>components: MapReduce &amp; HDFS</li>
<li>functions:<ul>
<li>Map: map operation</li>
<li>Reduce: fold operation</li>
<li>HDFS I/O</li>
<li>HDFS Replication</li>
</ul>
</li>
</ul>
<h4 id="How-are-data-bottlenecks-reduced-in-HDFS"><a href="#How-are-data-bottlenecks-reduced-in-HDFS" class="headerlink" title="How are data bottlenecks reduced in HDFS?"></a>How are data bottlenecks reduced in HDFS?</h4><p>Data is never moved through the NameNode-&gt;no bottleneck</p>
<h4 id="What-are-the-advantages-of-Cloud-Computing"><a href="#What-are-the-advantages-of-Cloud-Computing" class="headerlink" title="What are the advantages of Cloud Computing?"></a>What are the advantages of Cloud Computing?</h4><ul>
<li>Illusion of infinite computing resources on demand</li>
<li>Elimination of an up-front commitment by user</li>
<li>Ability to pay for use of computing resources on a short-term basis as needed<ul>
<li>Lowering entry barrier for large scale computing: Removing equipment fixed cost</li>
<li>Making available economy-of-scale: Reducing operation variable cost</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>how to write fast code</tag>
      </tags>
  </entry>
  <entry>
    <title>how to write fast code - Module 3</title>
    <url>/2017/03/17/%E7%AC%94%E8%AE%B03/</url>
    <content><![CDATA[<h3 id="M3-1"><a href="#M3-1" class="headerlink" title="M3-1"></a>M3-1</h3><h4 id="What’s-the-Difference-between-Multicore-and-Manycore"><a href="#What’s-the-Difference-between-Multicore-and-Manycore" class="headerlink" title="What’s the Difference between Multicore and Manycore?"></a>What’s the Difference between Multicore and Manycore?</h4><a id="more"></a>
<ul>
<li><p>Multicore: Optimized for reducing execution latency for a few threads</p>
<ul>
<li>Sophisticated instruction controls, large caches</li>
<li>Each core optimized for executing a single thread</li>
</ul>
</li>
<li><p>Manycore: Assumes 1000-way concurrency readily availabel in applications</p>
<ul>
<li>More resources dedicated to compute</li>
<li>Cores optimized for aggregate throughput, deemphasizing individual performance</li>
</ul>
</li>
</ul>
<h4 id="When-does-using-a-GPU-make-sense"><a href="#When-does-using-a-GPU-make-sense" class="headerlink" title="When does using a GPU make sense?"></a>When does using a GPU make sense?</h4><ul>
<li>Applications with a lot of concurrency</li>
<li>Some memory intensive applications</li>
<li>Advantage diminidhes when task granularity becomes too large to fit in shared memory</li>
</ul>
<h4 id="What-is-the-memory-hierarchy-inversion-And-why-is-it-there"><a href="#What-is-the-memory-hierarchy-inversion-And-why-is-it-there" class="headerlink" title="What is the memory hierarchy inversion? And why is it there?"></a>What is the memory hierarchy inversion? And why is it there?</h4><p>Memory hierarchy inversion: the higher level memory L1 or L2 cache are actually smaller than the register file.</p>
<p>Because there is shared memory.</p>
<h4 id="What-is-the-memory-wall-How-to-get-around-it"><a href="#What-is-the-memory-wall-How-to-get-around-it" class="headerlink" title="What is the memory wall? How to get around it?"></a>What is the memory wall? How to get around it?</h4><p>Memory wall: performance gap between a processor and the piece of memory, that is getting longer, and longer to fetch a piece of data from memory to process in the processor.</p>
<p>Manycore processors utilize application concurrency to hide memory latency.</p>
<h4 id="Why-warps"><a href="#Why-warps" class="headerlink" title="Why warps?"></a>Why warps?</h4><p>Warps: Software abstraction to hide an extra level of architextural complexity</p>
<p>1 Streaming Mulprocessor(SM)= at most 8 blocks</p>
<p>1 block=??? warps</p>
<p>1 warp=32 threads. (32-wide SIMD)</p>
<h4 id="How-do-we-deal-with-GPUs-of-different-sizes"><a href="#How-do-we-deal-with-GPUs-of-different-sizes" class="headerlink" title="How do we deal with GPUs of different sizes?"></a>How do we deal with GPUs of different sizes?</h4><p>Well what CUDA provides is an abstraction, that, can scale across all these different sizes. A thread block is a bock of threads that can execute at the same time while sharing some context. ComputaIon is grouped into blocks of independent, concurrently executable work</p>
<h4 id="What-are-the-implications-of-the-thread-block-abstraction"><a href="#What-are-the-implications-of-the-thread-block-abstraction" class="headerlink" title="What are the implications of the thread block abstraction?"></a>What are the implications of the thread block abstraction?</h4><ul>
<li><p>Threads are the computation performed in each SIMD lane in a core</p>
<ul>
<li>CUDA provides a SIMT programming abstraction to assist users</li>
</ul>
</li>
<li><p>SIMT: Single Instruction Multiple Threads</p>
<ul>
<li>A single instruction controls multiple processing element</li>
<li>Different from SIMD – SIMD exposes the SIMD width to the programmer</li>
<li>SIMT abstract the #threads in a thread block as a user - specified parameter</li>
</ul>
</li>
<li><p>SIMT enables programmers to write thread-level parallel code for    </p>
<ul>
<li>Independent,scalarthreads</li>
<li>Data-parallel code for coordinated threads</li>
</ul>
</li>
<li>For functional correctness, programmers can ignore SIMT behavior</li>
<li>For performance, programmers can tune applications with SIMT in mind</li>
</ul>
<h4 id="How-do-threads-communicate-with-each-other"><a href="#How-do-threads-communicate-with-each-other" class="headerlink" title="How do threads communicate with each other?"></a>How do threads communicate with each other?</h4><p>Using shared memory and L1 cache.</p>
<p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/module3.png" alt="module3"></p>
<h4 id="What-is-the-caveat-in-synchronizing-threads-in-a-thread-block"><a href="#What-is-the-caveat-in-synchronizing-threads-in-a-thread-block" class="headerlink" title="What is the caveat in synchronizing threads in a thread block?"></a>What is the caveat in synchronizing threads in a thread block?</h4><p>__syncthreads()</p>
<ul>
<li>waits until all threads in the thread block have reached this point and all global and shared memory accesses made by these threads prior to __syncthreads() are visible to all threads in the block</li>
<li>used to coordinate communication between the threads of the same block</li>
</ul>
<h4 id="CUDA-Function-Types"><a href="#CUDA-Function-Types" class="headerlink" title="CUDA Function Types"></a>CUDA Function Types</h4><ul>
<li>_<em>global_</em><ul>
<li>Executed on the device</li>
<li>Callable from the host only</li>
<li>_<em>global_</em> functions must have void return type</li>
<li>Any call to a _<em>global_</em> function must specify its execution configuration &lt;&lt;&lt; &gt;&gt;&gt;</li>
<li>A call to a _<em>global_</em> function is asynchronous</li>
</ul>
</li>
<li>_<em>device_</em><ul>
<li>Executed on the device</li>
<li>Callable from the device only</li>
</ul>
</li>
<li>_<em>host_</em><ul>
<li>Executed on the host</li>
<li>Callable from the host only</li>
</ul>
</li>
</ul>
<h3 id="M3-2"><a href="#M3-2" class="headerlink" title="M3-2"></a>M3-2</h3><h4 id="What-are-the-three-ways-to-improve-execution-throughput"><a href="#What-are-the-three-ways-to-improve-execution-throughput" class="headerlink" title="What are the three ways to improve execution throughput?"></a>What are the three ways to improve execution throughput?</h4><ul>
<li><p>Maximizing Memory Throughput</p>
<ul>
<li>SoA vs AoS</li>
<li>Memory coalescing</li>
<li>Use of shared memory</li>
<li>Memory bank conflict</li>
<li>Padding</li>
</ul>
</li>
<li><p>Maximizing Instruction Throughput</p>
</li>
<li>Maximizing Scheduling Throughput</li>
</ul>
<h4 id="When-to-use-SOA-vs-AOS"><a href="#When-to-use-SOA-vs-AOS" class="headerlink" title="When to use SOA vs AOS?"></a>When to use SOA vs AOS?</h4><p>Example one: You have a list of coordinates, and you want to find the distance from the origin to all points</p>
<ul>
<li>Struct of Array(<strong>better</strong>): index all these x, y, and z’s with the thread ID. for each thread we’re actually picking out one of these index. And we would have multiple of these threads executing at the same time.</li>
<li>Array of Struct(<strong>worse</strong>): each thread is going to be loading operands from memory locations with a certain stride. In order to satisfy the operand for one operation it actually needs to go to memory and load a bunch of things that are not gonna be used for a particular calculation. And without any sort of shared memory buffering.</li>
</ul>
<p>Example two: Find the distance from the origin to a list of points estimated to be ~1% of all points</p>
<ul>
<li>Struct of Array(<strong>worse</strong>): we are gonna have a huge strides between all these consecutive elements.</li>
<li>Array of Struct(<strong>better</strong>): we’re gonna be loading chunks of these tuples at a time so that we can be more efficient in loading blocks of memory at a time. We’re better utilizing the memory bandwidth by loading these consecutive elements for each array at a time</li>
</ul>
<h4 id="What-is-memory-Coalescing-When-to-use-it-Why-is-it-important"><a href="#What-is-memory-Coalescing-When-to-use-it-Why-is-it-important" class="headerlink" title="What is memory Coalescing? When to use it? Why is it important?"></a>What is memory Coalescing? When to use it? Why is it important?</h4><p>Memory Coalescing: Combine multiple memory accesses generated from multiple threads into a single physical transaction.</p>
<p>It happens when memory access.</p>
<p>It can increase DRAM memory bandwidth and throughput.</p>
<p>Some rules for maximizing DRAM memory bandwidth: </p>
<ul>
<li>Possible bus transaction sizes: 32B, 64B,128B</li>
<li>Memory segment must be aligned: First address = multiple of segment size</li>
<li>Hardware coalescing for each half-warps: 16-word wide </li>
</ul>
<h4 id="What-is-shared-memory-How-to-use-it"><a href="#What-is-shared-memory-How-to-use-it" class="headerlink" title="What is shared memory? How to use it?"></a>What is shared memory? How to use it?</h4><p>Registers and shared memory are on-chip memories. Variables that reside in these types of memory can be accessed at very high speed in a highly parallel manner.</p>
<p>Registers are allocated to individual threads; each thread can only access its own registers.</p>
<p>Shared memory is allocated to thread blocks; all threads in a block can access variables in the shared memory locations allocated to the block. Shared memory is an efficient means for threads to cooperate by sharing their input data and the intermediate results of their work.</p>
<p>How to use shared memory?</p>
<ul>
<li>Declared a fixed sized variable at compile time</li>
<li>Define a size to be used at run time</li>
</ul>
<h4 id="What-is-memory-bank-conflict-How-to-work-around-it"><a href="#What-is-memory-bank-conflict-How-to-work-around-it" class="headerlink" title="What is memory bank conflict? How to work around it?"></a>What is memory bank conflict? How to work around it?</h4><p>Shared memory has 32 banks. Each bank has a bandwidth of 32 bits per two clock cycles(2 cycle latency)</p>
<p>A bank conflict occurs if two or more threads access any bytes within <strong>different 32-bit words belonging to the same bank</strong>.</p>
<p>Using padding technique to offset memory bank conflicts.</p>
<h4 id="What-is-branch-divergence"><a href="#What-is-branch-divergence" class="headerlink" title="What is branch divergence?"></a>What is branch divergence?</h4><p>Branch divergence occurs only within a warp. Full efficiency is realized when all 32 threads of a warp agree on their path. To optimize, factor out decision variables to have shorter sequence of divergent code.</p>
<h4 id="How-to-optimize-for-instruction-mix"><a href="#How-to-optimize-for-instruction-mix" class="headerlink" title="How to optimize for instruction mix?"></a>How to optimize for instruction mix?</h4><p>Compiler Assisted Loop Unrolling(In CUDA, #pragma unroll)</p>
<h4 id="What-is-occupancy-How-to-model-measure-it"><a href="#What-is-occupancy-How-to-model-measure-it" class="headerlink" title="What is occupancy? How to model/measure it?"></a>What is occupancy? How to model/measure it?</h4><p>Occupancy: </p>
<ul>
<li>Ability of a CUDA kernel to occupy concurrent contexts in a SM(Streaming Multiprocessor)</li>
<li>Specifically, the ratio of active warps to the maximum number of warps supported</li>
<li>Helpful in determining how efficient the kernel could be on the GPU</li>
</ul>
<h4 id="How-to-use-the-code-profiler-with-CUDA"><a href="#How-to-use-the-code-profiler-with-CUDA" class="headerlink" title="How to use the code profiler with CUDA?"></a>How to use the code profiler with CUDA?</h4><p>CUDA Profiler Tutorial – by Erik Reed</p>
<h3 id="M3-3"><a href="#M3-3" class="headerlink" title="M3-3"></a>M3-3</h3><h4 id="What-are-the-important-properties-of-a-Map-function"><a href="#What-are-the-important-properties-of-a-Map-function" class="headerlink" title="What are the important properties of a Map function?"></a>What are the important properties of a Map function?</h4><p>Map: a function that applies a given function to each element of a list and return a list of result.</p>
<p>Two properties:</p>
<ul>
<li>Side-effect free: Only returning a value, no modificaGons of state with the rest of the application</li>
<li>Independent: Has an independent piece of work, where its input does not depend on another function</li>
</ul>
<h4 id="What-are-the-important-properties-of-a-Reduce-function"><a href="#What-are-the-important-properties-of-a-Reduce-function" class="headerlink" title="What are the important properties of a Reduce function?"></a>What are the important properties of a Reduce function?</h4><p>Reduce: A function that takes in a list of objects and builds a return value</p>
<p>Three properties:</p>
<ul>
<li>Associativity</li>
<li>Allows elements to be reduced in parallel in a “tree”</li>
<li>In CUDA, the synchronization has to be managed by the programmer</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//totally log2(blockDim.x) iterations, all have branch divergence</span><br><span class="line">unsigned int i=threadIdx.x;</span><br><span class="line">for(unsigned int stride=1; stride&lt;blockDim.x; stride*=2)&#123;</span><br><span class="line">	_syncthreads();</span><br><span class="line">	if(t%(2*stride)==0)</span><br><span class="line">		sum[t]+=sum[t+stride];</span><br><span class="line">&#125;</span><br><span class="line">// another version: only 5 iterations have branch divergence</span><br><span class="line">for(unsigned int stride=blockDim.x/2; stride&gt;1; stride/=2)&#123;</span><br><span class="line">	_syncthreads();</span><br><span class="line">	if(t&lt;stride)</span><br><span class="line">		sum[t]+=sum[t+stride];</span><br></pre></td></tr></table></figure>
<h4 id="What-are-the-important-properties-of-a-Scan-function"><a href="#What-are-the-important-properties-of-a-Scan-function" class="headerlink" title="What are the important properties of a Scan function?"></a>What are the important properties of a Scan function?</h4><p>Scan(Prefix Sum):<br>Takes a binary associative operator ⊕ with identity I, and an array of n elements [a0, a1, …, an-1] and returns the ordered set [I, a0, (a0 ⊕ a1), …, (a0 ⊕ a1 ⊕ … ⊕ an-2)].</p>
<p>Trust library of CUDA</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;thrust/scan.h&gt;          int data[6] = &#123;1, 0, 2, 2, 1, 3&#125;;  </span><br><span class="line">thrust::exclusive_scan(data, data + 6, data); // in-place scan   // data is now &#123;0, 1, 1, 3, 5, 6&#125;</span><br></pre></td></tr></table></figure>
<h4 id="How-to-compact-an-array-in-a-data-parallel-way"><a href="#How-to-compact-an-array-in-a-data-parallel-way" class="headerlink" title="How to compact an array in a data-parallel way?"></a>How to compact an array in a data-parallel way?</h4><p>Compaction: Removing elements from an array - take in an array, and produce an shorter array</p>
<ul>
<li>Map–create flags(“1”keep,“0”remove)    </li>
<li>Scan–compute index</li>
<li>Map–copy to new array</li>
</ul>
<h4 id="How-to-find-unique-elements-in-an-array-in-a-data-parallel-way"><a href="#How-to-find-unique-elements-in-an-array-in-a-data-parallel-way" class="headerlink" title="How to find unique elements in an array in a data-parallel way?"></a>How to find unique elements in an array in a data-parallel way?</h4><p>FindUniq: Removing duplicates from an array – take in an set, produces a equal or smaller set of unique values</p>
<ul>
<li>Sort</li>
<li>Map – flag when ith and (i-1)th element differ [0] = 1</li>
<li>Scan–create compaction index</li>
<li>Map–copy to new array</li>
</ul>
<h3 id="M3-4"><a href="#M3-4" class="headerlink" title="M3-4"></a>M3-4</h3><h4 id="What-are-parallel-software-patterns"><a href="#What-are-parallel-software-patterns" class="headerlink" title="What are parallel software patterns?"></a>What are parallel software patterns?</h4><p>A parallel software pattern is a generalizable solution to a class of recurring problems that occurs in the design of parallel software.</p>
<h4 id="What-are-the-three-goals-the-software-patterns-aim-to-achieve"><a href="#What-are-the-three-goals-the-software-patterns-aim-to-achieve" class="headerlink" title="What are the three goals the software patterns aim to achieve?"></a>What are the three goals the software patterns aim to achieve?</h4><ul>
<li>Define a set of vocabularies to communicate</li>
<li>Present a set of expert techniques for beginners to learn</li>
<li>Allows experts to more quickly design complex systems</li>
</ul>
<h4 id="What-is-a-software-architecture"><a href="#What-is-a-software-architecture" class="headerlink" title="What is a software architecture?"></a>What is a software architecture?</h4><p>A software architecture is ahierarchical composition of:</p>
<ul>
<li>Computational patterns – the atoms</li>
<li>Structural patterns – the molecular bonds</li>
</ul>
<h4 id="How-is-it-important-for-writing-fast-code"><a href="#How-is-it-important-for-writing-fast-code" class="headerlink" title="How is it important for writing fast code?"></a>How is it important for writing fast code?</h4><h4 id="What-are-the-five-categories-of-patterns-in-OPL"><a href="#What-are-the-five-categories-of-patterns-in-OPL" class="headerlink" title="What are the five categories of patterns in OPL?"></a>What are the five categories of patterns in OPL?</h4><p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/OPL.png" alt="OPL"></p>
<h4 id="What-are-the-nine-sections-in-an-OPL-pattern"><a href="#What-are-the-nine-sections-in-an-OPL-pattern" class="headerlink" title="What are the nine sections in an OPL pattern?"></a>What are the nine sections in an OPL pattern?</h4>]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>how to write fast code</tag>
      </tags>
  </entry>
  <entry>
    <title>how to write fast code - Module 2</title>
    <url>/2017/03/16/%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<h3 id="M2-1"><a href="#M2-1" class="headerlink" title="M2-1"></a>M2-1</h3><h4 id="What-are-the-exploitable-levels-of-parallelism-in-a-multicore-processor"><a href="#What-are-the-exploitable-levels-of-parallelism-in-a-multicore-processor" class="headerlink" title="What are the exploitable levels of parallelism in a multicore processor?"></a>What are the exploitable levels of parallelism in a multicore processor?</h4><a id="more"></a>
<ul>
<li>SIMD-Level Parallelism: Exploited using vectorizing compiler and hand-core intrinsics</li>
<li>SMT-Level Parallelism: OS abstract it to core-level parallelism</li>
<li>Core-level Parallelism: Using threads to describe work sone on different cores</li>
</ul>
<h4 id="What-is-SPMD-And-how-to-use-OpenMP-to-do-SPMD"><a href="#What-is-SPMD-And-how-to-use-OpenMP-to-do-SPMD" class="headerlink" title="What is SPMD? And how to use OpenMP to do SPMD?"></a>What is SPMD? And how to use OpenMP to do SPMD?</h4><p>SPMD: Single Program Multiple Data (pragma omp for)</p>
<ul>
<li>Programmer must explicitly specify what each thread must do differently</li>
<li>The division of work is hard-core in the program</li>
<li>OpenMP: an API for shared memory multiprocessor.</li>
</ul>
<h4 id="What’s-the-difference-between-“critical”-and-“atomic”"><a href="#What’s-the-difference-between-“critical”-and-“atomic”" class="headerlink" title="What’s the difference between “critical” and “atomic”?"></a>What’s the difference between “critical” and “atomic”?</h4><ul>
<li>OpenMP critical: anything in a critical region, the OpenMP infrastructure will make sure it’s sequential. The enclosed block will be executed only one thread at a time and that’s simultaneously executed by multiple threads.</li>
<li>Atomic: only the memory update portion of the statement, the instruction will be performing atomically</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#pragma opm critical</span><br><span class="line">&#123;sum += 4.0/(1.0+x*x);&#125;</span><br><span class="line"></span><br><span class="line">tmp = 4.0/(1.0+x*x);</span><br><span class="line">#pragma omp atomic</span><br><span class="line">&#123;sum += tmp;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="How-to-reduce-synchronization-cost-and-avoid-“false-sharing”"><a href="#How-to-reduce-synchronization-cost-and-avoid-“false-sharing”" class="headerlink" title="How to reduce synchronization cost and avoid “false sharing”?"></a>How to reduce synchronization cost and avoid “false sharing”?</h4><p>false sharing: if two threads are writing to the same cache line, conflicts occurs. Even if the adddress differs, one will still suffer performance penalty</p>
<p>Solution for False Sharing:(local_sum)</p>
<ul>
<li>Be aware of the cache line sizes for a platform</li>
<li>Avoid accessing the same cahce line from different threads</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//race condition:</span><br><span class="line">for(i=id,sum=0;i&lt;num_steps;i+=nthreads)&#123;</span><br><span class="line">	sum+=i;</span><br><span class="line">&#125;</span><br><span class="line">//false sharing:</span><br><span class="line">double sum[NUM_THREADS];</span><br><span class="line">for(i=id,sum[id]=0;i&lt;num_steps;i+=nthreads)&#123;</span><br><span class="line">	sum[id]+=i;</span><br><span class="line">&#125;</span><br><span class="line">// eliminate false sharing:</span><br><span class="line">double local_sum=0;</span><br><span class="line">for(i=id;i&lt;num_steps;i+=nthreads)&#123;</span><br><span class="line">	local_sum+=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="What-are-the-scheduling-reduction-data-sharing-and-synchronization-options-for-OpenMP"><a href="#What-are-the-scheduling-reduction-data-sharing-and-synchronization-options-for-OpenMP" class="headerlink" title="What are the scheduling, reduction, data sharing, and synchronization options for OpenMP?"></a>What are the scheduling, reduction, data sharing, and synchronization options for OpenMP?</h4><ul>
<li><p>scheduling: The chedule clause affects how loop interations are mapped onto threads</p>
<ul>
<li>schedule(static[,chunk])</li>
<li>schedule(dynamic[,chunk])</li>
<li>schedule(guided[,chunk])</li>
<li>schedule(runtime)</li>
</ul>
</li>
<li><p>reduction(op: list)</p>
<ul>
<li>A local copy of each list variable is made and initialized depending on the “op”(eg. 0 for “+”)</li>
<li>Updates occur on the local copy</li>
<li>local copies are reduced into a single value and combined with tge original global value</li>
</ul>
</li>
<li><p>data sharing</p>
<ul>
<li>shared</li>
<li>private</li>
<li>firstprivate</li>
<li>lastprivate</li>
</ul>
</li>
<li><p>synchronization</p>
<ul>
<li>ordered: #pragma omp for order reduction(+:res); #pragma ordered</li>
<li>barrier: #pragma omp barrier; #pragma omp nowait</li>
<li>single: #pragma omp single</li>
</ul>
</li>
</ul>
<h4 id="How-is-this-relevant-to-writing-fast-code"><a href="#How-is-this-relevant-to-writing-fast-code" class="headerlink" title="How is this relevant to writing fast code?"></a>How is this relevant to writing fast code?</h4><p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/M2-1.png" alt="module2-1"></p>
<h3 id="M2-2"><a href="#M2-2" class="headerlink" title="M2-2"></a>M2-2</h3><h4 id="Why-does-naïve-matrix-multiply-does-not-achieve-peak-performance-on-the-CPU"><a href="#Why-does-naïve-matrix-multiply-does-not-achieve-peak-performance-on-the-CPU" class="headerlink" title="Why does naïve matrix-multiply does not achieve peak performance on the CPU?"></a>Why does naïve matrix-multiply does not achieve peak performance on the CPU?</h4><p>Naive matrix-multiply is really no improvement over matrix vector multiply because for matrix vector multiply that’s exacly what our inner loop is we just repeat it back n times. The naive matrix-multiply does not achieve peak performance on the CPU is because of cache hierarchy. Page misses every iteration for large matrices.</p>
<h4 id="What-are-the-different-data-layouts-for-matrices"><a href="#What-are-the-different-data-layouts-for-matrices" class="headerlink" title="What are the different data layouts for matrices?"></a>What are the different data layouts for matrices?</h4><ul>
<li>Row major </li>
<li>Column major</li>
</ul>
<h4 id="Is-blocking-sufficient"><a href="#Is-blocking-sufficient" class="headerlink" title="Is blocking sufficient?"></a>Is blocking sufficient?</h4><ul>
<li>Block size adaptation for appropriate caches</li>
<li>Register-level blocking</li>
<li>Copy optimization(data layout)</li>
<li>Optimizing the mini-matrix-multiply(base case)</li>
<li>Multi-level blocking</li>
<li>Multi-level copying</li>
</ul>
<h4 id="What-can-be-learned-from-this-for-other-computations"><a href="#What-can-be-learned-from-this-for-other-computations" class="headerlink" title="What can be learned from this for other computations?"></a>What can be learned from this for other computations?</h4><ul>
<li>Strength reduction</li>
<li>Function inlining</li>
<li>Loop unrolling</li>
<li>Common subexpression elimination</li>
<li>Load/store elimination</li>
<li>Table lookups</li>
<li>Branch elimination</li>
</ul>
<h3 id="M2-3"><a href="#M2-3" class="headerlink" title="M2-3"></a>M2-3</h3><h4 id="What-is-the-roofline-model-What-are-the-metrics-and-axis-used"><a href="#What-is-the-roofline-model-What-are-the-metrics-and-axis-used" class="headerlink" title="What is the roofline model? What are the metrics and axis used?"></a>What is the roofline model? What are the metrics and axis used?</h4><p><strong>Roofline Model</strong>: Synthesize communication, computation, and locality into a single visually-intuitive performance figure using bound and bottleneck analysis.</p>
<p>On the x axis, we have the number of floating point operations per second divided by the bytes that we need to load from the DRAM. So, it’s a, a floating point divided by DRAM byte load ratio.</p>
<p>On the y axis, we have attainable giga flops per second. So, this is a peak amount of computation per second that one can do.</p>
<p>Attainable Performance=min{FLOP/s with Optimization, AI*Bandwidth with Optimizations}</p>
<p><strong>Arithmetic Intensity</strong>: the number of floating point operations to run the program, divided by, the number of bytes assessed, accessed from the main memory.</p>
<p><strong>floating point operations per second</strong>: floating point operations for a second with optimization, with the computation, through performance</p>
<ul>
<li><p>Computational Ceilings(in-core parallelism)</p>
<ul>
<li>If the code is dominated by adds or multiplies, then attainable performance is half of peak</li>
<li>If instructions aren’t SIMDized, attainable performance will be halved</li>
<li>If we don’t express 4-way ILP, performance will drop by as much as 4x</li>
</ul>
</li>
<li><p>Communication Ceilings(bandwidth)</p>
<ul>
<li>Explicit software prefetch instructions are required to achieve peak bandwidth</li>
<li>(NUMA) As such memory traffic must be correctly balanced among the two sockets to achieve good Stream bandwidth</li>
</ul>
</li>
<li><p>Locality Walls(Arithmetic Intensity = FLOPs/(Conflict+Capacity+Allocations+Compulsory))</p>
<ul>
<li>compulsory miss traffic</li>
<li>write allocation behavior</li>
<li>capacity miss traffic</li>
<li>conflict miss traffic</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/Roofline.png" alt="Roofline"> </p>
<p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/Optimization_Categorization.png" alt="Optimization_Categorization"></p>
<h4 id="What’s-the-difference-between-”flop’s-per-memory-instruction”-from-“flop’s-per-DRAM-byte”"><a href="#What’s-the-difference-between-”flop’s-per-memory-instruction”-from-“flop’s-per-DRAM-byte”" class="headerlink" title="What’s the difference between:”flop’s per memory instruction” from “flop’s per DRAM byte”?"></a>What’s the difference between:”flop’s per memory instruction” from “flop’s per DRAM byte”?</h4><p>Memory Instructions: memory operations concurrently managed</p>
<p>True Arithmetic Intensity(AI)~Total Flops/Total DRAM Bytes</p>
<p>Where the memory instructions are an artifact of the code that you write. And the DRAM bytes is how that code is being mapped to a particular platform.</p>
<p>On the roofline model, what we see is the operating point initially, could be considered as at one particular flop per DRAM byte ratio. </p>
<ul>
<li><p>An example where the memory instructions is greater than the DRAM bytes: With the consideration of properties like write, allocate, traffic. We may have a lower number of floating point operations per DRAM bytes used.</p>
</li>
<li><p>An example where the DRAM bytes is greater than the memory instructions: Although we are executing a small number of memory instructions, they end up fetching a lot od data from memory because the data layout is not optimal for fetching data. And in order to fetch one memory instruction, we need to fetch a whole cache line from the DRAM to the cache hierarchy. </p>
</li>
</ul>
<h4 id="Consider-an-image-Image-height-width-If-one-were-to-stride-through-the-columns-of-values-what-would-be-the-effects-How-would-they-be-mapped-to-the-roofline"><a href="#Consider-an-image-Image-height-width-If-one-were-to-stride-through-the-columns-of-values-what-would-be-the-effects-How-would-they-be-mapped-to-the-roofline" class="headerlink" title="Consider an image Image[height][width]. If one were to stride through the columns of values, what would be the effects? How would they be mapped to the roofline?"></a>Consider an image Image[height][width]. If one were to stride through the columns of values, what would be the effects? How would they be mapped to the roofline?</h4><p>If one were to stride through the columns of values, it will cause compulsory misses and conflict misses, and will cause walls in roofline.</p>
<h4 id="How-does-one-model-incomplete-SIMDization-e-g-half-the-flop’s-can-be-SIMDized-insufficient-ILP-some-dependent-flop’s-or-an-imbalance-between-FPMUL’s-and-FPADD’s-on-the-roofline"><a href="#How-does-one-model-incomplete-SIMDization-e-g-half-the-flop’s-can-be-SIMDized-insufficient-ILP-some-dependent-flop’s-or-an-imbalance-between-FPMUL’s-and-FPADD’s-on-the-roofline" class="headerlink" title="How does one model incomplete SIMDization (e.g. half the flop’s can be SIMDized), insufficient ILP (some dependent flop’s), or an imbalance between FPMUL’s and FPADD’s on the roofline ?"></a>How does one model incomplete SIMDization (e.g. half the flop’s can be SIMDized), insufficient ILP (some dependent flop’s), or an imbalance between FPMUL’s and FPADD’s on the roofline ?</h4><p>If instructions aren’t SIMDized, attainable performance will be halved.</p>
<p>If we don’t express 4-way ILP, performance will drop by as much as 4x</p>
<p>If the code is dominated by adds, then attainable performance is half of peak</p>
<h4 id="How-would-one-model-branch-mispredicts-TLB-misses-or-too-many-streams-for-the-prefetchers-on-the-roofline"><a href="#How-would-one-model-branch-mispredicts-TLB-misses-or-too-many-streams-for-the-prefetchers-on-the-roofline" class="headerlink" title="How would one model {branch mispredicts, TLB misses, or too many streams for the prefetchers} on the roofline?"></a>How would one model {branch mispredicts, TLB misses, or too many streams for the prefetchers} on the roofline?</h4><p>Branch mispredicts, TLB misses or too many streams for the prefetchers will minimize the memory bandwidth, which limits the roofline.</p>
<p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/roofline_mindmap.png" alt="Roofline"> </p>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>how to write fast code</tag>
      </tags>
  </entry>
  <entry>
    <title>how to write fast code - Module 1</title>
    <url>/2017/03/15/%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<h3 id="M1-2"><a href="#M1-2" class="headerlink" title="M1-2"></a>M1-2</h3><p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/M1-2.png" alt="mindmap"></p>
<a id="more"></a>
<h4 id="What-are-the-differences-between-multicore-and-manycore-processors"><a href="#What-are-the-differences-between-multicore-and-manycore-processors" class="headerlink" title="What are the differences between multicore and manycore processors?"></a>What are the differences between multicore and manycore processors?</h4><ul>
<li>definition</li>
</ul>
<p>multicore: each core optimized for executing a single thread.</p>
<p>manycore: cores optimized for aggregate throughput, deemphasizing individual performance.</p>
<ul>
<li><p>similar in scalling trends</p>
<ul>
<li>increasing vector unit width</li>
<li>increasing numbers of cores per die</li>
<li>increasing bandwidth to off-chip memory</li>
</ul>
</li>
<li><p>different in optimization points</p>
</li>
</ul>
<h4 id="What-is-instruction-level-parallelism-What-is-SIMD"><a href="#What-is-instruction-level-parallelism-What-is-SIMD" class="headerlink" title="What is instruction level parallelism? What is SIMD?"></a>What is instruction level parallelism? What is SIMD?</h4><ol>
<li><p>instruction level parallelism(ILP): instructions in a sequence that can be computed at the same time.</p>
<ul>
<li>multiple valid instruction sequence: compilers may produce valid instruction sequences that have less ILP when executed in order</li>
<li>traditional in-order pipeline: an in-order processor pipeline endure ILP and Read/Write operand dependency</li>
<li>later out-of-order pipelines: allows instruction re-ordering and uses register-renaming</li>
<li>Motivation:Given a single, sequential stream of instructions, how to execute it as fast as possible?</li>
<li>Advantages:<ul>
<li>No changes in sequential software necessary</li>
</ul>
</li>
<li>Disadvantages:<ul>
<li>Significantly more complex processor architecture</li>
<li>Longer to design the processor</li>
<li>Longer to verify the correctness of the processor design</li>
<li>Consumes more energy than simple in-order processor</li>
</ul>
</li>
</ul>
</li>
<li><p>SIMD: single instruction multiple data</p>
<ul>
<li>Motivation: reduce processor complexity by explicitly representing instruction-level parallelism in vector form</li>
<li>Advantage: <ul>
<li>power-efficient way to improve instruction throughput; </li>
<li>exploitable in many compute-intensive applications</li>
</ul>
</li>
<li>Disadvantage: <ul>
<li>explicit representation in vector instructions; </li>
<li>software requires re-compilation to take advantage of new SIMD capabilities; </li>
<li>may require hand-tuning to exploit full benefit</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="What-is-simultaneous-multithreading-SMT"><a href="#What-is-simultaneous-multithreading-SMT" class="headerlink" title="What is simultaneous multithreading(SMT)?"></a>What is simultaneous multithreading(SMT)?</h4><ul>
<li><p>Motivation:</p>
<ul>
<li>Capturing the opportunity to run faster when more than one thread of instructions are available</li>
</ul>
</li>
<li><p>Advantage:</p>
<ul>
<li>Gain power-efficiency by increasing processor pipeline utilization</li>
</ul>
</li>
<li>Disadvantage:<ul>
<li>Requires multiple threads available</li>
<li>May trigger conflicts in shared cache execution</li>
<li>Does not improve latency of each thread</li>
</ul>
</li>
</ul>
<h4 id="What-are-the-three-metrics-for-a-memory-hierarchy"><a href="#What-are-the-three-metrics-for-a-memory-hierarchy" class="headerlink" title="What are the three metrics for a memory hierarchy?"></a>What are the three metrics for a memory hierarchy?</h4><ul>
<li>Capacity: size</li>
<li>Latency: from start to finish, in units of time</li>
<li>Throughput: tasks accomplished per unit time</li>
</ul>
<h4 id="What-are-the-different-system-granularities"><a href="#What-are-the-different-system-granularities" class="headerlink" title="What are the different system granularities?"></a>What are the different system granularities?</h4><ul>
<li>Multicore: SIMD level parallelism, core level parallelism, memory hierarchy</li>
<li>Manycore: GPU System Architecture</li>
<li>The Cloud</li>
</ul>
<h4 id="How-is-this-relevant-to-writing-fast-code"><a href="#How-is-this-relevant-to-writing-fast-code" class="headerlink" title="How is this relevant to writing fast code?"></a>How is this relevant to writing fast code?</h4><ol>
<li>Fast Platforms<ul>
<li>Multicore platforms</li>
<li>Manycore platforms</li>
<li>Cloud platforms</li>
</ul>
</li>
<li>Good Texhniques<ul>
<li>Data structures</li>
<li>Algorithms</li>
<li>Software Architecture</li>
</ul>
</li>
</ol>
<h3 id="M1-3"><a href="#M1-3" class="headerlink" title="M1-3"></a>M1-3</h3><h4 id="What-is-the-difference-between-concurrency-and-parallelism"><a href="#What-is-the-difference-between-concurrency-and-parallelism" class="headerlink" title="What is the difference between concurrency and parallelism?"></a>What is the difference between concurrency and parallelism?</h4><p>We expose concurrency in our applications.</p>
<p>We exploit parallelism in our platforms</p>
<h4 id="What-are-the-four-key-elements-of-the-human-problem-solving-process"><a href="#What-are-the-four-key-elements-of-the-human-problem-solving-process" class="headerlink" title="What are the four key elements of the human problem solving process?"></a>What are the four key elements of the human problem solving process?</h4><ol>
<li>Understand the current state</li>
<li>Observe the internal representation</li>
<li>Search among altenatives</li>
<li>Select from a set of choices</li>
</ol>
<h4 id="What-are-the-characteristics-of-a-current-algorithm-implementation"><a href="#What-are-the-characteristics-of-a-current-algorithm-implementation" class="headerlink" title="What are the characteristics of a current algorithm implementation?"></a>What are the characteristics of a current algorithm implementation?</h4><ul>
<li>Initialization</li>
<li>Expectation</li>
<li>Maximization</li>
<li>Evaluate</li>
</ul>
<h4 id="What-levels-of-concurrency-can-be-exposed-in-the-k-mean-algorithm"><a href="#What-levels-of-concurrency-can-be-exposed-in-the-k-mean-algorithm" class="headerlink" title="What levels of concurrency can be exposed in the k-mean algorithm?"></a>What levels of concurrency can be exposed in the k-mean algorithm?</h4><ul>
<li>Initialization: when define distance metric(Euclidian), D(sum reduction) &lt;- euclid_dist_2()</li>
<li>Expectation: when evaluate distance to each cluster centroid and select closest, N(independent); D(sum reduction) &lt;- euclid_dist_2(); k(min reduction)</li>
<li>Maximization: when calculate new cluster centroid, D(independent); N(Histogram computation into k bins)</li>
</ul>
<h4 id="What-levels-of-parallelism-are-available-to-be-exploited"><a href="#What-levels-of-parallelism-are-available-to-be-exploited" class="headerlink" title="What levels of parallelism are available to be exploited?"></a>What levels of parallelism are available to be exploited?</h4><ul>
<li>Multicore and manycore parallelism</li>
<li>Memory Hierarchy</li>
</ul>
<h4 id="What-mapping-between-concurrency-and-parallelism-can-be-explored"><a href="#What-mapping-between-concurrency-and-parallelism-can-be-explored" class="headerlink" title="What mapping between concurrency and parallelism can be explored?"></a>What mapping between concurrency and parallelism can be explored?</h4><ul>
<li>SIMD &amp; core-level parallelism across data-points(N)<ul>
<li>Update menbership for each data point sequentially</li>
<li>Histogram computation(summation/assignment count for new clusters)</li>
</ul>
</li>
<li>OpenMP</li>
</ul>
<h4 id="How-is-this-relevant-to-writing-fast-code-1"><a href="#How-is-this-relevant-to-writing-fast-code-1" class="headerlink" title="How is this relevant to writing fast code?"></a>How is this relevant to writing fast code?</h4><ul>
<li>Expose concurrencies in allications and algorithms</li>
<li>Exploit parallelisms on application platform</li>
<li>Explore mapping between concurrency and parallelism</li>
</ul>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>how to write fast code</tag>
      </tags>
  </entry>
  <entry>
    <title>statistical-learning-3</title>
    <url>/2017/03/09/statistical-learning-3/</url>
    <content><![CDATA[<p>Chapter 4 REVIEW</p>
<a id="more"></a>
<h3 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h3><p>logistic function:</p>
<script type="math/tex; mode=display">p(x)=\frac{e^{\beta _{0}+\beta _{1}x}}{1+e^{\beta _{0}+\beta _{1}x}}</script><p>odds:(odd&gt;0)</p>
<script type="math/tex; mode=display">\frac{p(x)}{1-p(x)}=e^{\beta _{0}+\beta _{1}x}</script><p>logit:</p>
<script type="math/tex; mode=display">log(\frac{p(x)}{1-p(x)})=\beta _{0}+\beta _{1}x</script><p>likelihood function:</p>
<script type="math/tex; mode=display">
\begin{equation}
\begin{aligned}
l(\beta _{0},\beta _{1})&=\prod_{i=1}^{n}p(Y=y _{i}|X=x _{i})\\
&=\prod_{i=1}^{n}p(x_{i})^{y _{i}}(1-p(x _{i}))^{1-y_{i}}\\
&=\prod_{i;y _{i}=1}p(x _{i})\prod_{i;y _{i}=0}(1-p(x _{i}))
\end{aligned}
\end{equation}</script><script type="math/tex; mode=display">
\begin{equation}
\begin{aligned}
log(l(\beta _{0},\beta _{1}))&=\sum_{i=1}^{n}log(1-p(x_{i}))+\sum_{i=1}^{n}y_{i}log\frac{p(x)}{1-p(x)}\\
&=-\sum_{i=1}^{n}log(1+e^{\beta _{0}+\beta _{1}x})+\sum_{i=1}^{n}y_{i}(\beta _{0}+\beta _{1}x)
\end{aligned}
\end{equation}</script><h3 id="Multiple-Logistic-Regression"><a href="#Multiple-Logistic-Regression" class="headerlink" title="Multiple Logistic Regression"></a>Multiple Logistic Regression</h3><p>logit:</p>
<script type="math/tex; mode=display">log(\frac{p(x)}{1-p(x)})=\beta _{0}+\beta _{1}x_{1}+...+\beta _{p}x_{p}</script><script type="math/tex; mode=display">p(x)=\frac{e^{\beta _{0}+\beta _{1}x_{1}+...+\beta _{p}x_{p}}}{1+e^{\beta _{0}+\beta _{1}x_{1}+...+\beta _{p}x_{p}}}</script><h3 id="Bayes’-Theorem"><a href="#Bayes’-Theorem" class="headerlink" title="Bayes’ Theorem"></a>Bayes’ Theorem</h3><p>density function:</p>
<script type="math/tex; mode=display">f_{k}(x)=P_{r}(X=x|Y=k)</script><p>posterior probability:</p>
<script type="math/tex; mode=display">p_{k}(x)=P_{r}(Y=k|X=x)=\frac{\pi _{k}f_{k}(x)}{\sum_{l=1}^{k}\pi _{l}f_{l}(x)}=\frac{P_{r}(Y=k)P_{r}(X=x|Y=k)}{\sum_{l=1}^{k}(Y=l)P_{r}(X=x|Y=l)}</script>]]></content>
      <categories>
        <category>statistical learning</category>
      </categories>
      <tags>
        <tag>statistical learning</tag>
      </tags>
  </entry>
  <entry>
    <title>statistical-learning-2</title>
    <url>/2017/03/09/statistical-learning-2/</url>
    <content><![CDATA[<p>Chapter 3 REVIEW</p>
<a id="more"></a>
<h3 id="简单线性回归"><a href="#简单线性回归" class="headerlink" title="简单线性回归"></a>简单线性回归</h3><script type="math/tex; mode=display">Y=\beta _{0}+\beta _{1}X+\varepsilon</script><script type="math/tex; mode=display">\widehat{y}=\widehat{\beta} _{0}+\widehat{\beta} _{1}x</script><p>$\varepsilon $的原因：</p>
<ul>
<li>真实的x和y的关系可能不是线性的</li>
<li>存在测量误差</li>
<li>$\varepsilon $服从$N(0,\vartheta ^{2}),\, \, \, \vartheta ^{2}=\sum\varepsilon ^{2}$</li>
<li>对$\varepsilon$的估计称为残差标准误$RSE=\sqrt{RSS/(n-2)}$</li>
</ul>
<h4 id="残差平方和-residual-sum-of-square"><a href="#残差平方和-residual-sum-of-square" class="headerlink" title="残差平方和 residual sum of square"></a>残差平方和 residual sum of square</h4><script type="math/tex; mode=display">RSS=e_{1}^{2}+e_{2}^{2}+...e_{n}^{2},\, \, \, e_{i}=y_{i}-\widehat{y}_{i}=y_{i}-\widehat{\beta }_{0}-\widehat{\beta }_{1}x</script><script type="math/tex; mode=display">\therefore RSS=\sum (y_{i}-\widehat{y}_{i})^{2}=\sum (y_{i}-\widehat{\beta }_{0}-\widehat{\beta }_{1}x)^{2}</script><h4 id="最小二乘法求解得"><a href="#最小二乘法求解得" class="headerlink" title="最小二乘法求解得"></a>最小二乘法求解得</h4><script type="math/tex; mode=display">\widehat{\beta }_{1}=\frac{\sum (x_{i}-\overline{x})(y_{i}-\overline{y})}{\sum (x_{i}-\overline{x})^{2}}=\frac{l_{xy}}{l_{xx}}</script><script type="math/tex; mode=display">\widehat{\beta }_{0}=\overline{y}-\widehat{\beta }_{1}\overline{x}</script><p>定义样本均值$\widehat{\mu }$，随机变量Y总体均值$\mu$。衡量$\widehat{\mu }$对$\mu$的估计有多准确，用$\widehat{\mu }$的标准误差$SE(\widehat{\mu })$</p>
<p>$\widehat{\mu }$的方差$Var(\widehat{\mu })=SE(\widehat{\mu })^{2}=\frac{\vartheta ^{2}}{n}$</p>
<p>同理，衡量$\widehat{\beta}<em>{0}$和$\widehat{\beta}</em>{1}$分别对$\beta<em>{0}$和$\beta</em>{1}$估计的准确性，用$SE(\widehat{\beta}<em>{0})$和$SE(\widehat{\beta}</em>{1})$</p>
<script type="math/tex; mode=display">SE(\widehat{\beta }_{0})^{2}=\vartheta ^{2}[\frac{1}{n}+\frac{\overline{x}^{2}}{\sum (x_{i}-\overline{x})^{2}}]</script><script type="math/tex; mode=display">SE(\widehat{\beta }_{1})^{2}=\frac{\vartheta ^{2}}{\sum (x_{i}-\overline{x})^{2}}</script><h4 id="95-的置信区间："><a href="#95-的置信区间：" class="headerlink" title="95%的置信区间："></a>95%的置信区间：</h4><p>该范围有95%的概率会包含未知参数的真实值。</p>
<p>$\beta<em>{1}$的95%置信区间为 $\widehat{\beta}</em>{1}\pm 2\cdot SE(\widehat{\beta}_{1})$</p>
<p>$\beta<em>{0}$的95%置信区间为 $\widehat{\beta}</em>{0}\pm 2\cdot SE(\widehat{\beta}_{0})$</p>
<h4 id="t-statistc-和p-value确定X和Y之间是否有关系"><a href="#t-statistc-和p-value确定X和Y之间是否有关系" class="headerlink" title="t-statistc 和p-value确定X和Y之间是否有关系"></a>t-statistc 和p-value确定X和Y之间是否有关系</h4><p>零假设$H<em>{0}$: X和Y之间无关。$H</em>{0}: \beta _{1}=0$</p>
<p>备择假设$H<em>{a}$: X和Y之间存在一定关系  $H</em>{a}: \beta _{1}\neq 0$</p>
<p>t-statistic: </p>
<script type="math/tex; mode=display">t=\frac{\widehat{\beta }_{1}}{SE(\widehat{\beta }_{1})}</script><p>假设$H_{0}$成立，则t-statistic服从自由度n-2的t分布</p>
<p>定义p-value为任意观测值大于等于$\left | t \right |$的概率</p>
<p>如果p-value足够小，则拒绝$H_{0}$</p>
<h4 id="模型准确性度量"><a href="#模型准确性度量" class="headerlink" title="模型准确性度量"></a>模型准确性度量</h4><p>一旦拒绝了$H_{0}$，就可以讨论模型的准确性，即确定拟合质量，用两个标准</p>
<ul>
<li><strong>绝对测度：残差标准误RSE</strong></li>
</ul>
<p>RSE是$\varepsilon $的估计，RSE是模型对数据失拟的绝对测度。</p>
<script type="math/tex; mode=display">RSE=\sqrt{RSS/(n-2)}=\sqrt{\sum (y_{i}-\widehat{y}_{i})^{2}/(n-2)}</script><ul>
<li><strong>相对测度：$R^{2}$统计量</strong></li>
</ul>
<p>$R^{2}$是一个比例，取值在0到1之间</p>
<script type="math/tex; mode=display">R^{2}=\frac{TSS-RSS}{TSS}=1-\frac{RSS}{TSS}=\frac{ESS}{TSS}</script><p>总平方和 $TSS=\sum (y_{i}-\overline{y})^{2}$：执行回归分析前响应变量中的固有变异性</p>
<p>残差平方和 $RSS=\sum (y<em>{i}-\widehat{y}</em>{i})^{2}$：回归之后仍无法解释的变异性</p>
<p>回归平方和 $ESS=\sum (\widehat{y}_{i}-\overline{y})^{2}$：响应变量进行回归之后被消除的变异性</p>
<script type="math/tex; mode=display">TSS=RSS+ESS</script><p>相关性：</p>
<script type="math/tex; mode=display">Cor(X,Y)=\frac{\sum (x_{i}-\overline{x})(y_{i}-\overline{y})}{\sqrt{\sum (x_{i}-\overline{x})^{2}}\sqrt{\sum (y_{i}-\overline{y})^{2}}}=\frac{l_{xy}}{\sqrt{l_{xx}}\sqrt{l_{yy}}}</script><p>在简单线性回归中，$R^{2}=Cor(X,Y)^{2}$</p>
<h3 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h3><script type="math/tex; mode=display">Y=\beta _{0}+\beta _{1}X+\beta _{2}X_{2}+...+\beta _{p}X_{p}+\varepsilon</script><script type="math/tex; mode=display">\widehat{y}=\widehat{\beta} _{0}+\widehat{\beta} _{1}x+\widehat{\beta }_{2}x_{2}+...+\widehat{\beta }_{p}x_{p}</script><h4 id="残差平方和-residual-sum-of-square-1"><a href="#残差平方和-residual-sum-of-square-1" class="headerlink" title="残差平方和 residual sum of square"></a>残差平方和 residual sum of square</h4><script type="math/tex; mode=display">RSS=\sum (y_{i}-\widehat{y}_{i})^{2}=\sum (y_{i}-\widehat{\beta }_{0}-\widehat{\beta }_{1}x-...-\widehat{\beta }_{p}x_{p})^{2}</script><h4 id="F统计量"><a href="#F统计量" class="headerlink" title="F统计量"></a>F统计量</h4><p>零假设$H<em>{0}$: X和Y之间无关。$H</em>{0}: \beta <em>{1}=\beta </em>{2}=…=\beta _{p}=0$</p>
<p>备择假设$H<em>{a}$: X和Y之间存在一定关系  $H</em>{a}: $至少有一个$\beta _{j}$不为0</p>
<p>F统计量：</p>
<script type="math/tex; mode=display">F=\frac{(RSS_{0}-RSS)/q}{RSS/(n-p-1)}</script><p>当$H<em>{0}$成立时，F-&gt;1，F服从F分布，$E[(TSS-RSS)/p]=\vartheta ^{2}$；当$H</em>{a}$成立时，F&gt;1</p>
<p>n比较大时，小F值即可拒绝$H<em>{0}$；n比较小时，需要大的F值才能拒绝$H</em>{0}$</p>
<h4 id="确定重要变量"><a href="#确定重要变量" class="headerlink" title="确定重要变量"></a>确定重要变量</h4><ul>
<li>向前选择 forward selection</li>
<li>向后选择 backward selection， p&gt;n时不可用</li>
<li>混合选择 mixed selection</li>
</ul>
<h4 id="模型拟合质量"><a href="#模型拟合质量" class="headerlink" title="模型拟合质量"></a>模型拟合质量</h4><p>残差标准误</p>
<script type="math/tex; mode=display">RSE=\sqrt{RSS/(n-p-1)}</script><h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><ul>
<li>定性变量</li>
</ul>
<p>转化为哑变量(dump variable)</p>
<ul>
<li>拓展交互项</li>
</ul>
<p><strong>有交互项的模型不是可加的</strong></p>
<p>实验分层原则(hierarchical principle): 模型一定含有交互项的主效应项</p>
<ul>
<li>非线性关系：多项式回归</li>
<li><p>潜在问题</p>
<ul>
<li>数据的非线性：残差图是否有模式(U型等)</li>
<li>误差项$\varepsilon _{i}$自相关：残差图是否有tracking的现象</li>
<li>误差项$\varepsilon _{i}$方差不恒定：残差图是否成漏斗状(funnel shape)</li>
<li>outliers：用$studentized\, residual=\frac{e_{i}}{RSE}&gt;3$则为outliers</li>
<li><p>高杆杠点</p>
<p>leverage statistic: </p>
<script type="math/tex; mode=display">h_{i}=\frac{1}{n}+\frac{(x_{i}-\overline{x})^{2}}{\sum (x_{i}-\overline{x})^{2}},\, \, \, \frac{1}{n}<h_{i}<1\, \, 且\, \, \frac{1}{n}\sum h_{i}=\frac{p+1}{h}</script></li>
<li><p>collinearity：用RSS等高线图看</p>
<p>collinearity提高，$SE(\widehat{\beta}<em>{i})$提高，t-statistic降低，$H</em>{0}$无法拒绝</p>
<p>检验方法一：相关系数矩阵，但存在multicollinearity问题</p>
<p>检验方法二：</p>
<script type="math/tex; mode=display">VIF(\widehat{\beta }_{i})=\frac{1}{1-R_{j}^{2}}</script></li>
</ul>
</li>
</ul>
<h4 id="linear-regression-vs-KNN"><a href="#linear-regression-vs-KNN" class="headerlink" title="linear regression vs KNN"></a>linear regression vs KNN</h4><ol>
<li>参数和非参数方法优缺点</li>
<li>如果选定的参数形式，接近$f$的真实形式，则参数法更优</li>
<li>如果真实关系是非线性的，flexibility提高，KNN测试集MSE变化小，线性回归的test MSE提高。但在非线性情况下，KNN结果可能更差，尤其是维度大的时候。</li>
<li>纬度灾难(curse of dimensionality)</li>
</ol>
<h3 id="补充证明"><a href="#补充证明" class="headerlink" title="补充证明"></a>补充证明</h3><script type="math/tex; mode=display">y=X\beta +\varepsilon</script><p>if $\varepsilon $ is constant variance $\vartheta ^{2}$，$\beta =(X^{T}X)^{-1}X^{T}y$</p>
<p>if $\varepsilon $ is non-constant variance</p>
<script type="math/tex; mode=display">\varepsilon \sim \begin{pmatrix}
\vartheta _{1}^{2} & 0 & ... & 0\\ 
0 &  \vartheta _{2}^{2}&  ...& 0\\ 
 ...&  ...&  ...& ...\\ 
0 & 0 & ... & \vartheta _{n}^{2}
\end{pmatrix}</script><p>weight matrix:</p>
<script type="math/tex; mode=display">W= \begin{pmatrix}
\frac{1}{\vartheta _{1}^{2}} & 0 & ... & 0\\ 
0 &  \frac{1}{\vartheta _{2}^{2}}&  ...& 0\\ 
 ...&  ...&  ...& ...\\ 
0 & 0 & ... & \frac{1}{\vartheta _{n}^{2}}
\end{pmatrix}</script><script type="math/tex; mode=display">\beta =(X^{T}WX)^{-1}X^{T}Wy</script>]]></content>
      <categories>
        <category>statistical learning</category>
      </categories>
      <tags>
        <tag>statistical learning</tag>
      </tags>
  </entry>
  <entry>
    <title>statistical-learning-1</title>
    <url>/2017/03/08/statistical-learning-1/</url>
    <content><![CDATA[<p>快速回顾学过的statistical learning知识点</p>
<a id="more"></a>
<p>真实模型 $Y=f(x)+\varepsilon $</p>
<p>拟合模型 $\widehat{Y}=\widehat{f}(x)$</p>
<p>$MSE=[f(x)-\widehat{f}(x)]^{2}+Var(\varepsilon )$</p>
<ul>
<li>MSE: mean square error </li>
<li>$[f(x)-\widehat{f}(x)]^{2}$: reducible error</li>
<li>$Var(\varepsilon )$: irreducible error</li>
</ul>
<h3 id="how-to-estimate-f"><a href="#how-to-estimate-f" class="headerlink" title="how to estimate $f$"></a>how to estimate $f$</h3><p>(1) 参数方法 parametric methods 和 非参数方法 non-parametric methods</p>
<p>参数方法：</p>
<ul>
<li>advantages: reduce the problem of estimate $f$ down to estimating a set of parameters</li>
<li>disadvantage: the model we choose usually not match the true unknown form of $f$. If the chosen model is too far from the true $f$, then our estimation will be poor. If we choose a too complex model, it may cause overfitting.</li>
</ul>
<p>非参数方法：</p>
<ul>
<li>advantage: by avoiding the assumption of a paticular function form of $f$, they have the potential to accuratelt fit a wider range of possible shapes for $f$.</li>
<li>dis: a very large number of observations is required.</li>
</ul>
<p>(2) 监督方法 supervised methods 和非监督方法 unsupervised methods</p>
<h3 id="准确率-Accuracy"><a href="#准确率-Accuracy" class="headerlink" title="准确率 Accuracy"></a>准确率 Accuracy</h3><h4 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a>Regression</h4><p>$traning MSE=\frac{1}{n}\sum<em>{i=1}^{n}(y</em>{i}-\widehat{f}(x<em>{i}))^{2}$<br>$test MSE=Ave(y</em>{0}-\widehat{f}(x_{0}))^{2}$</p>
<p>In general, as the flexibility of the statistical learining method increases, we observe a monotone decrease in the training MSE and a U-shape in the test MSE.</p>
<p><strong>Overfitting</strong> happens because the statistical learning procedure is working too hard to find the pattern in the training fata and may pick up some patterns that are just caused by randon chance rather than by the true property of the unknown function $f$</p>
<p><strong>the bias-variance trade-off</strong><br>$test MSE=Ave(y<em>{0}-\widehat{f}(x</em>{0}))^{2}=Var(\widehat{f}(x<em>{0}))+[Bias(\widehat{f}(x</em>{0}))]^{2}+Var(\varepsilon)$</p>
<p><em>Variance</em>: the amount by which $\widehat{f}$ would change if we estimated it using different training dataset. If the varaince is high, small changes in the training dataset cause large changes in $\widehat{f}$</p>
<p><em>Bias</em>: the error that is introduced by approximationg a real life problem. If the true is very close to linear, the bias is small. Otherwise, the bias decreases by increasing flexibility.</p>
<p><strong>flexibility increases, variance increases but bias decreases</strong></p>
<p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/regression_accuracy.png" alt="regression accuracy"></p>
<p>left: common situation;  middle: the true is approximately linear;  right: the true is highly non-linear </p>
<h4 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h4><script type="math/tex; mode=display">\left\{\begin{matrix}
I(y_{i}\neq \widehat{y}_{i})=1 \\
I(y_{i}= \widehat{y}_{i})=0
\end{matrix}\right.</script><script type="math/tex; mode=display">training\, error\, rate=\frac{1}{n}\sum_{i=1}^{n}I(y_{i}\neq \widehat{y}_{i})</script><script type="math/tex; mode=display">test\, error\, rate=Ave(I(y_{0}\neq \widehat{y}_{0}))</script><p>Bayes classifier: $Pr(Y=j|X=x_{0})$</p>
<p>$Bayes\, error\, rate=1-E(\underset{j}{max}Pr(Y=j|x))=E(\varepsilon )$</p>
<p><strong>The Bayes error rate is the lowest possible test error rate</strong></p>
]]></content>
      <categories>
        <category>statistical learning</category>
      </categories>
      <tags>
        <tag>statistical learning</tag>
      </tags>
  </entry>
  <entry>
    <title>csapp-chapter3</title>
    <url>/2017/03/06/csapp-chapter3/</url>
    <content><![CDATA[<p>Chapter 3 REVIEW</p>
<a id="more"></a>
<h3 id="data-formats"><a href="#data-formats" class="headerlink" title="data formats"></a>data formats</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center">size</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">byte</td>
<td style="text-align:center">b</td>
<td style="text-align:center">1 byte</td>
</tr>
<tr>
<td style="text-align:center">word</td>
<td style="text-align:center">w</td>
<td style="text-align:center">2 bytes</td>
</tr>
<tr>
<td style="text-align:center">double word</td>
<td style="text-align:center">l</td>
<td style="text-align:center">4 bytes</td>
</tr>
<tr>
<td style="text-align:center">quad word</td>
<td style="text-align:center">q</td>
<td style="text-align:center">8 bytes</td>
</tr>
</tbody>
</table>
</div>
<h3 id="integer-registers"><a href="#integer-registers" class="headerlink" title="integer registers"></a>integer registers</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">%rax</th>
<th style="text-align:center">%eax</th>
<th style="text-align:center">%ax</th>
<th style="text-align:center">%al</th>
<th style="text-align:center">return value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">%rbx</td>
<td style="text-align:center">%ebx</td>
<td style="text-align:center">%bx</td>
<td style="text-align:center">%bl</td>
<td style="text-align:center">callee saved </td>
</tr>
<tr>
<td style="text-align:center">%rcx</td>
<td style="text-align:center">%ecx</td>
<td style="text-align:center">%cx</td>
<td style="text-align:center">%cl</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">%rdx</td>
<td style="text-align:center">%edx</td>
<td style="text-align:center">%dx</td>
<td style="text-align:center">%dl</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">%rsi</td>
<td style="text-align:center">%esi</td>
<td style="text-align:center">%si</td>
<td style="text-align:center">%sil</td>
<td style="text-align:center">source</td>
</tr>
<tr>
<td style="text-align:center">%rdi</td>
<td style="text-align:center">%edi</td>
<td style="text-align:center">%di</td>
<td style="text-align:center">%dil</td>
<td style="text-align:center">destination</td>
</tr>
<tr>
<td style="text-align:center">%rbp</td>
<td style="text-align:center">%ebp</td>
<td style="text-align:center">%bp</td>
<td style="text-align:center">%bpl</td>
<td style="text-align:center">callee saved</td>
</tr>
<tr>
<td style="text-align:center">%rsp</td>
<td style="text-align:center">%esp</td>
<td style="text-align:center">%sp</td>
<td style="text-align:center">%spl</td>
<td style="text-align:center">stack pointer</td>
</tr>
<tr>
<td style="text-align:center">%r8</td>
<td style="text-align:center">%r8d</td>
<td style="text-align:center">%r8w</td>
<td style="text-align:center">%r8b</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">%r9</td>
<td style="text-align:center">%r9d</td>
<td style="text-align:center">%r9w</td>
<td style="text-align:center">%r9b</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">%r10</td>
<td style="text-align:center">%r10d</td>
<td style="text-align:center">%r10w</td>
<td style="text-align:center">%r10b</td>
<td style="text-align:center">caller saved</td>
</tr>
<tr>
<td style="text-align:center">%r11</td>
<td style="text-align:center">%r11d</td>
<td style="text-align:center">%r11w</td>
<td style="text-align:center">%r11b</td>
<td style="text-align:center">caller saved </td>
</tr>
<tr>
<td style="text-align:center">%r12</td>
<td style="text-align:center">%r12d</td>
<td style="text-align:center">%r12w</td>
<td style="text-align:center">%r12b</td>
<td style="text-align:center">callee saved</td>
</tr>
<tr>
<td style="text-align:center">%r13</td>
<td style="text-align:center">%r13d</td>
<td style="text-align:center">%r13w</td>
<td style="text-align:center">%r13b</td>
<td style="text-align:center">callee saved</td>
</tr>
<tr>
<td style="text-align:center">%r14</td>
<td style="text-align:center">%r14d</td>
<td style="text-align:center">%r14w</td>
<td style="text-align:center">%r14b</td>
<td style="text-align:center">callee saved</td>
</tr>
<tr>
<td style="text-align:center">%r15</td>
<td style="text-align:center">%r15d</td>
<td style="text-align:center">%r15w</td>
<td style="text-align:center">%r15b</td>
<td style="text-align:center">callee saved</td>
</tr>
</tbody>
</table>
</div>
<h3 id="operand-specifiers"><a href="#operand-specifiers" class="headerlink" title="operand specifiers"></a>operand specifiers</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">instructions</th>
<th style="text-align:center">effect</th>
<th style="text-align:center">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">mov s,d</td>
<td style="text-align:center">d&lt;-s</td>
<td style="text-align:center">move</td>
</tr>
<tr>
<td style="text-align:center">movz s,r</td>
<td style="text-align:center">r&lt;-zeroextend(s)</td>
<td style="text-align:center">move with zero extension</td>
</tr>
<tr>
<td style="text-align:center">movs s,r</td>
<td style="text-align:center">r&lt;-signextend(s)</td>
<td style="text-align:center">move with sign extension</td>
</tr>
<tr>
<td style="text-align:center">pushq s</td>
<td style="text-align:center">R[%rsp]&lt;-R[%rsp]-8; M[R[%rsp]]&lt;-s</td>
<td style="text-align:center">push quad word</td>
</tr>
<tr>
<td style="text-align:center">popq d</td>
<td style="text-align:center">d&lt;-M[R[%rsp]]; R[%rsp]&lt;-R[%rsp]+8</td>
<td style="text-align:center">pop quad word</td>
</tr>
<tr>
<td style="text-align:center">leaq s,d</td>
<td style="text-align:center">d&lt;-&amp;s</td>
<td style="text-align:center">load effective address</td>
</tr>
<tr>
<td style="text-align:center">inc d</td>
<td style="text-align:center">d&lt;-d+1</td>
<td style="text-align:center">increment</td>
</tr>
<tr>
<td style="text-align:center">dec d</td>
<td style="text-align:center">d&lt;-d-1</td>
<td style="text-align:center">decrement</td>
</tr>
<tr>
<td style="text-align:center">neg d</td>
<td style="text-align:center">d&lt;- -d</td>
<td style="text-align:center">negate</td>
</tr>
<tr>
<td style="text-align:center">not d</td>
<td style="text-align:center">d&lt;-~d</td>
<td style="text-align:center">complement</td>
</tr>
<tr>
<td style="text-align:center">add s,d</td>
<td style="text-align:center">d&lt;-d+s</td>
<td style="text-align:center">add</td>
</tr>
<tr>
<td style="text-align:center">sub s,d</td>
<td style="text-align:center">d-&lt;d-s</td>
<td style="text-align:center">subtract</td>
</tr>
<tr>
<td style="text-align:center">imul s,d</td>
<td style="text-align:center">d&lt;-mul(d,s)</td>
<td style="text-align:center">miltiply</td>
</tr>
<tr>
<td style="text-align:center">xor s,d</td>
<td style="text-align:center">d&lt;-d^s</td>
<td style="text-align:center">exclusive-or</td>
</tr>
<tr>
<td style="text-align:center">or s,d</td>
<td style="text-align:center">d&lt;-d</td>
<td style="text-align:center">s</td>
<td>or</td>
</tr>
<tr>
<td style="text-align:center">and s,d</td>
<td style="text-align:center">d&lt;-d&amp;s</td>
<td style="text-align:center">and</td>
</tr>
<tr>
<td style="text-align:center">sal k,d</td>
<td style="text-align:center">d&lt;d&lt;&lt;k</td>
<td style="text-align:center">left shift</td>
</tr>
<tr>
<td style="text-align:center">sar k,d</td>
<td style="text-align:center">d&lt;-d&gt;&gt;(a)k</td>
<td style="text-align:center">arithmetic right shift</td>
</tr>
<tr>
<td style="text-align:center">shr k,d</td>
<td style="text-align:center">d&lt;-d&gt;&gt;(l)k</td>
<td style="text-align:center">logical right shift</td>
</tr>
<tr>
<td style="text-align:center">cmp s1,s2</td>
<td style="text-align:center">s2-s1</td>
<td style="text-align:center">compare</td>
</tr>
<tr>
<td style="text-align:center">test s1,s2</td>
<td style="text-align:center">s1&amp;s2</td>
<td style="text-align:center">test</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">instructions</th>
<th style="text-align:center">instructions</th>
<th style="text-align:center">instructions</th>
<th style="text-align:center">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sete d = setz d</td>
<td style="text-align:center">je Label</td>
<td style="text-align:center">cmove s,r</td>
<td style="text-align:center">zero</td>
</tr>
<tr>
<td style="text-align:center">setne d = setnz d</td>
<td style="text-align:center">jne Label</td>
<td style="text-align:center">cmovne s,r</td>
<td style="text-align:center">not zero</td>
</tr>
<tr>
<td style="text-align:center">sets d</td>
<td style="text-align:center">js Label</td>
<td style="text-align:center">cmovs s,r</td>
<td style="text-align:center">negative</td>
</tr>
<tr>
<td style="text-align:center">setns d</td>
<td style="text-align:center">jns Label</td>
<td style="text-align:center">cmovns s,r</td>
<td style="text-align:center">nonnegative</td>
</tr>
<tr>
<td style="text-align:center">setg d</td>
<td style="text-align:center">jg Label</td>
<td style="text-align:center">cmovg s,r</td>
<td style="text-align:center">signed &gt;</td>
</tr>
<tr>
<td style="text-align:center">setge d</td>
<td style="text-align:center">jge Label</td>
<td style="text-align:center">cmovge s,r</td>
<td style="text-align:center">signed &gt;=</td>
</tr>
<tr>
<td style="text-align:center">setl d</td>
<td style="text-align:center">jl Label</td>
<td style="text-align:center">cmovl s,r</td>
<td style="text-align:center">signed &lt;</td>
</tr>
<tr>
<td style="text-align:center">setle d</td>
<td style="text-align:center">jle Label</td>
<td style="text-align:center">cmovle s,r</td>
<td style="text-align:center">signed &lt;=</td>
</tr>
<tr>
<td style="text-align:center">seta d</td>
<td style="text-align:center">ja Label</td>
<td style="text-align:center">cmova s,r</td>
<td style="text-align:center">unsigned &gt;</td>
</tr>
<tr>
<td style="text-align:center">setae d</td>
<td style="text-align:center">jae Label</td>
<td style="text-align:center">cmovae s,r</td>
<td style="text-align:center">unsigned &gt;=</td>
</tr>
<tr>
<td style="text-align:center">setb d</td>
<td style="text-align:center">jb Label</td>
<td style="text-align:center">cmovb s,r</td>
<td style="text-align:center">unsigned &lt;</td>
</tr>
<tr>
<td style="text-align:center">setbe d</td>
<td style="text-align:center">jbe Label</td>
<td style="text-align:center">cmovbe s,r</td>
<td style="text-align:center">unsigned &lt;=</td>
</tr>
<tr>
<td style="text-align:center">jmp Label</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">direct jump</td>
</tr>
</tbody>
</table>
</div>
<h3 id="data-alignment"><a href="#data-alignment" class="headerlink" title="data alignment"></a>data alignment</h3><p>k bytes 的数据类型的地址必须为k的倍数</p>
<h3 id="buffer-overflow"><a href="#buffer-overflow" class="headerlink" title="buffer overflow"></a>buffer overflow</h3><ul>
<li>gets(),strcpy(),strcat(),sprintf()均有可能导致buffer overflow</li>
<li>thwarting buffer overflow attacks<ul>
<li>stack randomization</li>
<li>stack corruption detection(canary)</li>
<li>limiting executable code regions</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>csapp-chapter2</title>
    <url>/2017/03/05/csapp-chapter2/</url>
    <content><![CDATA[<p>Chapter 2 REVIEW</p>
<a id="more"></a>
<h3 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h3><ul>
<li><p>十进制数x可以表示为x=2^n，其中n=i+4j，可以把x转换成十六进制，第一位为2^i，后面跟j个0.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x=2048=2^11;  11=3+4*2;   x=0x800</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据大小(字节数)</p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">c语言</th>
<th style="text-align:center">32位</th>
<th style="text-align:center">64位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">char</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">4</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">long long</td>
<td style="text-align:center">8</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">char*</td>
<td style="text-align:center">8</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">8</td>
<td style="text-align:center">8</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>小端法和大端法</li>
</ul>
<p>假设十六进制数0x1234567位于地址0x100处</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">地址</th>
<th style="text-align:center">0x100</th>
<th style="text-align:center">0x101</th>
<th style="text-align:center">0x102</th>
<th style="text-align:center">0x103 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">big endian</td>
<td style="text-align:center">01</td>
<td style="text-align:center">23</td>
<td style="text-align:center">45</td>
<td style="text-align:center">67 </td>
</tr>
<tr>
<td style="text-align:center">little endian</td>
<td style="text-align:center">67</td>
<td style="text-align:center">45</td>
<td style="text-align:center">23</td>
<td style="text-align:center">01 </td>
</tr>
</tbody>
</table>
</div>
<p>假设字符串“1234”位于地址0x100处</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">地址</th>
<th style="text-align:center">0x100</th>
<th style="text-align:center">0x101</th>
<th style="text-align:center">0x102</th>
<th style="text-align:center">0x103</th>
<th style="text-align:center">0x104</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">字符串</td>
<td style="text-align:center">31</td>
<td style="text-align:center">32</td>
<td style="text-align:center">33</td>
<td style="text-align:center">34</td>
<td style="text-align:center">00</td>
</tr>
</tbody>
</table>
</div>
<h3 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h3><ul>
<li>无符号数<script type="math/tex; mode=display">B2U(w)=\sum_{w-1}^{i=0}{x}_{i}{2}^{i}</script></li>
<li>有符号数<script type="math/tex; mode=display">B2T(w)=-{x}_{w-1}{2}^{w-1}+\sum_{w-2}^{i=0}{x}_{I}{2}^{i}</script></li>
<li>补码<script type="math/tex; mode=display">TMin(w)=10...0b=-{2}^{w-1}</script><script type="math/tex; mode=display">TMax(w)=01...1b={2}^{w-1}-1</script></li>
<li>编码方式之间的转换<ul>
<li>数值可能改变，但是位模式不变</li>
<li>short转换为unsigned时，先改变大小，再完成有符号数到无符号数的转换</li>
<li>负溢出$+{2}^{w}$,正溢出$-{2}^{w}$</li>
<li>截断相当于$mod({2}^{w})$</li>
</ul>
</li>
</ul>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><ul>
<li>IEEE浮点表示</li>
</ul>
<p>一个数先写成二进制的形式，$V={(-1)}^{s}<em>M</em>{2}^{E}$</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">位数</th>
<th style="text-align:center">1位</th>
<th style="text-align:center">k位(exp)</th>
<th style="text-align:center">n位(frac)</th>
<th style="text-align:center">对应规则</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">规格化的</td>
<td style="text-align:center">s</td>
<td style="text-align:center">!=0&amp;&amp;!=255</td>
<td style="text-align:center">f</td>
<td style="text-align:center">$M=1+f,$ $E=e-Bias,$ $Bias={2}^{k-1}-1$</td>
</tr>
<tr>
<td style="text-align:center">非规格化的</td>
<td style="text-align:center">s</td>
<td style="text-align:center">全0</td>
<td style="text-align:center">f</td>
<td style="text-align:center">$M=f,E=1-Bias$</td>
</tr>
<tr>
<td style="text-align:center">无穷大</td>
<td style="text-align:center">s</td>
<td style="text-align:center">全1</td>
<td style="text-align:center">全0</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">特殊值</td>
<td style="text-align:center">s</td>
<td style="text-align:center">全1</td>
<td style="text-align:center">非0</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>二进制舍入</li>
</ul>
<p>向偶数舍入(round-to-even): 要舍去的部分大于10…，直接进位；小于10…，直接舍去；等于10…，若精度位为1则进位否则舍去</p>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>csapp-chapter1</title>
    <url>/2017/03/03/csapp-chapter1/</url>
    <content><![CDATA[<p>Chapter 1 REVIEW</p>
<a id="more"></a>
<h3 id="文件和编码"><a href="#文件和编码" class="headerlink" title="文件和编码"></a>文件和编码</h3><p>只由ASCII字符构成的文件成为<em>文本文件</em>，所有其他文件称为<em>二进制文件</em></p>
<h3 id="编译系统"><a href="#编译系统" class="headerlink" title="编译系统"></a>编译系统</h3><p>编译系统(compilation system):预处理器cpp、编译器ccl、汇编器as、链接器ld</p>
<p>预处理阶段：源程序（.c）-&gt; 被修改的源程序（.i） 完成读取头文件并直接插入程序文本的工作</p>
<p>编译阶段：被修改的源程序（.i）-&gt; 汇编程序（.s）</p>
<p>汇编阶段：汇编程序（.s）-&gt; 可重定位的目标程序（.o）.o文件是二进制文件</p>
<p>链接阶段：可重定位的目标程序（.o）-&gt; 可执行目标程序（二进制）负责多个.o文件的合并</p>
<p>shell是一个命令行解释器，接受命令行或一个可执行目标程序的名字，加载并运行这个文件</p>
<h3 id="系统硬件组成"><a href="#系统硬件组成" class="headerlink" title="系统硬件组成"></a>系统硬件组成</h3><ul>
<li>总线：传送字，字长4字节（32位）或8字节（64位）</li>
<li>I/O设备： 每个I/O设备通过控制器或适配器与总线相连</li>
<li>主存DRAM</li>
<li>处理器CPU</li>
</ul>
<h3 id="存储层析结构"><a href="#存储层析结构" class="headerlink" title="存储层析结构"></a>存储层析结构</h3><p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/memory_hierarchy.png" alt="memory hierarchy"></p>
<h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><ul>
<li>一个系统可以同时运行多个进程，进程并发运行，进程的指令交错执行，成为上下文切换</li>
<li>一个进程由多个线程组成，线程共享同样的代码和全局数据</li>
</ul>
<h3 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h3><p>每个进程都有自己的虚拟存储地址空间</p>
<p><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/virtual_memory_address.png" alt="virtual memory address"></p>
<h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p>并发(concurrency)：同时具有多个活动的系统<br>并行(parallelism)：用并发使系统运行得更快</p>
<ul>
<li>线程级并发</li>
</ul>
<p>超线程(simultaneous nulti-threading):允许CPU执行多个控制流</p>
<ul>
<li>指令级并行</li>
</ul>
<p>流水线(pipelining)：将一条指令所需要的活动划分成不同的步骤<br>超标量(superscalar)：处理器达到比一个周期一条指令更快的执行效率</p>
<ul>
<li>单指令、多数据并行</li>
</ul>
<p>SIMD(simple instruction multiple data)：一条指令可以并行执行的操作</p>
<h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><p>文件时I/O的抽象，虚拟存储器是对程序存储器的抽象，进程对一个正在运行的程序的抽象，虚拟机是对整个计算机的抽象</p>
]]></content>
      <categories>
        <category>STUDY</category>
      </categories>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>2017</title>
    <url>/2017/01/06/2017/</url>
    <content><![CDATA[<a id="more"></a>
<p>买电脑以后花了好长的时间才重新弄好hexo，昨天一天换了好几个主题，换来换去发现自己还是不适合花花绿绿的东西，最后还是回到了next，尽管跟好多人的相似，但是反正访问量不多，还是坚持和内容更重要吧～</p>
<p>16年总结起来就是“重启”，一切都慢慢步入了正轨，虽然没有什么结果，但也是在不紧不慢的前进着。开始重新学习，不管是基础还是语言，都从头开始积累，博客也拾回来了；心态也慢慢变化，不那么冲，收敛一点，衣服也从个性和大胆换成了简单的黑白；以前广度优先的探寻，涉猎很多，却没有兴趣深入，现在也慢慢开始忽略很多信息，反而专注了许多；人不能一直在输出，总需要时间积累和沉淀……</p>
<p>总的来说还是有进步的，唯一没有变的应该是这么烂的文笔和依旧混乱的逻辑吧……</p>
<p>17年只有一个心愿，就是坚持吧～</p>
<p>加油～</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>sort method</title>
    <url>/2017/01/04/sort/</url>
    <content><![CDATA[<p>各种排序算法的简单汇总。</p>
<a id="more"></a>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>基本思想是假定待插入的元素前面的序列已经排序，将待插入的元素与前面序列元素一一进行比较直到找到合适的位置插入即可。</p>
<p>时间复杂度 $T(n)=\sum_{j=1}^{n-1}\vartheta (j)=\vartheta (n^{2})$</p>
<h5 id="升序"><a href="#升序" class="headerlink" title="升序"></a>升序</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort_ascend</span><span class="params">(<span class="keyword">int</span> *A,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;length;j++)&#123;</span><br><span class="line">        <span class="keyword">int</span> key=A[j];</span><br><span class="line">        i=j<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span>&amp;&amp;A[i]&gt;key)&#123;</span><br><span class="line">            A[i+<span class="number">1</span>]=A[i];</span><br><span class="line">            i=i<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        A[i+<span class="number">1</span>]=key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="降序"><a href="#降序" class="headerlink" title="降序"></a>降序</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort_descend</span><span class="params">(<span class="keyword">int</span> *A，<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;length;j++)&#123;</span><br><span class="line">        <span class="keyword">int</span> key=A[j];</span><br><span class="line">        i=j<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span>&amp;&amp;A[i]&lt;key)&#123;</span><br><span class="line">            A[i+<span class="number">1</span>]=A[i];</span><br><span class="line">            i=i<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        A[i+<span class="number">1</span>]=key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>merge函数是将两个已经排序的序列$A[p…q]$和$A[(q+1)…r]$归并为一个，merge_sort函数运用divide-conquer-combine的思想，递归的分割序列，再用merge函数合并序列。</p>
<p>时间复杂度 </p>
<script type="math/tex; mode=display">T(n)=\left\{\begin{matrix}
\vartheta (1) \quad \quad \quad \quad \quad if\ n=1 & \\2T(n/2)+\vartheta(n) \quad if\ n>1 &
\end{matrix}\right.=\vartheta(nlgn)</script><p>(the master method case 2)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void merge(int *A, int p, int q, int r)&#123;</span><br><span class="line">    int i,j,k;</span><br><span class="line">    int n1=q-p+1;</span><br><span class="line">    int n2=r-q;</span><br><span class="line">    int L[n1];</span><br><span class="line">    int R[n2];</span><br><span class="line">    for(i=1;i&lt;=n1;i++)</span><br><span class="line">        L[i-1]=A[p+i-1];</span><br><span class="line">    for(j=1;j&lt;=n2;j++)</span><br><span class="line">        R[j-1]=A[q+j];</span><br><span class="line">    i=0;</span><br><span class="line">    j=0;</span><br><span class="line">    for(k=p;k&lt;=r;k++)&#123;</span><br><span class="line">        if((L[i]&lt;=R[j]&amp;&amp;i&lt;n1)||(j&gt;=n2))&#123;</span><br><span class="line">            A[k]=L[i];</span><br><span class="line">            i=i+1;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            A[k]=R[j];</span><br><span class="line">            j=j+1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void merge_sort(int * A, int p, int r)&#123;</span><br><span class="line">    if(p&lt;r)&#123;</span><br><span class="line">        int q=(p+r)/2;</span><br><span class="line">        merge_sort(A, p, q);</span><br><span class="line">        merge_sort(A, q+1, r);</span><br><span class="line">        merge(A, p, q, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二分排序"><a href="#二分排序" class="headerlink" title="二分排序"></a>二分排序</h4><p>用二分查找代替遍历已排序的序列</p>
<p>时间复杂度 $T(n)=\vartheta(nlgn)$，其中二分查找的时间复杂度为$T(n)=\vartheta(lgn)$</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort_ascend</span><span class="params">(<span class="keyword">int</span> *A，<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;length;j++)&#123;</span><br><span class="line">        <span class="keyword">int</span> key=A[j];</span><br><span class="line">        i=j<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> k=binary_find(A, j, key);</span><br><span class="line">        <span class="keyword">if</span>(A[k]&lt;key)</span><br><span class="line">            k++;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=k)&#123;</span><br><span class="line">            A[i+<span class="number">1</span>]=A[i];</span><br><span class="line">            i=i<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        A[k]=key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_find</span><span class="params">(<span class="keyword">int</span> *A, <span class="keyword">int</span> num, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end=num<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(start+end)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (A[mid]!=value&amp;&amp;start&lt;end) &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[mid]&lt;value)</span><br><span class="line">            start=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> end=mid<span class="number">-1</span>;</span><br><span class="line">        mid=(start+end)/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>Partition函数是将待排序序列$A[p…r]$分成两个$A[p…q-1]$和$A[q+1…r]$，前一个序列每一个元素都小于A[q],后一个序列每一个元素都大于A[q]。quick_sort函数运用divide-conquer-combine的思想，递归的分割序列。</p>
<p>时间复杂度为$T(n)=\vartheta(nlgn)$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QuickSort(int* A, int p, int r)&#123;</span><br><span class="line">	if(p&lt;r)&#123;</span><br><span class="line">		int q = Partition(A, p, r);</span><br><span class="line">		QuickSort(A, p, q-1);</span><br><span class="line">		QuickSort(A, q+1, r);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Partition(int* A, int p, int r)&#123;</span><br><span class="line">	int i=p-1;</span><br><span class="line">	int tmp;</span><br><span class="line">	for(int j=p; j&lt;r; j++)&#123;</span><br><span class="line">		if(A[j]&lt;A[r])&#123;</span><br><span class="line">			i++;</span><br><span class="line">			tmp = A[i];</span><br><span class="line">			A[i]=A[j];</span><br><span class="line">			A[j]=tmp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	tmp=A[i+1];</span><br><span class="line">	A[i+1]=A[r];</span><br><span class="line">	A[r]=tmp;</span><br><span class="line">	return i+1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Introduction to algorithms</category>
      </categories>
      <tags>
        <tag>Introduction to algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>不定期生活小记(三)</title>
    <url>/2016/10/12/%E4%B8%8D%E5%AE%9A%E6%9C%9F%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0-%E4%B8%89/</url>
    <content><![CDATA[<p>一点点小困惑…</p>
<a id="more"></a>
<p>决定把之前CSAPP相关的那几篇撤下来了。一是前两天看到个博客发现学长提及了CSAPP不能外传什么的…二是确实自己也没有写什么属于自己的东西，都是一些笔记类的，以后还是更新做的项目的代码什么的吧…如果有时间的话……<br>下周和后周就是期中考试了，这个学期时间其实挺短的，但是内容一点也没变少啊…最近的感觉就是不能偷懒，不能掉以轻心，随随便便遗漏点什么后面都会变成大麻烦…<br>最近最大的感觉就是上了研究生整个世界都不太一样了。我总觉得自己的心态还是在大一的时候，至少还在本科，就是凡事就是一个学生一个孩子一样的心态，每天上课，学习，休息的时候刷刷微博看看剧，过得也挺好挺正常的。但是身边的人的想法都不一样了…突然发现身边每个人都开始找对象，似乎这变成一种正常的心理状态。突然开始考虑职业生涯和未来生活，而且不是随便想着玩的那种。<br>原来我的状态一直是，在我真正进入到一件事之前，哪怕已经站在门口了，我依然不知道我接下来的状态会怎么样。转专业的时候，哪怕我已经转了，一开始我依然不知道新的专业有四大名补，新的班的同学会熬夜会刷题…谈恋爱的时候，一开始在一起的时候，我也根本不会去想未来什么样，也不会去考虑生活习惯，家庭背景什么的…做竞赛的时候，报了名我都不知道要干什么，不知道竞赛的性质，不知道怎么去准备，一切都是在摸索…<br>但是现在的状态是，我身边的每个人每件事都在提醒着我，我需要认真考虑些什么。我需要考虑这个课能够带给我什么；这个研究项目最后会做到什么样，会有什么成果；半年后一年后我的生活会是什么样的，而我现在要习惯什么学习什么；我需要考虑我要找一个什么样的男朋友，什么背景，未来我的生活规划是什么样，我的职业规划是什么样…所有一切，猝不及防…<br>而且这种想法的改变会让人的心态也有所改变。原来漫无目的，只一心求好，就只顾眼前，一点一滴；现在以为有了目标，有了那个所谓的想法，就会让人变得特别迫不及待，一切都变得很急…<br>CSAPP也是，每一个LAB开始，你能感觉到那份handout里有一个答案摆在那里，你会很想把它拿过来…就连看论文，写代码，也会有一种你知道怎么实现它，然后想尽快实现了进行下一步的冲动…生活也是，会开始考虑以后想要什么样的生活，需要找什么样的条件的人来实现目标中的生活，现在连每周看的shield，我都发现他每周都变成了有一个目标，有一句主题句，每周都要点题，原来的刺激和紧张仅仅是因为剧情，现在还加入了一些为了让观众思考的沉重的部分…</p>
<p>幸好生活还是很忙，进程推动都很快，每一个现在有问题的想法，都会在很短的一段时间内，得到错误的回应…</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>不定期生活小记(二)</title>
    <url>/2016/09/30/%E4%B8%8D%E5%AE%9A%E6%9C%9F%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0-%E4%BA%8C/</url>
    <content><![CDATA[<p>There’s only one thing I want…nothing to lose…</p>
<a id="more"></a>
<p>国庆前夜，陈奕迅在大学城体育馆开演唱会，学校的宿舍楼可以很清晰地听到歌声，不过我又不是陈奕迅的粉，所以我在实验室。<br>开学一个月，一切都上了正轨，每天忙得低血糖。<br>最近越来越发现，人啊，还是喜欢看开心快乐光明的一面的；但是什么事情不是守恒的呢？记得本科的时候就说过，每一个经历过竞赛的人都知道，当所有人都看到你的成绩，你获得的东西，只有自己会知道背后是什么。没有经历过的人，就算解释再多遍，他也不会理解辛酸怎么写。<br>本来今天想复习一下18600，昨晚看到刚下来的18696的作业，决定今天解决了作业，然后周末可以快快乐乐的去玩，结果早上九点接到老师通知周一汇报工作，虽然临时把时间改了，但是作为交换，今天需要把文档给老师。忙了一整天，刚刚把文档发给老师，作业还没开始写。<br>这些事情说出来可能根本不值得一提吧。毕竟当我告诉别人的时候，别人还以为我汇报工作是在炫耀呢……<br>最近觉永远都不够睡。当我一直尽力维持本科时候的那种自如的状态的时候，生活总会往另一个方向越滑越远。<br>简单列一下待办事宜吧：</p>
<ul>
<li>把今天查的几篇论文看了，deadline: 10月9号</li>
<li>18696的作业，deadline: 下周三</li>
<li>18600没复习完的东西，希望下周能赶上进度吧</li>
</ul>
<p>最近有几件觉得轻松愉快的事情开始觉得不是那么好玩了，比如游戏。一个游戏而已，何必当真呢， 想玩玩不想玩就不玩呗，多大点事呢~比如找个男朋友，浪费时间浪费精力，这两天在微博看到一种句式“再也没有人能陪我…”，突然就回忆起去年三四月份的那种气氛了，然后立马抽身，产生一种深深的厌恶感…对于我这种容易感性起来就不是人的还是不要轻易开始什么比较好，就像新一季神盾局里daisy说的”there’s only one thing I want…nothing to lose”，这样想想突然对那些“闲得变态”的人感到有点不屑呢…<br>不过这些事说了也没有人会信，毕竟别人只会调侃而已，毕竟自己在很多人眼里还是那么的浪的，不是吗？</p>
<p>无所谓</p>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="0" height="0" src="https://music.163.com/outchain/player?type=2&id=402070928&auto=1&height=66"></iframe><br>（完）</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>Reading Paper</title>
    <url>/2016/09/13/Reading-Paper/</url>
    <content><![CDATA[<h1 id="Sparse-and-Redundant-Representation-Based-Smart-Meter-Data-Compression-and-Pattern-Extraction"><a href="#Sparse-and-Redundant-Representation-Based-Smart-Meter-Data-Compression-and-Pattern-Extraction" class="headerlink" title="Sparse and Redundant Representation-Based Smart Meter Data Compression and Pattern Extraction"></a>Sparse and Redundant Representation-Based Smart Meter Data Compression and Pattern Extraction</h1><a id="more"></a>
<h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h3><p>Two main issues:<br>1.communication and storage of big data.(电网数据存储，有损压缩)<br>2.effective extraction of useful information.(信息提取)<br>本文用K_SVD稀疏表示技术（包含字典学习和稀疏编码）将负载曲线数据分解为几个partial usage patterns(PUPs)的线性组合，然后用线性支持向量机(SVM)将数据分为两类（居民消费者和中小型企业）。同时用k-means聚类、主成分分析(PCA)、小波变换(DWT)、分段聚合近似(PAA)作为对比。</p>
<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>数据压缩可分为两类：无损压缩(lossless compression)和有损压缩(lossy compression)。<br>无损压缩包括LAP2,FLAC,TTAEnc,ZIP,JPEG-LS,SPIHT-lossless。<br>有损压缩包括小波变换(discrete wavelet, DWT),傅里叶变换(dicrete Fourier transform, DFT),主成分分析(principal component analysis, PCA),单值分解(singular value decomposition,SVD)。<br>相对于无损压缩，有损压缩可以讲话数据位数，同时不损失数据信息。</p>
<p>聚类和稀疏编码都可以进行负载曲线数据的压缩，但是聚类是降幅在数据看成一个整体，而稀疏编码则是将每日的负载数据分解为不同的PUPs。这样不同的负载数据可以被看做PUPs的线性组合。</p>
<p>本文采用的数据压缩算法和提取特征的算法是非负的K-SVD算法，分类算法是线性的支持向量机。</p>
<h4 id="基于非负K-SVD稀疏编码-NON-NEGATIVE-K-SVD-BASED-SPARSE-CODING"><a href="#基于非负K-SVD稀疏编码-NON-NEGATIVE-K-SVD-BASED-SPARSE-CODING" class="headerlink" title="基于非负K-SVD稀疏编码(NON-NEGATIVE K-SVD BASED SPARSE CODING)"></a>基于非负K-SVD稀疏编码(NON-NEGATIVE K-SVD BASED SPARSE CODING)</h4><ul>
<li>稀疏编码<br>X=DA<br>X是输入变量，是一个N<em>M的矩阵，其中M对应负载曲线的个数，即数据集中消费者数目；N对应的是属性个数，又称为维度。<br>A是M</em>K冗余字典，其实就是所提取的变量的系数矩阵，其中不为0的元素个数为s。<br>D是K维的特征向量。</li>
</ul>
<p>稀疏编码目标是找到一个稀疏的且有冗余的字典集来表示原有的数据。稀疏性表示只有较小的一部分A内的元素非零，有冗余意思是K&gt;N。<br>在本文中，经过稀疏编码，发现只有第1，3，5，K个PUP的系数不为零，所以原48维的数据经过稀疏编码后变成四个系数。</p>
<ul>
<li>非负K-SVD<br>稀疏编码是有损的，即X&gt;DA。所以优化问题变为 min|X-DA|^2 .同时还需要用最小平均标准差RMSE来评估算法的效果。完整K-SVD算法如下图。<br><img src="https://raw.githubusercontent.com/Annashuo/hello-world/master/k-svd.png" alt="k-svd"></li>
</ul>
<h4 id="线性支持向量机-linear-SVM"><a href="#线性支持向量机-linear-SVM" class="headerlink" title="线性支持向量机((linear SVM)"></a>线性支持向量机((linear SVM)</h4><p>线性支持向量机的原理不打算写了，各种书都说烂了…matlab，R，python都有现成的函数。写写这篇文章提到的用线性支持向量机四个原因：</p>
<ul>
<li>线性SVM不需要计算核函数值，速度快于基于核函数的SVM；</li>
<li>线性SVM只有一个参数需要被设定，找到这一个参数的最优值比较容易；</li>
<li>只要数据量够大，线性SVM交叉检验效果好；</li>
<li>特征的比重直接代表了特征的重要性，物理含义好解释。</li>
</ul>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
  </entry>
  <entry>
    <title>不定期生活小记(一)</title>
    <url>/2016/09/12/%E4%B8%8D%E5%AE%9A%E6%9C%9F%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0-%E4%B8%80/</url>
    <content><![CDATA[<p>第一篇博文，就当作试手，练练怎么用markdown写文章吧。</p>
<a id="more"></a>
<p>开学两周，基本都是晚上10点才回到宿舍，12点才睡觉，昨晚第一次熬夜到1点才睡觉，然而这以后将是常态。</p>
<p>关于学习，现在总共有三件事：18600，18696和毕设。上课两周才发现，我们原来的本科教育是有多水…</p>
<p>关于生活，我现在还是觉得广东不适合我…我还是会更喜欢北京。这边的吃的极具广东特色，清汤寡水，找一家东北菜馆都很难…广州大学城这个地方吧，实在是太偏僻了，加上课业繁重，也没有时间出去走走，每天都是JIE楼，宿舍和食堂三点一线。而且压力其实也挺大的，身边好多人都处于一种高度紧张的状态。原来翘课什么的都很普遍，就算是上课也不怎么好好听，考试之前刷刷题什么的就ok，现在除了上课，课后花的时间远比上课多得多，还经常弄不明白…人啊，总是一阵一阵的，习惯就好~</p>
<p>不过没关系，多大点事啊，积累经验嘛…</p>
<p>完。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
</search>
